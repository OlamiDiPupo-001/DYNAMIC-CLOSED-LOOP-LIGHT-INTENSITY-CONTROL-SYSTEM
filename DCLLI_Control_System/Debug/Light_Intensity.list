
Light_Intensity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800966c  0800966c  0000b280  2**0
                  CONTENTS
  4 .ARM          00000008  0800966c  0800966c  0000a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009674  08009674  0000b280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009678  08009678  0000a678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800967c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000280  080098fc  0000b280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  080098fc  0000b6e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e118  00000000  00000000  0000b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab9  00000000  00000000  000293c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f6  00000000  00000000  0002f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8ff  00000000  00000000  00030606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002360c  00000000  00000000  0005af05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa8d0  00000000  00000000  0007e511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178de1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff4  00000000  00000000  00178e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0017ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009370 	.word	0x08009370

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	08009370 	.word	0x08009370

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b96a 	b.w	8000c18 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	460c      	mov	r4, r1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d14e      	bne.n	8000a06 <__udivmoddi4+0xaa>
 8000968:	4694      	mov	ip, r2
 800096a:	458c      	cmp	ip, r1
 800096c:	4686      	mov	lr, r0
 800096e:	fab2 f282 	clz	r2, r2
 8000972:	d962      	bls.n	8000a3a <__udivmoddi4+0xde>
 8000974:	b14a      	cbz	r2, 800098a <__udivmoddi4+0x2e>
 8000976:	f1c2 0320 	rsb	r3, r2, #32
 800097a:	4091      	lsls	r1, r2
 800097c:	fa20 f303 	lsr.w	r3, r0, r3
 8000980:	fa0c fc02 	lsl.w	ip, ip, r2
 8000984:	4319      	orrs	r1, r3
 8000986:	fa00 fe02 	lsl.w	lr, r0, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f f68c 	uxth.w	r6, ip
 8000992:	fbb1 f4f7 	udiv	r4, r1, r7
 8000996:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099a:	fb07 1114 	mls	r1, r7, r4, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb04 f106 	mul.w	r1, r4, r6
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80009b2:	f080 8112 	bcs.w	8000bda <__udivmoddi4+0x27e>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 810f 	bls.w	8000bda <__udivmoddi4+0x27e>
 80009bc:	3c02      	subs	r4, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a59      	subs	r1, r3, r1
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ca:	fb07 1110 	mls	r1, r7, r0, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb00 f606 	mul.w	r6, r0, r6
 80009d6:	429e      	cmp	r6, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x94>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e2:	f080 80fc 	bcs.w	8000bde <__udivmoddi4+0x282>
 80009e6:	429e      	cmp	r6, r3
 80009e8:	f240 80f9 	bls.w	8000bde <__udivmoddi4+0x282>
 80009ec:	4463      	add	r3, ip
 80009ee:	3802      	subs	r0, #2
 80009f0:	1b9b      	subs	r3, r3, r6
 80009f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009f6:	2100      	movs	r1, #0
 80009f8:	b11d      	cbz	r5, 8000a02 <__udivmoddi4+0xa6>
 80009fa:	40d3      	lsrs	r3, r2
 80009fc:	2200      	movs	r2, #0
 80009fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d905      	bls.n	8000a16 <__udivmoddi4+0xba>
 8000a0a:	b10d      	cbz	r5, 8000a10 <__udivmoddi4+0xb4>
 8000a0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a10:	2100      	movs	r1, #0
 8000a12:	4608      	mov	r0, r1
 8000a14:	e7f5      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000a16:	fab3 f183 	clz	r1, r3
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d146      	bne.n	8000aac <__udivmoddi4+0x150>
 8000a1e:	42a3      	cmp	r3, r4
 8000a20:	d302      	bcc.n	8000a28 <__udivmoddi4+0xcc>
 8000a22:	4290      	cmp	r0, r2
 8000a24:	f0c0 80f0 	bcc.w	8000c08 <__udivmoddi4+0x2ac>
 8000a28:	1a86      	subs	r6, r0, r2
 8000a2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d0e6      	beq.n	8000a02 <__udivmoddi4+0xa6>
 8000a34:	e9c5 6300 	strd	r6, r3, [r5]
 8000a38:	e7e3      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	f040 8090 	bne.w	8000b60 <__udivmoddi4+0x204>
 8000a40:	eba1 040c 	sub.w	r4, r1, ip
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa1f f78c 	uxth.w	r7, ip
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a56:	fb08 4416 	mls	r4, r8, r6, r4
 8000a5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5e:	fb07 f006 	mul.w	r0, r7, r6
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x11c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x11a>
 8000a70:	4298      	cmp	r0, r3
 8000a72:	f200 80cd 	bhi.w	8000c10 <__udivmoddi4+0x2b4>
 8000a76:	4626      	mov	r6, r4
 8000a78:	1a1c      	subs	r4, r3, r0
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a82:	fb08 4410 	mls	r4, r8, r0, r4
 8000a86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8a:	fb00 f707 	mul.w	r7, r0, r7
 8000a8e:	429f      	cmp	r7, r3
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x148>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9a:	d202      	bcs.n	8000aa2 <__udivmoddi4+0x146>
 8000a9c:	429f      	cmp	r7, r3
 8000a9e:	f200 80b0 	bhi.w	8000c02 <__udivmoddi4+0x2a6>
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	1bdb      	subs	r3, r3, r7
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	e7a5      	b.n	80009f8 <__udivmoddi4+0x9c>
 8000aac:	f1c1 0620 	rsb	r6, r1, #32
 8000ab0:	408b      	lsls	r3, r1
 8000ab2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000abc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ac0:	ea43 030c 	orr.w	r3, r3, ip
 8000ac4:	40f4      	lsrs	r4, r6
 8000ac6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aca:	0c38      	lsrs	r0, r7, #16
 8000acc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ad0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	fb00 441e 	mls	r4, r0, lr, r4
 8000adc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ae4:	45a1      	cmp	r9, r4
 8000ae6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aea:	d90a      	bls.n	8000b02 <__udivmoddi4+0x1a6>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000af2:	f080 8084 	bcs.w	8000bfe <__udivmoddi4+0x2a2>
 8000af6:	45a1      	cmp	r9, r4
 8000af8:	f240 8081 	bls.w	8000bfe <__udivmoddi4+0x2a2>
 8000afc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b00:	443c      	add	r4, r7
 8000b02:	eba4 0409 	sub.w	r4, r4, r9
 8000b06:	fa1f f983 	uxth.w	r9, r3
 8000b0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d907      	bls.n	8000b2e <__udivmoddi4+0x1d2>
 8000b1e:	193c      	adds	r4, r7, r4
 8000b20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b24:	d267      	bcs.n	8000bf6 <__udivmoddi4+0x29a>
 8000b26:	45a4      	cmp	ip, r4
 8000b28:	d965      	bls.n	8000bf6 <__udivmoddi4+0x29a>
 8000b2a:	3b02      	subs	r3, #2
 8000b2c:	443c      	add	r4, r7
 8000b2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b32:	fba0 9302 	umull	r9, r3, r0, r2
 8000b36:	eba4 040c 	sub.w	r4, r4, ip
 8000b3a:	429c      	cmp	r4, r3
 8000b3c:	46ce      	mov	lr, r9
 8000b3e:	469c      	mov	ip, r3
 8000b40:	d351      	bcc.n	8000be6 <__udivmoddi4+0x28a>
 8000b42:	d04e      	beq.n	8000be2 <__udivmoddi4+0x286>
 8000b44:	b155      	cbz	r5, 8000b5c <__udivmoddi4+0x200>
 8000b46:	ebb8 030e 	subs.w	r3, r8, lr
 8000b4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b52:	40cb      	lsrs	r3, r1
 8000b54:	431e      	orrs	r6, r3
 8000b56:	40cc      	lsrs	r4, r1
 8000b58:	e9c5 6400 	strd	r6, r4, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e750      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000b60:	f1c2 0320 	rsb	r3, r2, #32
 8000b64:	fa20 f103 	lsr.w	r1, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	430c      	orrs	r4, r1
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7c:	fa1f f78c 	uxth.w	r7, ip
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3110 	mls	r1, r8, r0, r3
 8000b88:	0c23      	lsrs	r3, r4, #16
 8000b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8e:	fb00 f107 	mul.w	r1, r0, r7
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x24c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b9e:	d22c      	bcs.n	8000bfa <__udivmoddi4+0x29e>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d92a      	bls.n	8000bfa <__udivmoddi4+0x29e>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bb0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb01 f307 	mul.w	r3, r1, r7
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x276>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bc8:	d213      	bcs.n	8000bf2 <__udivmoddi4+0x296>
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	d911      	bls.n	8000bf2 <__udivmoddi4+0x296>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4464      	add	r4, ip
 8000bd2:	1ae4      	subs	r4, r4, r3
 8000bd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bd8:	e739      	b.n	8000a4e <__udivmoddi4+0xf2>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	e6f0      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bde:	4608      	mov	r0, r1
 8000be0:	e706      	b.n	80009f0 <__udivmoddi4+0x94>
 8000be2:	45c8      	cmp	r8, r9
 8000be4:	d2ae      	bcs.n	8000b44 <__udivmoddi4+0x1e8>
 8000be6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bee:	3801      	subs	r0, #1
 8000bf0:	e7a8      	b.n	8000b44 <__udivmoddi4+0x1e8>
 8000bf2:	4631      	mov	r1, r6
 8000bf4:	e7ed      	b.n	8000bd2 <__udivmoddi4+0x276>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	e799      	b.n	8000b2e <__udivmoddi4+0x1d2>
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	e7d4      	b.n	8000ba8 <__udivmoddi4+0x24c>
 8000bfe:	46d6      	mov	lr, sl
 8000c00:	e77f      	b.n	8000b02 <__udivmoddi4+0x1a6>
 8000c02:	4463      	add	r3, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	e74d      	b.n	8000aa4 <__udivmoddi4+0x148>
 8000c08:	4606      	mov	r6, r0
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e70f      	b.n	8000a30 <__udivmoddi4+0xd4>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	e730      	b.n	8000a78 <__udivmoddi4+0x11c>
 8000c16:	bf00      	nop

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	4619      	mov	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f107 020f 	add.w	r2, r7, #15
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	f003 fabb 	bl	80041b8 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000c42:	2310      	movs	r3, #16
 8000c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f107 020f 	add.w	r2, r7, #15
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f003 faac 	bl	80041b8 <HAL_I2C_Master_Transmit>
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f107 020c 	add.w	r2, r7, #12
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2302      	movs	r3, #2
 8000c86:	f003 fbaf 	bl	80043e8 <HAL_I2C_Master_Receive>
  hbh1750->Readout = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c9a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000cbc <BH1750_ReadIlluminance_lux+0x54>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	edc3 7a03 	vstr	s15, [r3, #12]

  return hbh1750->Readout;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	ee07 3a90 	vmov	s15, r3
}
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	3f99999a 	.word	0x3f99999a

08000cc0 <BTN_DIO_Read>:
  * @brief Reads button state
  * @param[in] hbtn		: button DIO handler
  * @retval	Button state (BTN_PRESSED or BTN_RELEASED)
  */
BTN_DIO_State_TypeDef BTN_DIO_Read(const BTN_DIO_Handle_TypeDef* hbtn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	_Bool state = DIO_Read(&(hbtn->Input));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f868 	bl	8000da0 <DIO_Read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
	return (hbtn->Pull == BTN_PULL_DOWN) ? state : !state;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7a1b      	ldrb	r3, [r3, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <BTN_DIO_Read+0x20>
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	e003      	b.n	8000ce8 <BTN_DIO_Read+0x28>
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	f083 0301 	eor.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <BTN_DIO_EdgeDetected>:
  * @brief Detects button state change
  * @param[in/out] hbtn		: button DIO handler
  * @retval	Detected edge (BTN_NO_EDGE, BTN_PRESSED_EDGE or BTN_RELEASED_EDGE)
  */
BTN_DIO_Edge_TypeDef BTN_DIO_EdgeDetected(BTN_DIO_Handle_TypeDef* hbtn)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	BTN_DIO_State_TypeDef state = BTN_DIO_Read(hbtn);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ffe1 	bl	8000cc0 <BTN_DIO_Read>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73bb      	strb	r3, [r7, #14]
	BTN_DIO_Edge_TypeDef edge = BTN_NO_EDGE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
	if(state == BTN_PRESSED && hbtn->PrevState == BTN_RELEASED)
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d106      	bne.n	8000d1a <BTN_DIO_EdgeDetected+0x2a>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7a5b      	ldrb	r3, [r3, #9]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <BTN_DIO_EdgeDetected+0x2a>
		edge = BTN_PRESSED_EDGE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e008      	b.n	8000d2c <BTN_DIO_EdgeDetected+0x3c>
	else if(state == BTN_RELEASED && hbtn->PrevState == BTN_PRESSED)
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <BTN_DIO_EdgeDetected+0x3c>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a5b      	ldrb	r3, [r3, #9]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d101      	bne.n	8000d2c <BTN_DIO_EdgeDetected+0x3c>
		edge = BTN_RELEASED_EDGE;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	73fb      	strb	r3, [r7, #15]
	hbtn->PrevState = state;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7bba      	ldrb	r2, [r7, #14]
 8000d30:	725a      	strb	r2, [r3, #9]
	return edge;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DIO_WriteLow>:
 * @brief Resets digital output (writes '0')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_WriteLow(const DIO_Handle_TypeDef* hdio)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, GPIO_PIN_RESET);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f003 f962 	bl	8004018 <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <DIO_WriteHigh>:
 * @brief Sets digital output (writes '1')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_WriteHigh(const DIO_Handle_TypeDef* hdio)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, GPIO_PIN_SET);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	889b      	ldrh	r3, [r3, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f003 f952 	bl	8004018 <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DIO_Write>:
 * @param[in] hdio  : Digital I/O handler
 * @param[in] state : Digital output state (0 or 1)
 * @retval None
 */
void DIO_Write(const DIO_Handle_TypeDef* hdio, _Bool state)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, (GPIO_PinState)state);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	889b      	ldrh	r3, [r3, #4]
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	4619      	mov	r1, r3
 8000d94:	f003 f940 	bl	8004018 <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <DIO_Read>:
 * @brief Reads digital input
 * @param[in] hdio  : Digital I/O handler
 * @retval Input state (0 or 1)
 */
_Bool DIO_Read(const DIO_Handle_TypeDef* hdio)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  return (_Bool)HAL_GPIO_ReadPin(hdio->Port, hdio->Pin);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	889b      	ldrh	r3, [r3, #4]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4610      	mov	r0, r2
 8000db4:	f003 f918 	bl	8003fe8 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bf14      	ite	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	2300      	moveq	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <__tm1637_delay_us>:
{
  DIO_WriteHigh(&(hdisp->DecimalPointOutput));
}

void __tm1637_delay_us(unsigned int i)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  for (; i>0; i--)
 8000dd4:	e00c      	b.n	8000df0 <__tm1637_delay_us+0x24>
  {
    for (int j = 0; j < TM1637_CYCLES_PER_1US; ++j)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e003      	b.n	8000de4 <__tm1637_delay_us+0x18>
    {
      __asm__ __volatile__("nop\n\t":::"memory");
 8000ddc:	bf00      	nop
    for (int j = 0; j < TM1637_CYCLES_PER_1US; ++j)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2bd7      	cmp	r3, #215	@ 0xd7
 8000de8:	ddf8      	ble.n	8000ddc <__tm1637_delay_us+0x10>
  for (; i>0; i--)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1ef      	bne.n	8000dd6 <__tm1637_delay_us+0xa>
    }
  }
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <__tm1637_start>:

void __tm1637_start(DISP_TM1637_HandleTypeDef* hdisp)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  DIO_WriteHigh(&(hdisp->CLK));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3308      	adds	r3, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ffa3 	bl	8000d5c <DIO_WriteHigh>
  DIO_WriteHigh(&(hdisp->DIO));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff9f 	bl	8000d5c <DIO_WriteHigh>
  __tm1637_delay_us(2);
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff ffd4 	bl	8000dcc <__tm1637_delay_us>
  DIO_WriteLow(&(hdisp->DIO));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff88 	bl	8000d3c <DIO_WriteLow>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <__tm1637_stop>:

void __tm1637_stop(DISP_TM1637_HandleTypeDef* hdisp)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  DIO_WriteLow(&(hdisp->CLK));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3308      	adds	r3, #8
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff7b 	bl	8000d3c <DIO_WriteLow>
  __tm1637_delay_us(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff ffc0 	bl	8000dcc <__tm1637_delay_us>
  DIO_WriteLow(&(hdisp->DIO));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff74 	bl	8000d3c <DIO_WriteLow>
  __tm1637_delay_us(2);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f7ff ffb9 	bl	8000dcc <__tm1637_delay_us>
  DIO_WriteHigh(&(hdisp->CLK));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff7c 	bl	8000d5c <DIO_WriteHigh>
  __tm1637_delay_us(2);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff ffb1 	bl	8000dcc <__tm1637_delay_us>
  DIO_WriteHigh(&(hdisp->DIO));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff75 	bl	8000d5c <DIO_WriteHigh>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <__tm1637_read_result>:

void __tm1637_read_result(DISP_TM1637_HandleTypeDef* hdisp)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  DIO_WriteLow(&(hdisp->CLK));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3308      	adds	r3, #8
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff58 	bl	8000d3c <DIO_WriteLow>
  __tm1637_delay_us(5);
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f7ff ff9d 	bl	8000dcc <__tm1637_delay_us>
  // while (dio); // We're cheating here and not actually reading back the response.
  DIO_WriteHigh(&(hdisp->CLK));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3308      	adds	r3, #8
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff60 	bl	8000d5c <DIO_WriteHigh>
  __tm1637_delay_us(2);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff ff95 	bl	8000dcc <__tm1637_delay_us>
  DIO_WriteLow(&(hdisp->CLK));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff48 	bl	8000d3c <DIO_WriteLow>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <__tm1637_write_byte>:

void __tm1637_write_byte(DISP_TM1637_HandleTypeDef* hdisp, unsigned char b)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 8; ++i)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e023      	b.n	8000f0e <__tm1637_write_byte+0x5a>
  {
    DIO_WriteLow(&(hdisp->CLK));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3308      	adds	r3, #8
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff36 	bl	8000d3c <DIO_WriteLow>
    if(b & 0x01)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <__tm1637_write_byte+0x30>
    {
      DIO_WriteHigh(&(hdisp->DIO));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff3d 	bl	8000d5c <DIO_WriteHigh>
 8000ee2:	e003      	b.n	8000eec <__tm1637_write_byte+0x38>
    }
    else
    {
      DIO_WriteLow(&(hdisp->DIO));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff28 	bl	8000d3c <DIO_WriteLow>
    }
    __tm1637_delay_us(3);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f7ff ff6d 	bl	8000dcc <__tm1637_delay_us>
    b >>= 1;
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	70fb      	strb	r3, [r7, #3]
    DIO_WriteHigh(&(hdisp->CLK));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3308      	adds	r3, #8
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff2d 	bl	8000d5c <DIO_WriteHigh>
    __tm1637_delay_us(3);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f7ff ff62 	bl	8000dcc <__tm1637_delay_us>
  for (int i = 0; i < 8; ++i)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	ddd8      	ble.n	8000ec6 <__tm1637_write_byte+0x12>
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <DISP_TM1637_printDecUInt>:
 * @param[in] hdisp : TODO
 * @param[in] dec   : TODO
 * @return None
 */
void DISP_TM1637_printDecUInt(DISP_TM1637_HandleTypeDef* hdisp, uint16_t dec)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
  unsigned char digitArr[4];
  for (int i = 0; i < 4; ++i)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e01c      	b.n	8000f6c <DISP_TM1637_printDecUInt+0x4c>
  {
    digitArr[i] = DISP_COMMON_CATHODE_MAP[dec % 10];
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <DISP_TM1637_printDecUInt+0xd0>)
 8000f36:	fba3 1302 	umull	r1, r3, r3, r2
 8000f3a:	08d9      	lsrs	r1, r3, #3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <DISP_TM1637_printDecUInt+0xd4>)
 8000f4c:	5c99      	ldrb	r1, [r3, r2]
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
    dec /= 10;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <DISP_TM1637_printDecUInt+0xd0>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	807b      	strh	r3, [r7, #2]
  for (int i = 0; i < 4; ++i)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	dddf      	ble.n	8000f32 <DISP_TM1637_printDecUInt+0x12>
  }
  if(hdisp->Separator == TM1637_SEP_COLON)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7c1b      	ldrb	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <DISP_TM1637_printDecUInt+0x64>
  {
    digitArr[2] |= (1 << 7);
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	73bb      	strb	r3, [r7, #14]
  }

  __tm1637_start(hdisp);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff3d 	bl	8000e04 <__tm1637_start>
  __tm1637_write_byte(hdisp, 0x40);
 8000f8a:	2140      	movs	r1, #64	@ 0x40
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff91 	bl	8000eb4 <__tm1637_write_byte>
  __tm1637_read_result(hdisp);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff71 	bl	8000e7a <__tm1637_read_result>
  __tm1637_stop(hdisp);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff4b 	bl	8000e34 <__tm1637_stop>

  __tm1637_start(hdisp);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff30 	bl	8000e04 <__tm1637_start>
  __tm1637_write_byte(hdisp, 0xc0);
 8000fa4:	21c0      	movs	r1, #192	@ 0xc0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff84 	bl	8000eb4 <__tm1637_write_byte>
  __tm1637_read_result(hdisp);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff64 	bl	8000e7a <__tm1637_read_result>

  for (int i = 0; i < 4; ++i) {
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e010      	b.n	8000fda <DISP_TM1637_printDecUInt+0xba>
    __tm1637_write_byte(hdisp, digitArr[3 - i]);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f1c3 0303 	rsb	r3, r3, #3
 8000fbe:	3318      	adds	r3, #24
 8000fc0:	443b      	add	r3, r7
 8000fc2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff73 	bl	8000eb4 <__tm1637_write_byte>
    __tm1637_read_result(hdisp);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff53 	bl	8000e7a <__tm1637_read_result>
  for (int i = 0; i < 4; ++i) {
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	ddeb      	ble.n	8000fb8 <DISP_TM1637_printDecUInt+0x98>
  }
  __tm1637_stop(hdisp);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff27 	bl	8000e34 <__tm1637_stop>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	cccccccd 	.word	0xcccccccd
 8000ff4:	080094e8 	.word	0x080094e8

08000ff8 <DISP_TM1637_SetBrightness>:
 * @param[in] hdisp      : TODO
 * @param[in] brightness : TODO
 * @return None
 */
void DISP_TM1637_SetBrightness(DISP_TM1637_HandleTypeDef* hdisp, uint8_t brightness)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
  // Brightness command:
  // 1000 0XXX = display off
  // 1000 1BBB = display on, brightness 0-7
  // X = don't care
  // B = brightness
  __tm1637_start(hdisp);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff fefd 	bl	8000e04 <__tm1637_start>
  __tm1637_write_byte(hdisp, 0x87 + brightness);
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	3b79      	subs	r3, #121	@ 0x79
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff4e 	bl	8000eb4 <__tm1637_write_byte>
  __tm1637_read_result(hdisp);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff2e 	bl	8000e7a <__tm1637_read_result>
  __tm1637_stop(hdisp);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff08 	bl	8000e34 <__tm1637_stop>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <__lcd_dio_delay_us>:
 * @param[in] hlcd     : LCD handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_dio_delay_us(LCD_DIO_HandleTypeDef* hlcd, uint32_t delay_us)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4618      	mov	r0, r3
 8001046:	f004 ff75 	bl	8005f34 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 800104a:	bf00      	nop
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d8f8      	bhi.n	800104c <__lcd_dio_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4618      	mov	r0, r3
 8001060:	f004 ffd8 	bl	8006014 <HAL_TIM_Base_Stop>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <__lcd_dio_write>:
 * @param[in] data : Data byte
 * @param[in] len  : Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void __lcd_dio_write(LCD_DIO_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
 8001078:	4613      	mov	r3, r2
 800107a:	70bb      	strb	r3, [r7, #2]
  DIO_WriteHigh(&(hlcd->E));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330c      	adds	r3, #12
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe6b 	bl	8000d5c <DIO_WriteHigh>

  for(uint8_t i = 0; i < len; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e015      	b.n	80010b8 <__lcd_dio_write+0x4c>
    DIO_Write(&(hlcd->DATA[i]), (data >> i) & 0x01);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	18d0      	adds	r0, r2, r3
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	fa42 f303 	asr.w	r3, r2, r3
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fe65 	bl	8000d7c <DIO_Write>
  for(uint8_t i = 0; i < len; i++)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	78bb      	ldrb	r3, [r7, #2]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3e5      	bcc.n	800108c <__lcd_dio_write+0x20>

  DIO_WriteLow(&(hlcd->E)); // Data receive on falling edge
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	330c      	adds	r3, #12
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe39 	bl	8000d3c <DIO_WriteLow>
  __lcd_dio_delay(hlcd, 0.05);  // > 41 us
 80010ca:	2132      	movs	r1, #50	@ 0x32
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffad 	bl	800102c <__lcd_dio_delay_us>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <__lcd_dio_write_command>:
 * @param[in] hlcd    : LCD handler
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_dio_write_command(LCD_DIO_HandleTypeDef* hlcd, uint8_t command)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	70fb      	strb	r3, [r7, #3]
  DIO_Write(&(hlcd->RS), LCD_COMMAND_REG);  // Write to command register
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe45 	bl	8000d7c <DIO_Write>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7d1b      	ldrb	r3, [r3, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d115      	bne.n	8001126 <__lcd_dio_write_command+0x4c>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7f1b      	ldrb	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <__lcd_dio_write_command+0x38>
    {
      __lcd_dio_write(hlcd, (command >> 4), LCD_NIB);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2204      	movs	r2, #4
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffad 	bl	800106c <__lcd_dio_write>
    }
    __lcd_dio_write(hlcd, command & 0x0F, LCD_NIB);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2204      	movs	r2, #4
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa4 	bl	800106c <__lcd_dio_write>
  }
  else
  {
     __lcd_dio_write(hlcd, command, LCD_BYTE);
  }
}
 8001124:	e005      	b.n	8001132 <__lcd_dio_write_command+0x58>
     __lcd_dio_write(hlcd, command, LCD_BYTE);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	2208      	movs	r2, #8
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff9d 	bl	800106c <__lcd_dio_write>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <__lcd_dio_write_data>:
 * @param[in] hlcd : LCD handler
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_dio_write_data(LCD_DIO_HandleTypeDef* hlcd, uint8_t data)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
  DIO_Write(&(hlcd->RS), LCD_DATA_REG);     // Write to data register
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	2101      	movs	r1, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe15 	bl	8000d7c <DIO_Write>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7d1b      	ldrb	r3, [r3, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d111      	bne.n	800117e <__lcd_dio_write_data+0x44>
  {
    __lcd_dio_write(hlcd, data >> 4, LCD_NIB);
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2204      	movs	r2, #4
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff81 	bl	800106c <__lcd_dio_write>
    __lcd_dio_write(hlcd, data & 0x0F, LCD_NIB);
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2204      	movs	r2, #4
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff78 	bl	800106c <__lcd_dio_write>
  }
  else
  {
    __lcd_dio_write(hlcd, data, LCD_BYTE);
  }
}
 800117c:	e005      	b.n	800118a <__lcd_dio_write_data+0x50>
    __lcd_dio_write(hlcd, data, LCD_BYTE);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2208      	movs	r2, #8
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff71 	bl	800106c <__lcd_dio_write>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <LCD_DIO_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler
 * @return None 
 */
void LCD_DIO_Init(LCD_DIO_HandleTypeDef* hlcd)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]

  __lcd_dio_delay(hlcd, 15.2);         // >15 ms
 80011a0:	f643 315f 	movw	r1, #15199	@ 0x3b5f
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff41 	bl	800102c <__lcd_dio_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7d1b      	ldrb	r3, [r3, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d120      	bne.n	80011f4 <LCD_DIO_Init+0x62>
  {
    __lcd_dio_write_command(hlcd, 0x3);  // 0011
 80011b2:	2103      	movs	r1, #3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff90 	bl	80010da <__lcd_dio_write_command>
    __lcd_dio_delay(hlcd, 4.2);        // > 4.1 ms
 80011ba:	f241 0167 	movw	r1, #4199	@ 0x1067
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff34 	bl	800102c <__lcd_dio_delay_us>
    __lcd_dio_write_command(hlcd, 0x3);  // 0011
 80011c4:	2103      	movs	r1, #3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff87 	bl	80010da <__lcd_dio_write_command>
    __lcd_dio_delay(hlcd, 0.2);        // > 0.1 ms
 80011cc:	21c8      	movs	r1, #200	@ 0xc8
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff2c 	bl	800102c <__lcd_dio_delay_us>
    __lcd_dio_write_command(hlcd, 0x3);  // 0011
 80011d4:	2103      	movs	r1, #3
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff7f 	bl	80010da <__lcd_dio_write_command>
    __lcd_dio_write_command(hlcd, 0x2);  // 0010
 80011dc:	2102      	movs	r1, #2
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff7b 	bl	80010da <__lcd_dio_write_command>

    hlcd->IsInitialized = 1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	771a      	strb	r2, [r3, #28]

    __lcd_dio_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80011ea:	2128      	movs	r1, #40	@ 0x28
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff74 	bl	80010da <__lcd_dio_write_command>
 80011f2:	e01f      	b.n	8001234 <LCD_DIO_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7d1b      	ldrb	r3, [r3, #20]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d11b      	bne.n	8001234 <LCD_DIO_Init+0xa2>
  {
    __lcd_dio_write_command(hlcd, 0x30); // 0011 XXXX
 80011fc:	2130      	movs	r1, #48	@ 0x30
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff6b 	bl	80010da <__lcd_dio_write_command>
    __lcd_dio_delay(hlcd, 4.2);        // > 4.1 ms
 8001204:	f241 0167 	movw	r1, #4199	@ 0x1067
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff0f 	bl	800102c <__lcd_dio_delay_us>
    __lcd_dio_write_command(hlcd, 0x30); // 0011 XXXX
 800120e:	2130      	movs	r1, #48	@ 0x30
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff62 	bl	80010da <__lcd_dio_write_command>
    __lcd_dio_delay(hlcd, 0.2);        // > 0.1 ms
 8001216:	21c8      	movs	r1, #200	@ 0xc8
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff07 	bl	800102c <__lcd_dio_delay_us>
    __lcd_dio_write_command(hlcd, 0x30); // 0011 XXXX
 800121e:	2130      	movs	r1, #48	@ 0x30
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff5a 	bl	80010da <__lcd_dio_write_command>

    hlcd->IsInitialized = 1;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	771a      	strb	r2, [r3, #28]

    __lcd_dio_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 800122c:	2138      	movs	r1, #56	@ 0x38
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff53 	bl	80010da <__lcd_dio_write_command>
  }

  __lcd_dio_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001234:	2101      	movs	r1, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff4f 	bl	80010da <__lcd_dio_write_command>
  __lcd_dio_delay(hlcd, 1.6);                                            // > 1.52 ms
 800123c:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fef3 	bl	800102c <__lcd_dio_delay_us>
  __lcd_dio_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001246:	210c      	movs	r1, #12
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff46 	bl	80010da <__lcd_dio_write_command>
  __lcd_dio_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800124e:	2106      	movs	r1, #6
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff42 	bl	80010da <__lcd_dio_write_command>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <LCD_DIO_printDecInt>:
 * @param[in] hlcd   : LCD handler
 * @param[in] number : Decimal number, max. 10 digits
 * @return None 
 */
void LCD_DIO_printDecInt(LCD_DIO_HandleTypeDef* hlcd, int number)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  char buffer[LCD_NUMBER_BUF_SIZE];
  sprintf(buffer, "%d", number);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4906      	ldr	r1, [pc, #24]	@ (800128c <LCD_DIO_printDecInt+0x2c>)
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fbbc 	bl	80089f0 <siprintf>

  LCD_DIO_printStr(hlcd, buffer);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f806 	bl	8001290 <LCD_DIO_printStr>
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08009388 	.word	0x08009388

08001290 <LCD_DIO_printStr>:
 * @param[in] hlcd : LCD handler
 * @param[in] str  : Null-terminated string
 * @return None 
 */
void LCD_DIO_printStr(LCD_DIO_HandleTypeDef* hlcd, char* str)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e00a      	b.n	80012b6 <LCD_DIO_printStr+0x26>
    __lcd_dio_write_data(hlcd, str[i]);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff45 	bl	800113a <__lcd_dio_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	3301      	adds	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	7bfc      	ldrb	r4, [r7, #15]
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f7fe ffa9 	bl	8000210 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	429c      	cmp	r4, r3
 80012c2:	d3ed      	bcc.n	80012a0 <LCD_DIO_printStr+0x10>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}
	...

080012d0 <LCD_DIO_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None 
 */
void LCD_DIO_SetCursor(LCD_DIO_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_dio_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_dio_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <LCD_DIO_SetCursor+0x30>)
 80012e4:	5cd2      	ldrb	r2, [r2, r3]
 80012e6:	78bb      	ldrb	r3, [r7, #2]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3b80      	subs	r3, #128	@ 0x80
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fef1 	bl	80010da <__lcd_dio_write_command>
  #endif
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	080094fc 	.word	0x080094fc

08001304 <LCD_DIO_printf>:
 * @param[in] format : Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    : Variadic arguments
 * @return None
 */
void LCD_DIO_printf(LCD_DIO_HandleTypeDef* hlcd, const char* format, ...)
{
 8001304:	b40e      	push	{r1, r2, r3}
 8001306:	b580      	push	{r7, lr}
 8001308:	b095      	sub	sp, #84	@ 0x54
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 800130e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001312:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800131c:	4618      	mov	r0, r3
 800131e:	f007 fb9d 	bl	8008a5c <vsiprintf>
  LCD_DIO_printStr(hlcd, buffer);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffb1 	bl	8001290 <LCD_DIO_printStr>
  va_end(args);
}
 800132e:	bf00      	nop
 8001330:	3754      	adds	r7, #84	@ 0x54
 8001332:	46bd      	mov	sp, r7
 8001334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001338:	b003      	add	sp, #12
 800133a:	4770      	bx	lr

0800133c <LED_DIO_Write>:
  * @param[in] hled   : LED DIO handler
  * @param[in] state  : LED state (LED_OFF or LED_ON)
  * @retval None
  */
void LED_DIO_Write(const LED_DIO_Handle_TypeDef* hled, LED_DIO_State_TypeDef state)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
  DIO_Write(&(hled->Output), (hled->ActiveState == LED_ON_HIGH) ? state : !state);
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7a1b      	ldrb	r3, [r3, #8]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d106      	bne.n	8001360 <LED_DIO_Write+0x24>
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf14      	ite	ne
 8001358:	2301      	movne	r3, #1
 800135a:	2300      	moveq	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	e005      	b.n	800136c <LED_DIO_Write+0x30>
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff fd04 	bl	8000d7c <DIO_Write>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (hled->Output.Duty) : (100.0f - hled->Output.Duty);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7b1b      	ldrb	r3, [r3, #12]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d103      	bne.n	8001394 <LED_PWM_Init+0x18>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001392:	e006      	b.n	80013a2 <LED_PWM_Init+0x26>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 7a02 	vldr	s15, [r3, #8]
 800139a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80013b8 <LED_PWM_Init+0x3c>
 800139e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hled->Output));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f918 	bl	80015e0 <PWM_Init>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	42c80000 	.word	0x42c80000

080013bc <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	ed87 0a00 	vstr	s0, [r7]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (duty) : (100.0f - duty);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7b1b      	ldrb	r3, [r3, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d006      	beq.n	80013de <LED_PWM_WriteDuty+0x22>
 80013d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001404 <LED_PWM_WriteDuty+0x48>
 80013d4:	edd7 7a00 	vldr	s15, [r7]
 80013d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013dc:	e001      	b.n	80013e2 <LED_PWM_WriteDuty+0x26>
 80013de:	edd7 7a00 	vldr	s15, [r7]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hled->Output), hled->Output.Duty);
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	4610      	mov	r0, r2
 80013f6:	f000 f90b 	bl	8001610 <PWM_WriteDuty>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	42c80000 	.word	0x42c80000

08001408 <MENU_ITEM_WriteDisplayBuffer>:
/**
 * @brief Write menu item display buffer content
 * @param[in/out] hmenuitem : Menu item handler
 */
void MENU_ITEM_WriteDisplayBuffer(MenuItem_TypeDef* hmenuitem, const char* str)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  int pad_len = LCD_LINE_LEN - hmenuitem->DisplayStrLen;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	8a5b      	ldrh	r3, [r3, #18]
 8001416:	f1c3 0310 	rsb	r3, r3, #16
 800141a:	60fb      	str	r3, [r7, #12]
  sprintf(hmenuitem->DisplayStr, "%s%.*s", str, pad_len, __menu__padding);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <MENU_ITEM_WriteDisplayBuffer+0x2c>)
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	4904      	ldr	r1, [pc, #16]	@ (8001438 <MENU_ITEM_WriteDisplayBuffer+0x30>)
 8001428:	f007 fae2 	bl	80089f0 <siprintf>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	08009500 	.word	0x08009500
 8001438:	08009398 	.word	0x08009398

0800143c <__menu_ref_lux_routine>:
};
unsigned int ADC1_ConvResults_mV[16];

/* Private variables ---------------------------------------------------------*/

MENU_ITEM_CONTRUCTOR(menu_ref_lux, { menu_float_io_routine(hmenuitem, hbh1750.Readout, 1, "Ref_Lux", "lux"); } );
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <__menu_ref_lux_routine+0x24>)
 8001446:	edd3 7a03 	vldr	s15, [r3, #12]
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <__menu_ref_lux_routine+0x28>)
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <__menu_ref_lux_routine+0x2c>)
 800144e:	2101      	movs	r1, #1
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f839 	bl	80014cc <menu_float_io_routine>
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000000 	.word	0x20000000
 8001464:	080093a0 	.word	0x080093a0
 8001468:	080093a4 	.word	0x080093a4

0800146c <__menu_illuminance_routine>:
MENU_ITEM_CONTRUCTOR(menu_illuminance, { menu_float_io_routine(hmenuitem, hbh1750.Readout, 2, "Illuminance", "lux"); } );
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <__menu_illuminance_routine+0x24>)
 8001476:	edd3 7a03 	vldr	s15, [r3, #12]
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <__menu_illuminance_routine+0x28>)
 800147c:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <__menu_illuminance_routine+0x2c>)
 800147e:	2102      	movs	r1, #2
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f821 	bl	80014cc <menu_float_io_routine>
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	080093a0 	.word	0x080093a0
 8001498:	080093ac 	.word	0x080093ac

0800149c <__menu_cntrl_sig_routine>:
MENU_ITEM_CONTRUCTOR(menu_cntrl_sig, { menu_float_io_routine(hmenuitem, hbh1750.Readout, 3, "Control_Signal", "lux"); } );
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <__menu_cntrl_sig_routine+0x24>)
 80014a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <__menu_cntrl_sig_routine+0x28>)
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <__menu_cntrl_sig_routine+0x2c>)
 80014ae:	2103      	movs	r1, #3
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f809 	bl	80014cc <menu_float_io_routine>
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	080093a0 	.word	0x080093a0
 80014c8:	080093b8 	.word	0x080093b8

080014cc <menu_float_io_routine>:
};

/* Private function ----------------------------------------------------------*/

void menu_float_io_routine(MenuItem_TypeDef* hmenuitem, float value, unsigned int len, const char* name, const char* unit)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b092      	sub	sp, #72	@ 0x48
 80014d0:	af06      	add	r7, sp, #24
 80014d2:	6178      	str	r0, [r7, #20]
 80014d4:	ed87 0a04 	vstr	s0, [r7, #16]
 80014d8:	60f9      	str	r1, [r7, #12]
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	607b      	str	r3, [r7, #4]
  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = sprintf(temp_str, LCD_LINE_LEN, "%s: %*.2u%s", name, len, value, unit);
 80014de:	6938      	ldr	r0, [r7, #16]
 80014e0:	f7ff f97c 	bl	80007dc <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	f107 001c 	add.w	r0, r7, #28
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	9104      	str	r1, [sp, #16]
 80014f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <menu_float_io_routine+0x54>)
 80014fc:	2110      	movs	r1, #16
 80014fe:	f007 fa77 	bl	80089f0 <siprintf>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	825a      	strh	r2, [r3, #18]
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff ff79 	bl	8001408 <MENU_ITEM_WriteDisplayBuffer>
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	@ 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	080093c8 	.word	0x080093c8

08001524 <MENU_Init>:
/**
 * @brief Menu initialization. Creates doubly-linked list from elements of MENU_MAIN_ARRAY.
 * @param[in/out] hmenu : Menu structure
 */
void MENU_Init(Menu_TypeDef* hmenu)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Active element initialization */
  hmenu->Item = MENU_MAIN_ARRAY[0];
 800152c:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <MENU_Init+0xb0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]

  /* Main menu initialization */
  for(uint8_t i = 0; i < (uint8_t)(MENU_MAIN_LEN-1); i++) //< Next item
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e00c      	b.n	8001554 <MENU_Init+0x30>
    MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	4924      	ldr	r1, [pc, #144]	@ (80015d4 <MENU_Init+0xb0>)
 8001542:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001546:	4923      	ldr	r1, [pc, #140]	@ (80015d4 <MENU_Init+0xb0>)
 8001548:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800154c:	659a      	str	r2, [r3, #88]	@ 0x58
  for(uint8_t i = 0; i < (uint8_t)(MENU_MAIN_LEN-1); i++) //< Next item
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	3301      	adds	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d9ef      	bls.n	800153a <MENU_Init+0x16>
  for(uint8_t i = 1; i < (uint8_t)MENU_MAIN_LEN; i++)     //< Previous item
 800155a:	2301      	movs	r3, #1
 800155c:	73bb      	strb	r3, [r7, #14]
 800155e:	e00c      	b.n	800157a <MENU_Init+0x56>
    MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	1e5a      	subs	r2, r3, #1
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	491b      	ldr	r1, [pc, #108]	@ (80015d4 <MENU_Init+0xb0>)
 8001568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800156c:	4919      	ldr	r1, [pc, #100]	@ (80015d4 <MENU_Init+0xb0>)
 800156e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001572:	65da      	str	r2, [r3, #92]	@ 0x5c
  for(uint8_t i = 1; i < (uint8_t)MENU_MAIN_LEN; i++)     //< Previous item
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	3301      	adds	r3, #1
 8001578:	73bb      	strb	r3, [r7, #14]
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d9ef      	bls.n	8001560 <MENU_Init+0x3c>
  /* Cyclic list */
  MENU_MAIN_ARRAY[MENU_MAIN_LEN-1]->Next = MENU_MAIN_ARRAY[0]; //< Next of last is first item
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MENU_Init+0xb0>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <MENU_Init+0xb0>)
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	659a      	str	r2, [r3, #88]	@ 0x58
  MENU_MAIN_ARRAY[0]->Prev = MENU_MAIN_ARRAY[MENU_MAIN_LEN-1]; //< Previous of first is last item
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MENU_Init+0xb0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a11      	ldr	r2, [pc, #68]	@ (80015d4 <MENU_Init+0xb0>)
 8001590:	6892      	ldr	r2, [r2, #8]
 8001592:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* LCD set-up */
  LCD_DIO_SetCursor(hmenu->Display, 0, 0);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe97 	bl	80012d0 <LCD_DIO_SetCursor>
  LCD_DIO_printf(hmenu->Display, "%c", LCD_MENU_CURSOR_CHAR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	227e      	movs	r2, #126	@ 0x7e
 80015a8:	490b      	ldr	r1, [pc, #44]	@ (80015d8 <MENU_Init+0xb4>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff feaa 	bl	8001304 <LCD_DIO_printf>
  LCD_DIO_SetCursor(hmenu->Display, 1, 0);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2200      	movs	r2, #0
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fe89 	bl	80012d0 <LCD_DIO_SetCursor>
  LCD_DIO_printStr(hmenu->Display, " ");
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4906      	ldr	r1, [pc, #24]	@ (80015dc <MENU_Init+0xb8>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fe63 	bl	8001290 <LCD_DIO_printStr>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000214 	.word	0x20000214
 80015d8:	080093d4 	.word	0x080093d4
 80015dc:	080093d8 	.word	0x080093d8

080015e0 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f80c 	bl	8001610 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f004 fe08 	bl	8006218 <HAL_TIM_PWM_Start>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800161c:	edd7 7a00 	vldr	s15, [r7]
 8001620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	d503      	bpl.n	8001632 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	e00a      	b.n	8001648 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8001632:	edd7 7a00 	vldr	s15, [r7]
 8001636:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80016f4 <PWM_WriteDuty+0xe4>
 800163a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	dd01      	ble.n	8001648 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001644:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <PWM_WriteDuty+0xe8>)
 8001646:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001656:	3301      	adds	r3, #1
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001660:	edd7 7a00 	vldr	s15, [r7]
 8001664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001668:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80016f4 <PWM_WriteDuty+0xe4>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <PWM_WriteDuty+0x7e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800168c:	e02c      	b.n	80016e8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b04      	cmp	r3, #4
 8001694:	d105      	bne.n	80016a2 <PWM_WriteDuty+0x92>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80016a0:	e022      	b.n	80016e8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d105      	bne.n	80016b6 <PWM_WriteDuty+0xa6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80016b4:	e018      	b.n	80016e8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d105      	bne.n	80016ca <PWM_WriteDuty+0xba>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016c8:	e00e      	b.n	80016e8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d105      	bne.n	80016de <PWM_WriteDuty+0xce>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80016dc:	e004      	b.n	80016e8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	42c80000 	.word	0x42c80000
 80016f8:	42c80000 	.word	0x42c80000

080016fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001710:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <MX_ADC1_Init+0x9c>)
 8001712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <MX_ADC1_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <MX_ADC1_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_ADC1_Init+0x98>)
 800173c:	4a17      	ldr	r2, [pc, #92]	@ (800179c <MX_ADC1_Init+0xa0>)
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001748:	2201      	movs	r2, #1
 800174a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_ADC1_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_ADC1_Init+0x98>)
 8001756:	2201      	movs	r2, #1
 8001758:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800175a:	480e      	ldr	r0, [pc, #56]	@ (8001794 <MX_ADC1_Init+0x98>)
 800175c:	f001 fa3e 	bl	8002bdc <HAL_ADC_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 fe53 	bl	8002410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800176a:	2304      	movs	r3, #4
 800176c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176e:	2301      	movs	r3, #1
 8001770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	@ (8001794 <MX_ADC1_Init+0x98>)
 800177c:	f001 fba0 	bl	8002ec0 <HAL_ADC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001786:	f000 fe43 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000029c 	.word	0x2000029c
 8001798:	40012000 	.word	0x40012000
 800179c:	0f000001 	.word	0x0f000001

080017a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a31      	ldr	r2, [pc, #196]	@ (8001884 <HAL_ADC_MspInit+0xe4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d15b      	bne.n	800187a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c2:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <HAL_ADC_MspInit+0xe8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a30      	ldr	r2, [pc, #192]	@ (8001888 <HAL_ADC_MspInit+0xe8>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001888 <HAL_ADC_MspInit+0xe8>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b2b      	ldr	r3, [pc, #172]	@ (8001888 <HAL_ADC_MspInit+0xe8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a2a      	ldr	r2, [pc, #168]	@ (8001888 <HAL_ADC_MspInit+0xe8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <HAL_ADC_MspInit+0xe8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_IN1_Pin|POT_1_Pin;
 80017f2:	2312      	movs	r3, #18
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	@ (800188c <HAL_ADC_MspInit+0xec>)
 8001806:	f002 fa43 	bl	8003c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 800180c:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <HAL_ADC_MspInit+0xf4>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001816:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800181c:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001828:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800182a:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 800182c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001830:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001838:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 800183c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001840:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800184e:	4810      	ldr	r0, [pc, #64]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001850:	f001 fea2 	bl	8003598 <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800185a:	f000 fdd9 	bl	8002410 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001862:	639a      	str	r2, [r3, #56]	@ 0x38
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <HAL_ADC_MspInit+0xf0>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2012      	movs	r0, #18
 8001870:	f001 fe5b 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001874:	2012      	movs	r0, #18
 8001876:	f001 fe74 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40012000 	.word	0x40012000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	200002e4 	.word	0x200002e4
 8001894:	40026410 	.word	0x40026410

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_DMA_Init+0x60>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <MX_DMA_Init+0x60>)
 80018a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <MX_DMA_Init+0x60>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <MX_DMA_Init+0x60>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <MX_DMA_Init+0x60>)
 80018bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <MX_DMA_Init+0x60>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	200c      	movs	r0, #12
 80018d4:	f001 fe29 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018d8:	200c      	movs	r0, #12
 80018da:	f001 fe42 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2038      	movs	r0, #56	@ 0x38
 80018e4:	f001 fe21 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018e8:	2038      	movs	r0, #56	@ 0x38
 80018ea:	f001 fe3a 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	@ 0x38
 8001900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4bb5      	ldr	r3, [pc, #724]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4ab4      	ldr	r2, [pc, #720]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4bb2      	ldr	r3, [pc, #712]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	4baf      	ldr	r3, [pc, #700]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4aae      	ldr	r2, [pc, #696]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4bac      	ldr	r3, [pc, #688]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4ba9      	ldr	r3, [pc, #676]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4aa8      	ldr	r2, [pc, #672]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4ba6      	ldr	r3, [pc, #664]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4ba3      	ldr	r3, [pc, #652]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4aa2      	ldr	r2, [pc, #648]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4ba0      	ldr	r3, [pc, #640]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	4b9d      	ldr	r3, [pc, #628]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a9c      	ldr	r2, [pc, #624]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b9a      	ldr	r3, [pc, #616]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800198a:	4b97      	ldr	r3, [pc, #604]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a96      	ldr	r2, [pc, #600]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b94      	ldr	r3, [pc, #592]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a2:	4b91      	ldr	r3, [pc, #580]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a90      	ldr	r2, [pc, #576]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b8e      	ldr	r3, [pc, #568]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ba:	4b8b      	ldr	r3, [pc, #556]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a8a      	ldr	r2, [pc, #552]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 80019c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <MX_GPIO_Init+0x2ec>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LCD_D4_Pin|LD3_Pin|LCD_E_Pin
 80019d2:	2200      	movs	r2, #0
 80019d4:	f24d 0181 	movw	r1, #53377	@ 0xd081
 80019d8:	4884      	ldr	r0, [pc, #528]	@ (8001bec <MX_GPIO_Init+0x2f0>)
 80019da:	f002 fb1d 	bl	8004018 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_D7_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80019e4:	4882      	ldr	r0, [pc, #520]	@ (8001bf0 <MX_GPIO_Init+0x2f4>)
 80019e6:	f002 fb17 	bl	8004018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_1_Pin
 80019ea:	2200      	movs	r2, #0
 80019ec:	f64f 5180 	movw	r1, #64896	@ 0xfd80
 80019f0:	4880      	ldr	r0, [pc, #512]	@ (8001bf4 <MX_GPIO_Init+0x2f8>)
 80019f2:	f002 fb11 	bl	8004018 <HAL_GPIO_WritePin>
                          |DISP_C_Pin|DISP_3_Pin|DISP_B_Pin|DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISP_CLK_Pin|DISP_DIO_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80019fc:	487e      	ldr	r0, [pc, #504]	@ (8001bf8 <MX_GPIO_Init+0x2fc>)
 80019fe:	f002 fb0b 	bl	8004018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f244 2140 	movw	r1, #16960	@ 0x4240
 8001a08:	487c      	ldr	r0, [pc, #496]	@ (8001bfc <MX_GPIO_Init+0x300>)
 8001a0a:	f002 fb05 	bl	8004018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2140      	movs	r1, #64	@ 0x40
 8001a12:	487b      	ldr	r0, [pc, #492]	@ (8001c00 <MX_GPIO_Init+0x304>)
 8001a14:	f002 fb00 	bl	8004018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a1e:	4879      	ldr	r0, [pc, #484]	@ (8001c04 <MX_GPIO_Init+0x308>)
 8001a20:	f002 fafa 	bl	8004018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4871      	ldr	r0, [pc, #452]	@ (8001c00 <MX_GPIO_Init+0x304>)
 8001a3c:	f002 f928 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT1_Btn_Pin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8001a40:	2301      	movs	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	486a      	ldr	r0, [pc, #424]	@ (8001c00 <MX_GPIO_Init+0x304>)
 8001a56:	f002 f91b 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a5a:	2332      	movs	r3, #50	@ 0x32
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a6a:	230b      	movs	r3, #11
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	4862      	ldr	r0, [pc, #392]	@ (8001c00 <MX_GPIO_Init+0x304>)
 8001a76:	f002 f90b 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a8a:	230b      	movs	r3, #11
 8001a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	485b      	ldr	r0, [pc, #364]	@ (8001c04 <MX_GPIO_Init+0x308>)
 8001a96:	f002 f8fb 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LCD_D4_Pin LD3_Pin LCD_E_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LCD_D4_Pin|LD3_Pin|LCD_E_Pin
 8001a9a:	f24d 0381 	movw	r3, #53377	@ 0xd081
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	484e      	ldr	r0, [pc, #312]	@ (8001bec <MX_GPIO_Init+0x2f0>)
 8001ab4:	f002 f8ec 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin DISP_2_Pin DISP_4_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|DISP_2_Pin|DISP_4_Pin;
 8001ab8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4847      	ldr	r0, [pc, #284]	@ (8001bf0 <MX_GPIO_Init+0x2f4>)
 8001ad2:	f002 f8dd 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_E_Pin DISP_F_Pin DISP_D_Pin DISP_C_Pin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin;
 8001ad6:	f44f 53ac 	mov.w	r3, #5504	@ 0x1580
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001adc:	2311      	movs	r3, #17
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	4841      	ldr	r0, [pc, #260]	@ (8001bf4 <MX_GPIO_Init+0x2f8>)
 8001af0:	f002 f8ce 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_1_Pin DISP_3_Pin DISP_A_Pin */
  GPIO_InitStruct.Pin = DISP_1_Pin|DISP_3_Pin|DISP_A_Pin;
 8001af4:	f44f 4328 	mov.w	r3, #43008	@ 0xa800
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4839      	ldr	r0, [pc, #228]	@ (8001bf4 <MX_GPIO_Init+0x2f8>)
 8001b0e:	f002 f8bf 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_B_Pin */
  GPIO_InitStruct.Pin = DISP_B_Pin;
 8001b12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DISP_B_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4832      	ldr	r0, [pc, #200]	@ (8001bf4 <MX_GPIO_Init+0x2f8>)
 8001b2c:	f002 f8b0 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b42:	230b      	movs	r3, #11
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4827      	ldr	r0, [pc, #156]	@ (8001bec <MX_GPIO_Init+0x2f0>)
 8001b4e:	f002 f89f 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CLK_Pin */
  GPIO_InitStruct.Pin = DISP_CLK_Pin;
 8001b52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b58:	2311      	movs	r3, #17
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DISP_CLK_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4823      	ldr	r0, [pc, #140]	@ (8001bf8 <MX_GPIO_Init+0x2fc>)
 8001b6c:	f002 f890 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_DIO_Pin */
  GPIO_InitStruct.Pin = DISP_DIO_Pin;
 8001b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b76:	2311      	movs	r3, #17
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DISP_DIO_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	481b      	ldr	r0, [pc, #108]	@ (8001bf8 <MX_GPIO_Init+0x2fc>)
 8001b8a:	f002 f881 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin;
 8001b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4814      	ldr	r0, [pc, #80]	@ (8001bf8 <MX_GPIO_Init+0x2fc>)
 8001ba8:	f002 f872 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bac:	2340      	movs	r3, #64	@ 0x40
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480e      	ldr	r0, [pc, #56]	@ (8001bfc <MX_GPIO_Init+0x300>)
 8001bc4:	f002 f864 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <MX_GPIO_Init+0x300>)
 8001bdc:	f002 f858 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001be0:	2340      	movs	r3, #64	@ 0x40
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be4:	e010      	b.n	8001c08 <MX_GPIO_Init+0x30c>
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4830      	ldr	r0, [pc, #192]	@ (8001cdc <MX_GPIO_Init+0x3e0>)
 8001c1c:	f002 f838 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c20:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c32:	230a      	movs	r3, #10
 8001c34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4828      	ldr	r0, [pc, #160]	@ (8001ce0 <MX_GPIO_Init+0x3e4>)
 8001c3e:	f002 f827 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c54:	4619      	mov	r1, r3
 8001c56:	4822      	ldr	r0, [pc, #136]	@ (8001ce0 <MX_GPIO_Init+0x3e4>)
 8001c58:	f002 f81a 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin;
 8001c5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	481a      	ldr	r0, [pc, #104]	@ (8001ce0 <MX_GPIO_Init+0x3e4>)
 8001c76:	f002 f80b 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT2_Btn_Pin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <MX_GPIO_Init+0x3e8>)
 8001c90:	f001 fffe 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_G_Pin DISP_H_Pin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 8001c94:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c9a:	2311      	movs	r3, #17
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <MX_GPIO_Init+0x3ec>)
 8001cae:	f001 ffef 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001cb2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc4:	230b      	movs	r3, #11
 8001cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_GPIO_Init+0x3ec>)
 8001cd0:	f001 ffde 	bl	8003c90 <HAL_GPIO_Init>

}
 8001cd4:	bf00      	nop
 8001cd6:	3738      	adds	r7, #56	@ 0x38
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021800 	.word	0x40021800

08001cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d64 <MX_I2C1_Init+0x78>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <MX_I2C1_Init+0x7c>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d26:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d28:	f002 f9aa 	bl	8004080 <HAL_I2C_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d32:	f000 fb6d 	bl	8002410 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	4809      	ldr	r0, [pc, #36]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d3a:	f002 fef1 	bl	8004b20 <HAL_I2CEx_ConfigAnalogFilter>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d44:	f000 fb64 	bl	8002410 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_I2C1_Init+0x74>)
 8001d4c:	f002 ff33 	bl	8004bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d56:	f000 fb5b 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000344 	.word	0x20000344
 8001d64:	40005400 	.word	0x40005400
 8001d68:	20404768 	.word	0x20404768

08001d6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0aa      	sub	sp, #168	@ 0xa8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	2284      	movs	r2, #132	@ 0x84
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f006 fe6f 	bl	8008a70 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d13c      	bne.n	8001e16 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001da0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fc7a 	bl	80056a4 <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001db6:	f000 fb2b 	bl	8002410 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8001dd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dec:	2304      	movs	r3, #4
 8001dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001df6:	4619      	mov	r1, r3
 8001df8:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <HAL_I2C_MspInit+0xbc>)
 8001dfa:	f001 ff49 	bl	8003c90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e16:	bf00      	nop
 8001e18:	37a8      	adds	r7, #168	@ 0xa8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400

08001e2c <HAL_TIM_PeriodElapsedCallback>:
*/
volatile uint8_t timer_flag = 0;

// Modify the callback to set the flag
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if (htim == &htim7)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d102      	bne.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    // Set the flag to indicate that the timer has elapsed
    timer_flag = 1;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000041c 	.word	0x2000041c
 8001e54:	200003c9 	.word	0x200003c9

08001e58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0d      	ldr	r2, [pc, #52]	@ (8001e98 <HAL_UART_RxCpltCallback+0x40>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d112      	bne.n	8001e8e <HAL_UART_RxCpltCallback+0x36>
  {
    aim = strtol((char*)tx_buffer, 0, 10);
 8001e68:	220a      	movs	r2, #10
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <HAL_UART_RxCpltCallback+0x44>)
 8001e6e:	f006 fdb5 	bl	80089dc <strtol>
 8001e72:	ee07 0a90 	vmov	s15, r0
 8001e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_UART_RxCpltCallback+0x48>)
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
    // SERIAL PORT CONTROL
    HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 8001e80:	2304      	movs	r3, #4
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4905      	ldr	r1, [pc, #20]	@ (8001e9c <HAL_UART_RxCpltCallback+0x44>)
 8001e88:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <HAL_UART_RxCpltCallback+0x40>)
 8001e8a:	f005 fb1a 	bl	80074c2 <HAL_UART_Receive_IT>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200004b4 	.word	0x200004b4
 8001e9c:	20000398 	.word	0x20000398
 8001ea0:	200003bc 	.word	0x200003bc

08001ea4 <displayDigitalOnSerialPort>:

void displayDigitalOnSerialPort(void)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b0a7      	sub	sp, #156	@ 0x9c
 8001ea8:	af04      	add	r7, sp, #16
  uint8_t tx_buffer[128];
  int tx_msg_len = sprintf((char *)tx_buffer, "Reference_Lux = %u,        ILLuminance = %5u.%03u,        PWM = %u,        LED_Output = %u\r",
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <displayDigitalOnSerialPort+0x80>)
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <displayDigitalOnSerialPort+0x84>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <displayDigitalOnSerialPort+0x88>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0999      	lsrs	r1, r3, #6
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <displayDigitalOnSerialPort+0x84>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <displayDigitalOnSerialPort+0x88>)
 8001ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eca:	099b      	lsrs	r3, r3, #6
 8001ecc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed0:	fb00 f303 	mul.w	r3, r0, r3
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4a16      	ldr	r2, [pc, #88]	@ (8001f30 <displayDigitalOnSerialPort+0x8c>)
 8001ed8:	edd2 7a00 	vldr	s15, [r2]
 8001edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee0:	ee17 4a90 	vmov	r4, s15
 8001ee4:	4a13      	ldr	r2, [pc, #76]	@ (8001f34 <displayDigitalOnSerialPort+0x90>)
 8001ee6:	edd2 7a00 	vldr	s15, [r2]
 8001eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eee:	ee17 2a90 	vmov	r2, s15
 8001ef2:	1d38      	adds	r0, r7, #4
 8001ef4:	9202      	str	r2, [sp, #8]
 8001ef6:	9401      	str	r4, [sp, #4]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	460b      	mov	r3, r1
 8001efc:	ee17 2a10 	vmov	r2, s14
 8001f00:	490d      	ldr	r1, [pc, #52]	@ (8001f38 <displayDigitalOnSerialPort+0x94>)
 8001f02:	f006 fd75 	bl	80089f0 <siprintf>
 8001f06:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      (int)aim, Illuminance_lux_Int / 1000, Illuminance_lux_Int % 1000, (unsigned int)duty_cycle, (unsigned int)lux_out);
  HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8001f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	1d39      	adds	r1, r7, #4
 8001f12:	2364      	movs	r3, #100	@ 0x64
 8001f14:	4809      	ldr	r0, [pc, #36]	@ (8001f3c <displayDigitalOnSerialPort+0x98>)
 8001f16:	f005 fa4b 	bl	80073b0 <HAL_UART_Transmit>

}
 8001f1a:	bf00      	nop
 8001f1c:	378c      	adds	r7, #140	@ 0x8c
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200003bc 	.word	0x200003bc
 8001f28:	200003a0 	.word	0x200003a0
 8001f2c:	10624dd3 	.word	0x10624dd3
 8001f30:	200003b4 	.word	0x200003b4
 8001f34:	200003a8 	.word	0x200003a8
 8001f38:	080093dc 	.word	0x080093dc
 8001f3c:	200004b4 	.word	0x200004b4

08001f40 <displayModeSelection>:
  int tx_msg_len = sprintf((char *)tx_buffer, "Pot_Value = %u,        ILLuminance = %5u.%03u,        PWM = %u,        LED_Output = %u\r",
      (unsigned int)pot_out, Illuminance_lux_Int / 1000, Illuminance_lux_Int % 1000, (unsigned int)duty_cycle, (unsigned int)lux_out);
  HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);

}
void displayModeSelection(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0a2      	sub	sp, #136	@ 0x88
 8001f44:	af00      	add	r7, sp, #0
    uint8_t tx_buffer[128];
    int tx_msg_len = sprintf((char *)tx_buffer, "Which mode do you want?A. Potentialmeter? Or B. Terminal?\r\n");
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4908      	ldr	r1, [pc, #32]	@ (8001f6c <displayModeSelection+0x2c>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 fd50 	bl	80089f0 <siprintf>
 8001f50:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8001f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	1d39      	adds	r1, r7, #4
 8001f5c:	2364      	movs	r3, #100	@ 0x64
 8001f5e:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <displayModeSelection+0x30>)
 8001f60:	f005 fa26 	bl	80073b0 <HAL_UART_Transmit>
}
 8001f64:	bf00      	nop
 8001f66:	3788      	adds	r7, #136	@ 0x88
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	08009490 	.word	0x08009490
 8001f70:	200004b4 	.word	0x200004b4

08001f74 <displayOnLCD>:

void displayOnLCD(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  LCD_DIO_SetCursor(&hlcd1, 1, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4816      	ldr	r0, [pc, #88]	@ (8001fd8 <displayOnLCD+0x64>)
 8001f7e:	f7ff f9a7 	bl	80012d0 <LCD_DIO_SetCursor>
  LCD_DIO_printStr(&hlcd1, "Lux: ");
 8001f82:	4916      	ldr	r1, [pc, #88]	@ (8001fdc <displayOnLCD+0x68>)
 8001f84:	4814      	ldr	r0, [pc, #80]	@ (8001fd8 <displayOnLCD+0x64>)
 8001f86:	f7ff f983 	bl	8001290 <LCD_DIO_printStr>
  LCD_DIO_printDecInt(&hlcd1, Illuminance_lux_Int / 1000);
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <displayOnLCD+0x6c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <displayOnLCD+0x70>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	4619      	mov	r1, r3
 8001f98:	480f      	ldr	r0, [pc, #60]	@ (8001fd8 <displayOnLCD+0x64>)
 8001f9a:	f7ff f961 	bl	8001260 <LCD_DIO_printDecInt>
  LCD_DIO_printStr(&hlcd1, ".");
 8001f9e:	4912      	ldr	r1, [pc, #72]	@ (8001fe8 <displayOnLCD+0x74>)
 8001fa0:	480d      	ldr	r0, [pc, #52]	@ (8001fd8 <displayOnLCD+0x64>)
 8001fa2:	f7ff f975 	bl	8001290 <LCD_DIO_printStr>
  LCD_DIO_printDecInt(&hlcd1, Illuminance_lux_Int % 1000);
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <displayOnLCD+0x6c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <displayOnLCD+0x70>)
 8001fac:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	@ (8001fd8 <displayOnLCD+0x64>)
 8001fc0:	f7ff f94e 	bl	8001260 <LCD_DIO_printDecInt>
  DISP_TM1637_printDecUInt(&hdisp2, Illuminance_lux_Int);
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <displayOnLCD+0x6c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4807      	ldr	r0, [pc, #28]	@ (8001fec <displayOnLCD+0x78>)
 8001fce:	f7fe ffa7 	bl	8000f20 <DISP_TM1637_printDecUInt>
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000068 	.word	0x20000068
 8001fdc:	080094cc 	.word	0x080094cc
 8001fe0:	200003a0 	.word	0x200003a0
 8001fe4:	10624dd3 	.word	0x10624dd3
 8001fe8:	080094d4 	.word	0x080094d4
 8001fec:	20000034 	.word	0x20000034

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f000 fd70 	bl	8002ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 f99b 	bl	8002334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffe:	f7ff fc7d 	bl	80018fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002002:	f7ff fc49 	bl	8001898 <MX_DMA_Init>
  MX_I2C1_Init();
 8002006:	f7ff fe71 	bl	8001cec <MX_I2C1_Init>
  MX_TIM9_Init();
 800200a:	f000 fb65 	bl	80026d8 <MX_TIM9_Init>
  MX_TIM7_Init();
 800200e:	f000 fb2b 	bl	8002668 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8002012:	f000 fc6f 	bl	80028f4 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002016:	f000 fad9 	bl	80025cc <MX_TIM5_Init>
  MX_ADC1_Init();
 800201a:	f7ff fb6f 	bl	80016fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hbh1750);
 800201e:	48a4      	ldr	r0, [pc, #656]	@ (80022b0 <main+0x2c0>)
 8002020:	f7fe fdfc 	bl	8000c1c <BH1750_Init>
  LED_PWM_Init(&hld1);
 8002024:	48a3      	ldr	r0, [pc, #652]	@ (80022b4 <main+0x2c4>)
 8002026:	f7ff f9a9 	bl	800137c <LED_PWM_Init>
  HAL_UART_Receive_IT(&huart3, tx_buffer, tx_msg_len);
 800202a:	2304      	movs	r3, #4
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	49a1      	ldr	r1, [pc, #644]	@ (80022b8 <main+0x2c8>)
 8002032:	48a2      	ldr	r0, [pc, #648]	@ (80022bc <main+0x2cc>)
 8002034:	f005 fa45 	bl	80074c2 <HAL_UART_Receive_IT>

  LCD_DIO_Init(&hlcd1);
 8002038:	48a1      	ldr	r0, [pc, #644]	@ (80022c0 <main+0x2d0>)
 800203a:	f7ff f8aa 	bl	8001192 <LCD_DIO_Init>
  LCD_DIO_printStr(&hlcd1, "Light_Intensity");
 800203e:	49a1      	ldr	r1, [pc, #644]	@ (80022c4 <main+0x2d4>)
 8002040:	489f      	ldr	r0, [pc, #636]	@ (80022c0 <main+0x2d0>)
 8002042:	f7ff f925 	bl	8001290 <LCD_DIO_printStr>
  DISP_TM1637_SetBrightness(&hdisp2, 2);
 8002046:	2102      	movs	r1, #2
 8002048:	489f      	ldr	r0, [pc, #636]	@ (80022c8 <main+0x2d8>)
 800204a:	f7fe ffd5 	bl	8000ff8 <DISP_TM1637_SetBrightness>

  MENU_Init(&hmenu);
 800204e:	489f      	ldr	r0, [pc, #636]	@ (80022cc <main+0x2dc>)
 8002050:	f7ff fa68 	bl	8001524 <MENU_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8002054:	489e      	ldr	r0, [pc, #632]	@ (80022d0 <main+0x2e0>)
 8002056:	f004 f805 	bl	8006064 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Check if the user wants to switch input mode
    if (BTN_DIO_EdgeDetected(&husrbtn) == BTN_PRESSED_EDGE) {
 800205a:	489e      	ldr	r0, [pc, #632]	@ (80022d4 <main+0x2e4>)
 800205c:	f7fe fe48 	bl	8000cf0 <BTN_DIO_EdgeDetected>
 8002060:	4603      	mov	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	d110      	bne.n	8002088 <main+0x98>
        // Toggle input mode
        inputMode = (inputMode == SERIAL_MODE) ? ANALOG_MODE : SERIAL_MODE;
 8002066:	4b9c      	ldr	r3, [pc, #624]	@ (80022d8 <main+0x2e8>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	4b98      	ldr	r3, [pc, #608]	@ (80022d8 <main+0x2e8>)
 8002078:	701a      	strb	r2, [r3, #0]

        // Wait for button release to avoid repeated mode changes
        while (BTN_DIO_Read(&husrbtn) == BTN_PRESSED);
 800207a:	bf00      	nop
 800207c:	4895      	ldr	r0, [pc, #596]	@ (80022d4 <main+0x2e4>)
 800207e:	f7fe fe1f 	bl	8000cc0 <BTN_DIO_Read>
 8002082:	4603      	mov	r3, r0
 8002084:	2b01      	cmp	r3, #1
 8002086:	d0f9      	beq.n	800207c <main+0x8c>
    }
    if(BTN_DIO_EdgeDetected(&hbtn2) == BTN_PRESSED_EDGE && hmenu.Item->Next != NULL)
 8002088:	4894      	ldr	r0, [pc, #592]	@ (80022dc <main+0x2ec>)
 800208a:	f7fe fe31 	bl	8000cf0 <BTN_DIO_EdgeDetected>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10c      	bne.n	80020ae <main+0xbe>
 8002094:	4b8d      	ldr	r3, [pc, #564]	@ (80022cc <main+0x2dc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <main+0xbe>
    {
      hmenu.Item = hmenu.Item->Next;
 800209e:	4b8b      	ldr	r3, [pc, #556]	@ (80022cc <main+0x2dc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	4a89      	ldr	r2, [pc, #548]	@ (80022cc <main+0x2dc>)
 80020a6:	6013      	str	r3, [r2, #0]
      hmenu.ItemChanged = 1;
 80020a8:	4b88      	ldr	r3, [pc, #544]	@ (80022cc <main+0x2dc>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	711a      	strb	r2, [r3, #4]
    }
    if(BTN_DIO_EdgeDetected(&hbtn1) == BTN_PRESSED_EDGE && hmenu.Item->Prev != NULL)
 80020ae:	488c      	ldr	r0, [pc, #560]	@ (80022e0 <main+0x2f0>)
 80020b0:	f7fe fe1e 	bl	8000cf0 <BTN_DIO_EdgeDetected>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10c      	bne.n	80020d4 <main+0xe4>
 80020ba:	4b84      	ldr	r3, [pc, #528]	@ (80022cc <main+0x2dc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <main+0xe4>
    {
      hmenu.Item = hmenu.Item->Prev;
 80020c4:	4b81      	ldr	r3, [pc, #516]	@ (80022cc <main+0x2dc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	4a80      	ldr	r2, [pc, #512]	@ (80022cc <main+0x2dc>)
 80020cc:	6013      	str	r3, [r2, #0]
      hmenu.ItemChanged = 1;
 80020ce:	4b7f      	ldr	r3, [pc, #508]	@ (80022cc <main+0x2dc>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	711a      	strb	r2, [r3, #4]
    }

    // Perform initialization only once
    if (!init_done)
 80020d4:	4b83      	ldr	r3, [pc, #524]	@ (80022e4 <main+0x2f4>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d127      	bne.n	8002134 <main+0x144>
      {
          displayModeSelection();
 80020e4:	f7ff ff2c 	bl	8001f40 <displayModeSelection>
          // Set duty cycle to 0 and record min_lux
          LED_PWM_WriteDuty(&hld1, 0);
 80020e8:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80022e8 <main+0x2f8>
 80020ec:	4871      	ldr	r0, [pc, #452]	@ (80022b4 <main+0x2c4>)
 80020ee:	f7ff f965 	bl	80013bc <LED_PWM_WriteDuty>
          HAL_Delay(1000);  // Adjust the delay as needed
 80020f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f6:	f000 fd4d 	bl	8002b94 <HAL_Delay>
          min_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 80020fa:	486d      	ldr	r0, [pc, #436]	@ (80022b0 <main+0x2c0>)
 80020fc:	f7fe fdb4 	bl	8000c68 <BH1750_ReadIlluminance_lux>
 8002100:	eef0 7a40 	vmov.f32	s15, s0
 8002104:	4b79      	ldr	r3, [pc, #484]	@ (80022ec <main+0x2fc>)
 8002106:	edc3 7a00 	vstr	s15, [r3]

          // Set duty cycle to 100 and record max_lux
          LED_PWM_WriteDuty(&hld1, 100);
 800210a:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80022f0 <main+0x300>
 800210e:	4869      	ldr	r0, [pc, #420]	@ (80022b4 <main+0x2c4>)
 8002110:	f7ff f954 	bl	80013bc <LED_PWM_WriteDuty>
          HAL_Delay(1000);  // Adjust the delay as needed
 8002114:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002118:	f000 fd3c 	bl	8002b94 <HAL_Delay>
          max_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 800211c:	4864      	ldr	r0, [pc, #400]	@ (80022b0 <main+0x2c0>)
 800211e:	f7fe fda3 	bl	8000c68 <BH1750_ReadIlluminance_lux>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
 8002126:	4b73      	ldr	r3, [pc, #460]	@ (80022f4 <main+0x304>)
 8002128:	edc3 7a00 	vstr	s15, [r3]

          init_done = 1;
 800212c:	4b6d      	ldr	r3, [pc, #436]	@ (80022e4 <main+0x2f4>)
 800212e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002132:	601a      	str	r2, [r3, #0]
      }
    // Read illuminance value
    Illuminance_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 8002134:	485e      	ldr	r0, [pc, #376]	@ (80022b0 <main+0x2c0>)
 8002136:	f7fe fd97 	bl	8000c68 <BH1750_ReadIlluminance_lux>
 800213a:	eef0 7a40 	vmov.f32	s15, s0
 800213e:	4b6e      	ldr	r3, [pc, #440]	@ (80022f8 <main+0x308>)
 8002140:	edc3 7a00 	vstr	s15, [r3]
    Illuminance_lux_Int = Illuminance_lux * 1000.0f;
 8002144:	4b6c      	ldr	r3, [pc, #432]	@ (80022f8 <main+0x308>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80022fc <main+0x30c>
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002156:	ee17 2a90 	vmov	r2, s15
 800215a:	4b69      	ldr	r3, [pc, #420]	@ (8002300 <main+0x310>)
 800215c:	601a      	str	r2, [r3, #0]

    LED_DIO_Write(&hldg1, Illuminance_lux_Int > 600000.0f);
 800215e:	4b68      	ldr	r3, [pc, #416]	@ (8002300 <main+0x310>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002304 <main+0x314>
 800216e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	bfcc      	ite	gt
 8002178:	2301      	movgt	r3, #1
 800217a:	2300      	movle	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	4861      	ldr	r0, [pc, #388]	@ (8002308 <main+0x318>)
 8002182:	f7ff f8db 	bl	800133c <LED_DIO_Write>
    LED_DIO_Write(&hldb1, Illuminance_lux_Int > 1000000.0f);
 8002186:	4b5e      	ldr	r3, [pc, #376]	@ (8002300 <main+0x310>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800230c <main+0x31c>
 8002196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	bfcc      	ite	gt
 80021a0:	2301      	movgt	r3, #1
 80021a2:	2300      	movle	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	4859      	ldr	r0, [pc, #356]	@ (8002310 <main+0x320>)
 80021aa:	f7ff f8c7 	bl	800133c <LED_DIO_Write>
    LED_DIO_Write(&hldr1, Illuminance_lux_Int > 1500000.0f);
 80021ae:	4b54      	ldr	r3, [pc, #336]	@ (8002300 <main+0x310>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ba:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002314 <main+0x324>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	bfcc      	ite	gt
 80021c8:	2301      	movgt	r3, #1
 80021ca:	2300      	movle	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	4851      	ldr	r0, [pc, #324]	@ (8002318 <main+0x328>)
 80021d2:	f7ff f8b3 	bl	800133c <LED_DIO_Write>
//        error = pot_out - Illuminance_lux;
 //     displayAnalogueOnSerialPort();
    }

//    error = 0.05 * (max_lux - min_lux);     //5% of control range
    error = aim - Illuminance_lux;  //Digital calculate
 80021d6:	4b51      	ldr	r3, [pc, #324]	@ (800231c <main+0x32c>)
 80021d8:	ed93 7a00 	vldr	s14, [r3]
 80021dc:	4b46      	ldr	r3, [pc, #280]	@ (80022f8 <main+0x308>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <main+0x330>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]
//    error = pot_out - Illuminance_lux;      //Analogue calculate
    integral += error;
 80021ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002324 <main+0x334>)
 80021ee:	ed93 7a00 	vldr	s14, [r3]
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <main+0x330>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	4b49      	ldr	r3, [pc, #292]	@ (8002324 <main+0x334>)
 80021fe:	edc3 7a00 	vstr	s15, [r3]
    duty_cycle = Ki * integral;
 8002202:	4b49      	ldr	r3, [pc, #292]	@ (8002328 <main+0x338>)
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	4b46      	ldr	r3, [pc, #280]	@ (8002324 <main+0x334>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	4b46      	ldr	r3, [pc, #280]	@ (800232c <main+0x33c>)
 8002214:	edc3 7a00 	vstr	s15, [r3]
    lux_out = min_lux + (duty_cycle * 0.01 * (max_lux - min_lux)); //led out lux
 8002218:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <main+0x2fc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fadd 	bl	80007dc <__aeabi_f2d>
 8002222:	4604      	mov	r4, r0
 8002224:	460d      	mov	r5, r1
 8002226:	4b41      	ldr	r3, [pc, #260]	@ (800232c <main+0x33c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fad6 	bl	80007dc <__aeabi_f2d>
 8002230:	a31d      	add	r3, pc, #116	@ (adr r3, 80022a8 <main+0x2b8>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f7fe f843 	bl	80002c0 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4690      	mov	r8, r2
 8002240:	4699      	mov	r9, r3
 8002242:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <main+0x304>)
 8002244:	ed93 7a00 	vldr	s14, [r3]
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <main+0x2fc>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002252:	ee17 0a90 	vmov	r0, s15
 8002256:	f7fe fac1 	bl	80007dc <__aeabi_f2d>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4640      	mov	r0, r8
 8002260:	4649      	mov	r1, r9
 8002262:	f7fe f82d 	bl	80002c0 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4620      	mov	r0, r4
 800226c:	4629      	mov	r1, r5
 800226e:	f7fe f957 	bl	8000520 <__adddf3>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	f7fe fb07 	bl	800088c <__aeabi_d2f>
 800227e:	4603      	mov	r3, r0
 8002280:	4a2b      	ldr	r2, [pc, #172]	@ (8002330 <main+0x340>)
 8002282:	6013      	str	r3, [r2, #0]
    LED_PWM_WriteDuty(&hld1, duty_cycle);
 8002284:	4b29      	ldr	r3, [pc, #164]	@ (800232c <main+0x33c>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eeb0 0a67 	vmov.f32	s0, s15
 800228e:	4809      	ldr	r0, [pc, #36]	@ (80022b4 <main+0x2c4>)
 8002290:	f7ff f894 	bl	80013bc <LED_PWM_WriteDuty>

//    MENU_ROUTINE(&hmenu);
    displayDigitalOnSerialPort();
 8002294:	f7ff fe06 	bl	8001ea4 <displayDigitalOnSerialPort>
//    displayAnalogueOnSerialPort();
    displayOnLCD();
 8002298:	f7ff fe6c 	bl	8001f74 <displayOnLCD>
    HAL_Delay(1000);
 800229c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022a0:	f000 fc78 	bl	8002b94 <HAL_Delay>
    if (BTN_DIO_EdgeDetected(&husrbtn) == BTN_PRESSED_EDGE) {
 80022a4:	e6d9      	b.n	800205a <main+0x6a>
 80022a6:	bf00      	nop
 80022a8:	47ae147b 	.word	0x47ae147b
 80022ac:	3f847ae1 	.word	0x3f847ae1
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000088 	.word	0x20000088
 80022b8:	20000398 	.word	0x20000398
 80022bc:	200004b4 	.word	0x200004b4
 80022c0:	20000068 	.word	0x20000068
 80022c4:	080094d8 	.word	0x080094d8
 80022c8:	20000034 	.word	0x20000034
 80022cc:	200000bc 	.word	0x200000bc
 80022d0:	2000041c 	.word	0x2000041c
 80022d4:	20000010 	.word	0x20000010
 80022d8:	200003c8 	.word	0x200003c8
 80022dc:	20000028 	.word	0x20000028
 80022e0:	2000001c 	.word	0x2000001c
 80022e4:	200003b0 	.word	0x200003b0
 80022e8:	00000000 	.word	0x00000000
 80022ec:	200003c4 	.word	0x200003c4
 80022f0:	42c80000 	.word	0x42c80000
 80022f4:	200003c0 	.word	0x200003c0
 80022f8:	200003a4 	.word	0x200003a4
 80022fc:	447a0000 	.word	0x447a0000
 8002300:	200003a0 	.word	0x200003a0
 8002304:	49127c00 	.word	0x49127c00
 8002308:	20000098 	.word	0x20000098
 800230c:	49742400 	.word	0x49742400
 8002310:	200000a4 	.word	0x200000a4
 8002314:	49b71b00 	.word	0x49b71b00
 8002318:	200000b0 	.word	0x200000b0
 800231c:	200003bc 	.word	0x200003bc
 8002320:	200003b8 	.word	0x200003b8
 8002324:	200003ac 	.word	0x200003ac
 8002328:	20000220 	.word	0x20000220
 800232c:	200003b4 	.word	0x200003b4
 8002330:	200003a8 	.word	0x200003a8

08002334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b094      	sub	sp, #80	@ 0x50
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 0320 	add.w	r3, r7, #32
 800233e:	2230      	movs	r2, #48	@ 0x30
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f006 fb94 	bl	8008a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002358:	f002 fc7a 	bl	8004c50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <SystemClock_Config+0xd4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	4a29      	ldr	r2, [pc, #164]	@ (8002408 <SystemClock_Config+0xd4>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002366:	6413      	str	r3, [r2, #64]	@ 0x40
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <SystemClock_Config+0xd4>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <SystemClock_Config+0xd8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a24      	ldr	r2, [pc, #144]	@ (800240c <SystemClock_Config+0xd8>)
 800237a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <SystemClock_Config+0xd8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800238c:	2301      	movs	r3, #1
 800238e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002390:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002396:	2302      	movs	r3, #2
 8002398:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800239e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023a0:	2304      	movs	r3, #4
 80023a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80023a4:	23d8      	movs	r3, #216	@ 0xd8
 80023a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80023ac:	2303      	movs	r3, #3
 80023ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fcab 	bl	8004d10 <HAL_RCC_OscConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80023c0:	f000 f826 	bl	8002410 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023c4:	f002 fc54 	bl	8004c70 <HAL_PWREx_EnableOverDrive>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023ce:	f000 f81f 	bl	8002410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d2:	230f      	movs	r3, #15
 80023d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80023e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	2107      	movs	r1, #7
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 ff31 	bl	8005258 <HAL_RCC_ClockConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80023fc:	f000 f808 	bl	8002410 <Error_Handler>
  }
}
 8002400:	bf00      	nop
 8002402:	3750      	adds	r7, #80	@ 0x50
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000

08002410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002414:	b672      	cpsid	i
}
 8002416:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // Blink an LED to indicate an error
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002418:	2101      	movs	r1, #1
 800241a:	4804      	ldr	r0, [pc, #16]	@ (800242c <Error_Handler+0x1c>)
 800241c:	f001 fe15 	bl	800404a <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8002420:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002424:	f000 fbb6 	bl	8002b94 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002428:	bf00      	nop
 800242a:	e7f5      	b.n	8002418 <Error_Handler+0x8>
 800242c:	40020400 	.word	0x40020400

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_MspInit+0x44>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a0e      	ldr	r2, [pc, #56]	@ (8002474 <HAL_MspInit+0x44>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_MspInit+0x44>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_MspInit+0x44>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	4a08      	ldr	r2, [pc, #32]	@ (8002474 <HAL_MspInit+0x44>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002458:	6453      	str	r3, [r2, #68]	@ 0x44
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_MspInit+0x44>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <NMI_Handler+0x4>

08002480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <MemManage_Handler+0x4>

08002490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <UsageFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ce:	f000 fb41 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024dc:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <DMA1_Stream1_IRQHandler+0x10>)
 80024de:	f001 f99b 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000053c 	.word	0x2000053c

080024ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <ADC_IRQHandler+0x10>)
 80024f2:	f000 fbb7 	bl	8002c64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000029c 	.word	0x2000029c

08002500 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <USART3_IRQHandler+0x10>)
 8002506:	f005 f821 	bl	800754c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200004b4 	.word	0x200004b4

08002514 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <TIM7_IRQHandler+0x10>)
 800251a:	f003 ff77 	bl	800640c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000041c 	.word	0x2000041c

08002528 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <DMA2_Stream0_IRQHandler+0x10>)
 800252e:	f001 f973 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200002e4 	.word	0x200002e4

0800253c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002544:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <_sbrk+0x5c>)
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <_sbrk+0x60>)
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002550:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <_sbrk+0x64>)
 800255a:	4a12      	ldr	r2, [pc, #72]	@ (80025a4 <_sbrk+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255e:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d207      	bcs.n	800257c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800256c:	f006 fa88 	bl	8008a80 <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	220c      	movs	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e009      	b.n	8002590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <_sbrk+0x64>)
 800258c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20050000 	.word	0x20050000
 800259c:	00000400 	.word	0x00000400
 80025a0:	200003cc 	.word	0x200003cc
 80025a4:	200006e8 	.word	0x200006e8

080025a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <SystemInit+0x20>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <SystemInit+0x20>)
 80025b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <MX_TIM5_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <MX_TIM5_Init+0x94>)
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <MX_TIM5_Init+0x98>)
 80025ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <MX_TIM5_Init+0x94>)
 80025f2:	226b      	movs	r2, #107	@ 0x6b
 80025f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <MX_TIM5_Init+0x94>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <MX_TIM5_Init+0x94>)
 80025fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002602:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002604:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <MX_TIM5_Init+0x94>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <MX_TIM5_Init+0x94>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002610:	4813      	ldr	r0, [pc, #76]	@ (8002660 <MX_TIM5_Init+0x94>)
 8002612:	f003 fc37 	bl	8005e84 <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800261c:	f7ff fef8 	bl	8002410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002624:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002626:	f107 0310 	add.w	r3, r7, #16
 800262a:	4619      	mov	r1, r3
 800262c:	480c      	ldr	r0, [pc, #48]	@ (8002660 <MX_TIM5_Init+0x94>)
 800262e:	f004 f909 	bl	8006844 <HAL_TIM_ConfigClockSource>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002638:	f7ff feea 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_TIM5_Init+0x94>)
 800264a:	f004 fdb7 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002654:	f7ff fedc 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200003d0 	.word	0x200003d0
 8002664:	40000c00 	.word	0x40000c00

08002668 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <MX_TIM7_Init+0x68>)
 800267a:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <MX_TIM7_Init+0x6c>)
 800267c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1079;
 800267e:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <MX_TIM7_Init+0x68>)
 8002680:	f240 4237 	movw	r2, #1079	@ 0x437
 8002684:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <MX_TIM7_Init+0x68>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 800268c:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <MX_TIM7_Init+0x68>)
 800268e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002692:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <MX_TIM7_Init+0x68>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800269a:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <MX_TIM7_Init+0x68>)
 800269c:	f003 fbf2 	bl	8005e84 <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80026a6:	f7ff feb3 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	@ (80026d0 <MX_TIM7_Init+0x68>)
 80026b8:	f004 fd80 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80026c2:	f7ff fea5 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000041c 	.word	0x2000041c
 80026d4:	40001400 	.word	0x40001400

080026d8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	@ 0x30
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026de:	f107 0320 	add.w	r3, r7, #32
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80026fe:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002700:	4a25      	ldr	r2, [pc, #148]	@ (8002798 <MX_TIM9_Init+0xc0>)
 8002702:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8002704:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002706:	226b      	movs	r2, #107	@ 0x6b
 8002708:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <MX_TIM9_Init+0xbc>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002712:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002716:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002718:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <MX_TIM9_Init+0xbc>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271e:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002724:	481b      	ldr	r0, [pc, #108]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002726:	f003 fbad 	bl	8005e84 <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002730:	f7ff fe6e 	bl	8002410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002738:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	4619      	mov	r1, r3
 8002740:	4814      	ldr	r0, [pc, #80]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002742:	f004 f87f 	bl	8006844 <HAL_TIM_ConfigClockSource>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800274c:	f7ff fe60 	bl	8002410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002750:	4810      	ldr	r0, [pc, #64]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002752:	f003 fcff 	bl	8006154 <HAL_TIM_PWM_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800275c:	f7ff fe58 	bl	8002410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002760:	2360      	movs	r3, #96	@ 0x60
 8002762:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2204      	movs	r2, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002778:	f003 ff50 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002782:	f7ff fe45 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002786:	4803      	ldr	r0, [pc, #12]	@ (8002794 <MX_TIM9_Init+0xbc>)
 8002788:	f000 f87c 	bl	8002884 <HAL_TIM_MspPostInit>

}
 800278c:	bf00      	nop
 800278e:	3730      	adds	r7, #48	@ 0x30
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000468 	.word	0x20000468
 8002798:	40014000 	.word	0x40014000

0800279c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	@ 0x30
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_TIM_Base_MspInit+0xd4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d128      	bne.n	8002810 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027be:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a26      	ldr	r2, [pc, #152]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = LD4_Pin;
 80027ee:	2304      	movs	r3, #4
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027fe:	2302      	movs	r3, #2
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	481b      	ldr	r0, [pc, #108]	@ (8002878 <HAL_TIM_Base_MspInit+0xdc>)
 800280a:	f001 fa41 	bl	8003c90 <HAL_GPIO_Init>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800280e:	e02a      	b.n	8002866 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM7)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <HAL_TIM_Base_MspInit+0xe0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d114      	bne.n	8002844 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 8002820:	f043 0320 	orr.w	r3, r3, #32
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	2037      	movs	r0, #55	@ 0x37
 8002838:	f000 fe77 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800283c:	2037      	movs	r0, #55	@ 0x37
 800283e:	f000 fe90 	bl	8003562 <HAL_NVIC_EnableIRQ>
}
 8002842:	e010      	b.n	8002866 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <HAL_TIM_Base_MspInit+0xe4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10b      	bne.n	8002866 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	4a08      	ldr	r2, [pc, #32]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002858:	6453      	str	r3, [r2, #68]	@ 0x44
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_TIM_Base_MspInit+0xd8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
}
 8002866:	bf00      	nop
 8002868:	3730      	adds	r7, #48	@ 0x30
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000
 800287c:	40001400 	.word	0x40001400
 8002880:	40014000 	.word	0x40014000

08002884 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a11      	ldr	r2, [pc, #68]	@ (80028e8 <HAL_TIM_MspPostInit+0x64>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d11b      	bne.n	80028de <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_TIM_MspPostInit+0x68>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = TIM_Pin;
 80028be:	2308      	movs	r3, #8
 80028c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028c6:	2302      	movs	r3, #2
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80028ce:	2303      	movs	r3, #3
 80028d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <HAL_TIM_MspPostInit+0x6c>)
 80028da:	f001 f9d9 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40014000 	.word	0x40014000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000

080028f4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028f8:	4b14      	ldr	r3, [pc, #80]	@ (800294c <MX_USART3_UART_Init+0x58>)
 80028fa:	4a15      	ldr	r2, [pc, #84]	@ (8002950 <MX_USART3_UART_Init+0x5c>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028fe:	4b13      	ldr	r3, [pc, #76]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <MX_USART3_UART_Init+0x58>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <MX_USART3_UART_Init+0x58>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <MX_USART3_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	@ (800294c <MX_USART3_UART_Init+0x58>)
 8002938:	f004 fcec 	bl	8007314 <HAL_UART_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002942:	f7ff fd65 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200004b4 	.word	0x200004b4
 8002950:	40004800 	.word	0x40004800

08002954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0aa      	sub	sp, #168	@ 0xa8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	2284      	movs	r2, #132	@ 0x84
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f006 f87b 	bl	8008a70 <memset>
  if(uartHandle->Instance==USART3)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a74 <HAL_UART_MspInit+0x120>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d172      	bne.n	8002a6a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002988:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800298a:	2310      	movs	r3, #16
 800298c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fe86 	bl	80056a4 <HAL_RCCEx_PeriphCLKConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800299e:	f7ff fd37 	bl	8002410 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029a2:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <HAL_UART_MspInit+0x124>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <HAL_UART_MspInit+0x124>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <HAL_UART_MspInit+0x124>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002a78 <HAL_UART_MspInit+0x124>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a2e      	ldr	r2, [pc, #184]	@ (8002a78 <HAL_UART_MspInit+0x124>)
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a78 <HAL_UART_MspInit+0x124>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ec:	2307      	movs	r3, #7
 80029ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029f6:	4619      	mov	r1, r3
 80029f8:	4820      	ldr	r0, [pc, #128]	@ (8002a7c <HAL_UART_MspInit+0x128>)
 80029fa:	f001 f949 	bl	8003c90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80029fe:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a00:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <HAL_UART_MspInit+0x130>)
 8002a02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002a04:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a32:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a3e:	4810      	ldr	r0, [pc, #64]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a40:	f000 fdaa 	bl	8003598 <HAL_DMA_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002a4a:	f7ff fce1 	bl	8002410 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a0b      	ldr	r2, [pc, #44]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a52:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a54:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <HAL_UART_MspInit+0x12c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2027      	movs	r0, #39	@ 0x27
 8002a60:	f000 fd63 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a64:	2027      	movs	r0, #39	@ 0x27
 8002a66:	f000 fd7c 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	37a8      	adds	r7, #168	@ 0xa8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40004800 	.word	0x40004800
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	2000053c 	.word	0x2000053c
 8002a84:	40026028 	.word	0x40026028

08002a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a8c:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a8e:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a90:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a94:	e002      	b.n	8002a9c <LoopCopyDataInit>

08002a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9a:	3304      	adds	r3, #4

08002a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa0:	d3f9      	bcc.n	8002a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8002ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa8:	e001      	b.n	8002aae <LoopFillZerobss>

08002aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aac:	3204      	adds	r2, #4

08002aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab0:	d3fb      	bcc.n	8002aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ab2:	f7ff fd79 	bl	80025a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f005 ffe9 	bl	8008a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aba:	f7ff fa99 	bl	8001ff0 <main>
  bx  lr    
 8002abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac8:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002acc:	0800967c 	.word	0x0800967c
  ldr r2, =_sbss
 8002ad0:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002ad4:	200006e8 	.word	0x200006e8

08002ad8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <CAN1_RX0_IRQHandler>

08002ada <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ade:	2003      	movs	r0, #3
 8002ae0:	f000 fd18 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f000 f805 	bl	8002af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aea:	f7ff fca1 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_InitTick+0x54>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <HAL_InitTick+0x58>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd33 	bl	800357e <HAL_SYSTICK_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00e      	b.n	8002b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d80a      	bhi.n	8002b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 fcfb 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b34:	4a06      	ldr	r2, [pc, #24]	@ (8002b50 <HAL_InitTick+0x5c>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000224 	.word	0x20000224
 8002b4c:	2000022c 	.word	0x2000022c
 8002b50:	20000228 	.word	0x20000228

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000022c 	.word	0x2000022c
 8002b78:	2000059c 	.word	0x2000059c

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000059c 	.word	0x2000059c

08002b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff ffee 	bl	8002b7c <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d005      	beq.n	8002bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_Delay+0x44>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bba:	bf00      	nop
 8002bbc:	f7ff ffde 	bl	8002b7c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d8f7      	bhi.n	8002bbc <HAL_Delay+0x28>
  {
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000022c 	.word	0x2000022c

08002bdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e031      	b.n	8002c56 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fdd0 	bl	80017a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_ADC_Init+0x84>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa9e 	bl	800316c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c46:	e001      	b.n	8002c4c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	ffffeefd 	.word	0xffffeefd

08002c64 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d049      	beq.n	8002d2e <HAL_ADC_IRQHandler+0xca>
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d046      	beq.n	8002d2e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d12b      	bne.n	8002d1e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d127      	bne.n	8002d1e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d119      	bne.n	8002d1e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0220 	bic.w	r2, r2, #32
 8002cf8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8b0 	bl	8002e84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0212 	mvn.w	r2, #18
 8002d2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d057      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x190>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d054      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d139      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12b      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d124      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d11d      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d119      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fabb 	bl	8003360 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 020c 	mvn.w	r2, #12
 8002df2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e02:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d017      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x1d6>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d014      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d10d      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f834 	bl	8002e98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0201 	mvn.w	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e48:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x218>
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f043 0202 	orr.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f06f 0220 	mvn.w	r2, #32
 8002e6a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f81d 	bl	8002eac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0220 	mvn.w	r2, #32
 8002e7a:	601a      	str	r2, [r3, #0]
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x1c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e136      	b.n	800314a <HAL_ADC_ConfigChannel+0x28a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b09      	cmp	r3, #9
 8002eea:	d93a      	bls.n	8002f62 <HAL_ADC_ConfigChannel+0xa2>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ef4:	d035      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b1e      	subs	r3, #30
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a8d      	ldr	r2, [pc, #564]	@ (8003158 <HAL_ADC_ConfigChannel+0x298>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10a      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	061a      	lsls	r2, r3, #24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3a:	e035      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68d9      	ldr	r1, [r3, #12]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4403      	add	r3, r0
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	409a      	lsls	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f60:	e022      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6919      	ldr	r1, [r3, #16]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	2207      	movs	r2, #7
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	400a      	ands	r2, r1
 8002f84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6919      	ldr	r1, [r3, #16]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	4603      	mov	r3, r0
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4403      	add	r3, r0
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d824      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3b05      	subs	r3, #5
 8002fc2:	221f      	movs	r2, #31
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	400a      	ands	r2, r1
 8002fd0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b05      	subs	r3, #5
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ff8:	e04c      	b.n	8003094 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d824      	bhi.n	800304c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b23      	subs	r3, #35	@ 0x23
 8003014:	221f      	movs	r2, #31
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	400a      	ands	r2, r1
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b23      	subs	r3, #35	@ 0x23
 800303e:	fa00 f203 	lsl.w	r2, r0, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
 800304a:	e023      	b.n	8003094 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	3b41      	subs	r3, #65	@ 0x41
 800305e:	221f      	movs	r2, #31
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3b41      	subs	r3, #65	@ 0x41
 8003088:	fa00 f203 	lsl.w	r2, r0, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a30      	ldr	r2, [pc, #192]	@ (800315c <HAL_ADC_ConfigChannel+0x29c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10a      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1f4>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030a6:	d105      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a28      	ldr	r2, [pc, #160]	@ (800315c <HAL_ADC_ConfigChannel+0x29c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10f      	bne.n	80030de <HAL_ADC_ConfigChannel+0x21e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d10b      	bne.n	80030de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030c6:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a25      	ldr	r2, [pc, #148]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030d2:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a22      	ldr	r2, [pc, #136]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_ADC_ConfigChannel+0x29c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d12b      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x280>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003158 <HAL_ADC_ConfigChannel+0x298>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x23a>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b11      	cmp	r3, #17
 80030f8:	d122      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030fa:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a18      	ldr	r2, [pc, #96]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 8003100:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003104:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <HAL_ADC_ConfigChannel+0x2a0>)
 800310c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003110:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a10      	ldr	r2, [pc, #64]	@ (8003158 <HAL_ADC_ConfigChannel+0x298>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d111      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_ADC_ConfigChannel+0x2a4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a11      	ldr	r2, [pc, #68]	@ (8003168 <HAL_ADC_ConfigChannel+0x2a8>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9a      	lsrs	r2, r3, #18
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003132:	e002      	b.n	800313a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b01      	subs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f9      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	10000012 	.word	0x10000012
 800315c:	40012000 	.word	0x40012000
 8003160:	40012300 	.word	0x40012300
 8003164:	20000224 	.word	0x20000224
 8003168:	431bde83 	.word	0x431bde83

0800316c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003174:	4b78      	ldr	r3, [pc, #480]	@ (8003358 <ADC_Init+0x1ec>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a77      	ldr	r2, [pc, #476]	@ (8003358 <ADC_Init+0x1ec>)
 800317a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800317e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003180:	4b75      	ldr	r3, [pc, #468]	@ (8003358 <ADC_Init+0x1ec>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4973      	ldr	r1, [pc, #460]	@ (8003358 <ADC_Init+0x1ec>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800319c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	021a      	lsls	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	4a58      	ldr	r2, [pc, #352]	@ (800335c <ADC_Init+0x1f0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800320e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6899      	ldr	r1, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e00f      	b.n	8003266 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003264:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0202 	bic.w	r2, r2, #2
 8003274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	005a      	lsls	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	3b01      	subs	r3, #1
 80032c0:	035a      	lsls	r2, r3, #13
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e007      	b.n	80032dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	051a      	lsls	r2, r3, #20
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800331e:	025a      	lsls	r2, r3, #9
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6899      	ldr	r1, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	029a      	lsls	r2, r3, #10
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012300 	.word	0x40012300
 800335c:	0f000001 	.word	0x0f000001

08003360 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x40>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00
 80033b8:	05fa0000 	.word	0x05fa0000

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	@ (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	@ (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff faea 	bl	8002b7c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e099      	b.n	80036e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d4:	e00f      	b.n	80035f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d6:	f7ff fad1 	bl	8002b7c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d908      	bls.n	80035f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e078      	b.n	80036e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e8      	bne.n	80035d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_DMA_Init+0x158>)
 8003610:	4013      	ands	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	2b04      	cmp	r3, #4
 800364e:	d107      	bne.n	8003660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	4313      	orrs	r3, r2
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	2b04      	cmp	r3, #4
 8003688:	d117      	bne.n	80036ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa7b 	bl	8003b98 <DMA_CheckFifoParam>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2240      	movs	r2, #64	@ 0x40
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036b6:	2301      	movs	r3, #1
 80036b8:	e016      	b.n	80036e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa32 	bl	8003b2c <DMA_CalcBaseAndBitshift>
 80036c8:	4603      	mov	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	223f      	movs	r2, #63	@ 0x3f
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	f010803f 	.word	0xf010803f

080036f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003702:	f7ff fa3b 	bl	8002b7c <HAL_GetTick>
 8003706:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d008      	beq.n	8003726 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e052      	b.n	80037cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0216 	bic.w	r2, r2, #22
 8003734:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003744:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_DMA_Abort+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0208 	bic.w	r2, r2, #8
 8003764:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003776:	e013      	b.n	80037a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003778:	f7ff fa00 	bl	8002b7c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b05      	cmp	r3, #5
 8003784:	d90c      	bls.n	80037a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2203      	movs	r2, #3
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e015      	b.n	80037cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e4      	bne.n	8003778 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	223f      	movs	r2, #63	@ 0x3f
 80037b4:	409a      	lsls	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2280      	movs	r2, #128	@ 0x80
 80037ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e00c      	b.n	800380c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2205      	movs	r2, #5
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003824:	4b8e      	ldr	r3, [pc, #568]	@ (8003a60 <HAL_DMA_IRQHandler+0x248>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a8e      	ldr	r2, [pc, #568]	@ (8003a64 <HAL_DMA_IRQHandler+0x24c>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	2208      	movs	r2, #8
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003870:	2208      	movs	r2, #8
 8003872:	409a      	lsls	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	2204      	movs	r2, #4
 80038c0:	409a      	lsls	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038dc:	2204      	movs	r2, #4
 80038de:	409a      	lsls	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	2210      	movs	r2, #16
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d043      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03c      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	2210      	movs	r2, #16
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d024      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
 8003946:	e01f      	b.n	8003988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
 8003958:	e016      	b.n	8003988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0208 	bic.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	2220      	movs	r2, #32
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 808f 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8087 	beq.w	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	2220      	movs	r2, #32
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d136      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0216 	bic.w	r2, r2, #22
 80039d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x1da>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0208 	bic.w	r2, r2, #8
 8003a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	223f      	movs	r2, #63	@ 0x3f
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d07e      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
        }
        return;
 8003a2e:	e079      	b.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10d      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d031      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
 8003a5c:	e02c      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
 8003a5e:	bf00      	nop
 8003a60:	20000224 	.word	0x20000224
 8003a64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d023      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
 8003a78:	e01e      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0210 	bic.w	r2, r2, #16
 8003a96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d032      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d022      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2205      	movs	r2, #5
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d307      	bcc.n	8003b00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f2      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x2cc>
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
 8003b22:	e000      	b.n	8003b26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b24:	bf00      	nop
    }
  }
}
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3b10      	subs	r3, #16
 8003b3c:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <DMA_CalcBaseAndBitshift+0x60>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b46:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <DMA_CalcBaseAndBitshift+0x64>)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d908      	bls.n	8003b6c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <DMA_CalcBaseAndBitshift+0x68>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	1d1a      	adds	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b6a:	e006      	b.n	8003b7a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <DMA_CalcBaseAndBitshift+0x68>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	aaaaaaab 	.word	0xaaaaaaab
 8003b90:	08009530 	.word	0x08009530
 8003b94:	fffffc00 	.word	0xfffffc00

08003b98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11f      	bne.n	8003bf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d856      	bhi.n	8003c66 <DMA_CheckFifoParam+0xce>
 8003bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <DMA_CheckFifoParam+0x28>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003bd1 	.word	0x08003bd1
 8003bc4:	08003be3 	.word	0x08003be3
 8003bc8:	08003bd1 	.word	0x08003bd1
 8003bcc:	08003c67 	.word	0x08003c67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d046      	beq.n	8003c6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be0:	e043      	b.n	8003c6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bea:	d140      	bne.n	8003c6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf0:	e03d      	b.n	8003c6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfa:	d121      	bne.n	8003c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d837      	bhi.n	8003c72 <DMA_CheckFifoParam+0xda>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <DMA_CheckFifoParam+0x70>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c1f 	.word	0x08003c1f
 8003c10:	08003c19 	.word	0x08003c19
 8003c14:	08003c31 	.word	0x08003c31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e030      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d025      	beq.n	8003c76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2e:	e022      	b.n	8003c76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c38:	d11f      	bne.n	8003c7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c3e:	e01c      	b.n	8003c7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d903      	bls.n	8003c4e <DMA_CheckFifoParam+0xb6>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d003      	beq.n	8003c54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c4c:	e018      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
      break;
 8003c52:	e015      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e00b      	b.n	8003c7e <DMA_CheckFifoParam+0xe6>
      break;
 8003c66:	bf00      	nop
 8003c68:	e00a      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e008      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e006      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      break;
 8003c72:	bf00      	nop
 8003c74:	e004      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <DMA_CheckFifoParam+0xe8>
      break;
 8003c7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	@ 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e175      	b.n	8003f9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	f040 8164 	bne.w	8003f96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d005      	beq.n	8003ce6 <HAL_GPIO_Init+0x56>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d130      	bne.n	8003d48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 0201 	and.w	r2, r3, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d017      	beq.n	8003d84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	2203      	movs	r2, #3
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d123      	bne.n	8003dd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	08da      	lsrs	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3208      	adds	r2, #8
 8003d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	220f      	movs	r2, #15
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	08da      	lsrs	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3208      	adds	r2, #8
 8003dd2:	69b9      	ldr	r1, [r7, #24]
 8003dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	2203      	movs	r2, #3
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0203 	and.w	r2, r3, #3
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80be 	beq.w	8003f96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1a:	4b66      	ldr	r3, [pc, #408]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	4a65      	ldr	r2, [pc, #404]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e26:	4b63      	ldr	r3, [pc, #396]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e32:	4a61      	ldr	r2, [pc, #388]	@ (8003fb8 <HAL_GPIO_Init+0x328>)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a58      	ldr	r2, [pc, #352]	@ (8003fbc <HAL_GPIO_Init+0x32c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d037      	beq.n	8003ece <HAL_GPIO_Init+0x23e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a57      	ldr	r2, [pc, #348]	@ (8003fc0 <HAL_GPIO_Init+0x330>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d031      	beq.n	8003eca <HAL_GPIO_Init+0x23a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a56      	ldr	r2, [pc, #344]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02b      	beq.n	8003ec6 <HAL_GPIO_Init+0x236>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a55      	ldr	r2, [pc, #340]	@ (8003fc8 <HAL_GPIO_Init+0x338>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d025      	beq.n	8003ec2 <HAL_GPIO_Init+0x232>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a54      	ldr	r2, [pc, #336]	@ (8003fcc <HAL_GPIO_Init+0x33c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <HAL_GPIO_Init+0x22e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a53      	ldr	r2, [pc, #332]	@ (8003fd0 <HAL_GPIO_Init+0x340>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d019      	beq.n	8003eba <HAL_GPIO_Init+0x22a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a52      	ldr	r2, [pc, #328]	@ (8003fd4 <HAL_GPIO_Init+0x344>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_GPIO_Init+0x226>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a51      	ldr	r2, [pc, #324]	@ (8003fd8 <HAL_GPIO_Init+0x348>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00d      	beq.n	8003eb2 <HAL_GPIO_Init+0x222>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a50      	ldr	r2, [pc, #320]	@ (8003fdc <HAL_GPIO_Init+0x34c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <HAL_GPIO_Init+0x21e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4f      	ldr	r2, [pc, #316]	@ (8003fe0 <HAL_GPIO_Init+0x350>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_GPIO_Init+0x21a>
 8003ea6:	2309      	movs	r3, #9
 8003ea8:	e012      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003eaa:	230a      	movs	r3, #10
 8003eac:	e010      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	e00e      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	e00c      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003eb6:	2306      	movs	r3, #6
 8003eb8:	e00a      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003eba:	2305      	movs	r3, #5
 8003ebc:	e008      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	e006      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e004      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e002      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_GPIO_Init+0x240>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	f002 0203 	and.w	r2, r2, #3
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	4093      	lsls	r3, r2
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ee0:	4935      	ldr	r1, [pc, #212]	@ (8003fb8 <HAL_GPIO_Init+0x328>)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eee:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f12:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f18:	4b32      	ldr	r3, [pc, #200]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f3c:	4a29      	ldr	r2, [pc, #164]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f42:	4b28      	ldr	r3, [pc, #160]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f66:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f90:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <HAL_GPIO_Init+0x354>)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	f67f ae86 	bls.w	8003cb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	3724      	adds	r7, #36	@ 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40013800 	.word	0x40013800
 8003fbc:	40020000 	.word	0x40020000
 8003fc0:	40020400 	.word	0x40020400
 8003fc4:	40020800 	.word	0x40020800
 8003fc8:	40020c00 	.word	0x40020c00
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40021400 	.word	0x40021400
 8003fd4:	40021800 	.word	0x40021800
 8003fd8:	40021c00 	.word	0x40021c00
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	40022400 	.word	0x40022400
 8003fe4:	40013c00 	.word	0x40013c00

08003fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e001      	b.n	800400a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
 8004024:	4613      	mov	r3, r2
 8004026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004028:	787b      	ldrb	r3, [r7, #1]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004034:	e003      	b.n	800403e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004036:	887b      	ldrh	r3, [r7, #2]
 8004038:	041a      	lsls	r2, r3, #16
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	619a      	str	r2, [r3, #24]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4013      	ands	r3, r2
 8004062:	041a      	lsls	r2, r3, #16
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43d9      	mvns	r1, r3
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	400b      	ands	r3, r1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e08b      	b.n	80041aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd fe60 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	@ 0x24
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	e006      	b.n	8004108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d108      	bne.n	8004122 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	e007      	b.n	8004132 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <HAL_I2C_Init+0x134>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69d9      	ldr	r1, [r3, #28]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	02008000 	.word	0x02008000

080041b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	461a      	mov	r2, r3
 80041c4:	460b      	mov	r3, r1
 80041c6:	817b      	strh	r3, [r7, #10]
 80041c8:	4613      	mov	r3, r2
 80041ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	f040 80fd 	bne.w	80043d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_I2C_Master_Transmit+0x30>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0f6      	b.n	80043d6 <HAL_I2C_Master_Transmit+0x21e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041f0:	f7fe fcc4 	bl	8002b7c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	2319      	movs	r3, #25
 80041fc:	2201      	movs	r2, #1
 80041fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fa0a 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0e1      	b.n	80043d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	@ 0x21
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2210      	movs	r2, #16
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	2bff      	cmp	r3, #255	@ 0xff
 8004242:	d906      	bls.n	8004252 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	22ff      	movs	r2, #255	@ 0xff
 8004248:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800424a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e007      	b.n	8004262 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800425c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004260:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d024      	beq.n	80042b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	8979      	ldrh	r1, [r7, #10]
 80042a6:	4b4e      	ldr	r3, [pc, #312]	@ (80043e0 <HAL_I2C_Master_Transmit+0x228>)
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fc05 	bl	8004abc <I2C_TransferConfig>
 80042b2:	e066      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	4b48      	ldr	r3, [pc, #288]	@ (80043e0 <HAL_I2C_Master_Transmit+0x228>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fbfa 	bl	8004abc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042c8:	e05b      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	6a39      	ldr	r1, [r7, #32]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f9fd 	bl	80046ce <I2C_WaitOnTXISFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e07b      	b.n	80043d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d034      	beq.n	8004382 <HAL_I2C_Master_Transmit+0x1ca>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d130      	bne.n	8004382 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f976 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e04d      	b.n	80043d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2bff      	cmp	r3, #255	@ 0xff
 8004342:	d90e      	bls.n	8004362 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	22ff      	movs	r2, #255	@ 0xff
 8004348:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	b2da      	uxtb	r2, r3
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	2300      	movs	r3, #0
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fbae 	bl	8004abc <I2C_TransferConfig>
 8004360:	e00f      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb9d 	bl	8004abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d19e      	bne.n	80042ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	6a39      	ldr	r1, [r7, #32]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f9e3 	bl	800475c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e01a      	b.n	80043d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2220      	movs	r2, #32
 80043a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <HAL_I2C_Master_Transmit+0x22c>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	80002000 	.word	0x80002000
 80043e4:	fe00e800 	.word	0xfe00e800

080043e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	461a      	mov	r2, r3
 80043f4:	460b      	mov	r3, r1
 80043f6:	817b      	strh	r3, [r7, #10]
 80043f8:	4613      	mov	r3, r2
 80043fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	f040 80db 	bne.w	80045c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_I2C_Master_Receive+0x30>
 8004414:	2302      	movs	r3, #2
 8004416:	e0d4      	b.n	80045c2 <HAL_I2C_Master_Receive+0x1da>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004420:	f7fe fbac 	bl	8002b7c <HAL_GetTick>
 8004424:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2319      	movs	r3, #25
 800442c:	2201      	movs	r2, #1
 800442e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8f2 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0bf      	b.n	80045c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2222      	movs	r2, #34	@ 0x22
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2210      	movs	r2, #16
 800444e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	893a      	ldrh	r2, [r7, #8]
 8004462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2bff      	cmp	r3, #255	@ 0xff
 8004472:	d90e      	bls.n	8004492 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447e:	b2da      	uxtb	r2, r3
 8004480:	8979      	ldrh	r1, [r7, #10]
 8004482:	4b52      	ldr	r3, [pc, #328]	@ (80045cc <HAL_I2C_Master_Receive+0x1e4>)
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fb16 	bl	8004abc <I2C_TransferConfig>
 8004490:	e06d      	b.n	800456e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	8979      	ldrh	r1, [r7, #10]
 80044a4:	4b49      	ldr	r3, [pc, #292]	@ (80045cc <HAL_I2C_Master_Receive+0x1e4>)
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fb05 	bl	8004abc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80044b2:	e05c      	b.n	800456e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	6a39      	ldr	r1, [r7, #32]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f993 	bl	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e07c      	b.n	80045c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d034      	beq.n	800456e <HAL_I2C_Master_Receive+0x186>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d130      	bne.n	800456e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	2200      	movs	r2, #0
 8004514:	2180      	movs	r1, #128	@ 0x80
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f880 	bl	800461c <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e04d      	b.n	80045c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2bff      	cmp	r3, #255	@ 0xff
 800452e:	d90e      	bls.n	800454e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	22ff      	movs	r2, #255	@ 0xff
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453a:	b2da      	uxtb	r2, r3
 800453c:	8979      	ldrh	r1, [r7, #10]
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fab8 	bl	8004abc <I2C_TransferConfig>
 800454c:	e00f      	b.n	800456e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455c:	b2da      	uxtb	r2, r3
 800455e:	8979      	ldrh	r1, [r7, #10]
 8004560:	2300      	movs	r3, #0
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 faa7 	bl	8004abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d19d      	bne.n	80044b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	6a39      	ldr	r1, [r7, #32]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f8ed 	bl	800475c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e01a      	b.n	80045c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <HAL_I2C_Master_Receive+0x1e8>)
 80045a0:	400b      	ands	r3, r1
 80045a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	e000      	b.n	80045c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	80002400 	.word	0x80002400
 80045d0:	fe00e800 	.word	0xfe00e800

080045d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d103      	bne.n	80045f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d007      	beq.n	8004610 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	619a      	str	r2, [r3, #24]
  }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462c:	e03b      	b.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f962 	bl	80048fc <I2C_IsErrorOccurred>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e041      	b.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d02d      	beq.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fe fa97 	bl	8002b7c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d302      	bcc.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x44>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d122      	bne.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	429a      	cmp	r2, r3
 800467c:	d113      	bne.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00f      	b.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d0b4      	beq.n	800462e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046da:	e033      	b.n	8004744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f90b 	bl	80048fc <I2C_IsErrorOccurred>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e031      	b.n	8004754 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d025      	beq.n	8004744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f8:	f7fe fa40 	bl	8002b7c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d11a      	bne.n	8004744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d013      	beq.n	8004744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e007      	b.n	8004754 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d1c4      	bne.n	80046dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004768:	e02f      	b.n	80047ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f8c4 	bl	80048fc <I2C_IsErrorOccurred>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e02d      	b.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fe f9fd 	bl	8002b7c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d11a      	bne.n	80047ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d013      	beq.n	80047ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e007      	b.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d1c8      	bne.n	800476a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80047f4:	e071      	b.n	80048da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f87e 	bl	80048fc <I2C_IsErrorOccurred>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d13b      	bne.n	8004890 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d138      	bne.n	8004890 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d105      	bne.n	8004838 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d121      	bne.n	800488a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2204      	movs	r2, #4
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2220      	movs	r2, #32
 800485a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b24      	ldr	r3, [pc, #144]	@ (80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004868:	400b      	ands	r3, r1
 800486a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	75fb      	strb	r3, [r7, #23]
 8004888:	e002      	b.n	8004890 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004890:	f7fe f974 	bl	8002b7c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d119      	bne.n	80048da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00f      	beq.n	80048da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d002      	beq.n	80048ee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d083      	beq.n	80047f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fe00e800 	.word	0xfe00e800

080048fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	@ 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d068      	beq.n	80049fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004930:	e049      	b.n	80049c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d045      	beq.n	80049c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7fe f91f 	bl	8002b7c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <I2C_IsErrorOccurred+0x54>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d13a      	bne.n	80049c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800495a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004962:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004972:	d121      	bne.n	80049b8 <I2C_IsErrorOccurred+0xbc>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800497a:	d01d      	beq.n	80049b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b20      	cmp	r3, #32
 8004980:	d01a      	beq.n	80049b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004990:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004992:	f7fe f8f3 	bl	8002b7c <HAL_GetTick>
 8004996:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004998:	e00e      	b.n	80049b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800499a:	f7fe f8ef 	bl	8002b7c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b19      	cmp	r3, #25
 80049a6:	d907      	bls.n	80049b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80049b6:	e006      	b.n	80049c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d1e9      	bne.n	800499a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d003      	beq.n	80049dc <I2C_IsErrorOccurred+0xe0>
 80049d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0aa      	beq.n	8004932 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f043 0308 	orr.w	r3, r3, #8
 8004a34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f043 0302 	orr.w	r3, r3, #2
 8004a56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01c      	beq.n	8004aaa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fdaf 	bl	80045d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6859      	ldr	r1, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <I2C_IsErrorOccurred+0x1bc>)
 8004a82:	400b      	ands	r3, r1
 8004a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3728      	adds	r7, #40	@ 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	fe00e800 	.word	0xfe00e800

08004abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	817b      	strh	r3, [r7, #10]
 8004aca:	4613      	mov	r3, r2
 8004acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ad4:	7a7b      	ldrb	r3, [r7, #9]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004adc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004aea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	0d5b      	lsrs	r3, r3, #21
 8004af6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <I2C_TransferConfig+0x60>)
 8004afc:	430b      	orrs	r3, r1
 8004afe:	43db      	mvns	r3, r3
 8004b00:	ea02 0103 	and.w	r1, r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	03ff63ff 	.word	0x03ff63ff

08004b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d138      	bne.n	8004ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e032      	b.n	8004baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d139      	bne.n	8004c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e033      	b.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2224      	movs	r2, #36	@ 0x24
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a04      	ldr	r2, [pc, #16]	@ (8004c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40007000 	.word	0x40007000

08004c70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c7a:	4b23      	ldr	r3, [pc, #140]	@ (8004d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	4a22      	ldr	r2, [pc, #136]	@ (8004d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c86:	4b20      	ldr	r3, [pc, #128]	@ (8004d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c92:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1d      	ldr	r2, [pc, #116]	@ (8004d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9e:	f7fd ff6d 	bl	8002b7c <HAL_GetTick>
 8004ca2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ca4:	e009      	b.n	8004cba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ca6:	f7fd ff69 	bl	8002b7c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cb4:	d901      	bls.n	8004cba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e022      	b.n	8004d00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cba:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc6:	d1ee      	bne.n	8004ca6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cc8:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd4:	f7fd ff52 	bl	8002b7c <HAL_GetTick>
 8004cd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cda:	e009      	b.n	8004cf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cdc:	f7fd ff4e 	bl	8002b7c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cea:	d901      	bls.n	8004cf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e007      	b.n	8004d00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cf0:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cfc:	d1ee      	bne.n	8004cdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40007000 	.word	0x40007000

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e291      	b.n	800524a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8087 	beq.w	8004e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d34:	4b96      	ldr	r3, [pc, #600]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d00c      	beq.n	8004d5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d40:	4b93      	ldr	r3, [pc, #588]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d112      	bne.n	8004d72 <HAL_RCC_OscConfig+0x62>
 8004d4c:	4b90      	ldr	r3, [pc, #576]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d58:	d10b      	bne.n	8004d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d06c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x130>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d168      	bne.n	8004e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e26b      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x7a>
 8004d7c:	4b84      	ldr	r3, [pc, #528]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a83      	ldr	r2, [pc, #524]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	e02e      	b.n	8004de8 <HAL_RCC_OscConfig+0xd8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x9c>
 8004d92:	4b7f      	ldr	r3, [pc, #508]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7e      	ldr	r2, [pc, #504]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7b      	ldr	r2, [pc, #492]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e01d      	b.n	8004de8 <HAL_RCC_OscConfig+0xd8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0xc0>
 8004db6:	4b76      	ldr	r3, [pc, #472]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a75      	ldr	r2, [pc, #468]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b73      	ldr	r3, [pc, #460]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a72      	ldr	r2, [pc, #456]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0xd8>
 8004dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6b      	ldr	r2, [pc, #428]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fd fec4 	bl	8002b7c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fd fec0 	bl	8002b7c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	@ 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e21f      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b61      	ldr	r3, [pc, #388]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0xe8>
 8004e16:	e014      	b.n	8004e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd feb0 	bl	8002b7c <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fd feac 	bl	8002b7c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	@ 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e20b      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	4b57      	ldr	r3, [pc, #348]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x110>
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d069      	beq.n	8004f22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e4e:	4b50      	ldr	r3, [pc, #320]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x190>
 8004e66:	4b4a      	ldr	r3, [pc, #296]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d116      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e72:	4b47      	ldr	r3, [pc, #284]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_RCC_OscConfig+0x17a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e1df      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8a:	4b41      	ldr	r3, [pc, #260]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	493d      	ldr	r1, [pc, #244]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	e040      	b.n	8004f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d023      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea8:	4b39      	ldr	r3, [pc, #228]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a38      	ldr	r2, [pc, #224]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fe62 	bl	8002b7c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebc:	f7fd fe5e 	bl	8002b7c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1bd      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ece:	4b30      	ldr	r3, [pc, #192]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eda:	4b2d      	ldr	r3, [pc, #180]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4929      	ldr	r1, [pc, #164]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
 8004eee:	e018      	b.n	8004f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef0:	4b27      	ldr	r3, [pc, #156]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a26      	ldr	r2, [pc, #152]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fe3e 	bl	8002b7c <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f04:	f7fd fe3a 	bl	8002b7c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e199      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f16:	4b1e      	ldr	r3, [pc, #120]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d038      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d019      	beq.n	8004f6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f36:	4b16      	ldr	r3, [pc, #88]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f42:	f7fd fe1b 	bl	8002b7c <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4a:	f7fd fe17 	bl	8002b7c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e176      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x23a>
 8004f68:	e01a      	b.n	8004fa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6a:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6e:	4a08      	ldr	r2, [pc, #32]	@ (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd fe01 	bl	8002b7c <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7e:	f7fd fdfd 	bl	8002b7c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d903      	bls.n	8004f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e15c      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
 8004f90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	4b91      	ldr	r3, [pc, #580]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ee      	bne.n	8004f7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80a4 	beq.w	80050f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fae:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	4b88      	ldr	r3, [pc, #544]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	4a87      	ldr	r2, [pc, #540]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc6:	4b85      	ldr	r3, [pc, #532]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd6:	4b82      	ldr	r3, [pc, #520]	@ (80051e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80051e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80051e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fee:	f7fd fdc5 	bl	8002b7c <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff6:	f7fd fdc1 	bl	8002b7c <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	@ 0x64
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e120      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005008:	4b75      	ldr	r3, [pc, #468]	@ (80051e0 <HAL_RCC_OscConfig+0x4d0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x31a>
 800501c:	4b6f      	ldr	r3, [pc, #444]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005020:	4a6e      	ldr	r2, [pc, #440]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	@ 0x70
 8005028:	e02d      	b.n	8005086 <HAL_RCC_OscConfig+0x376>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x33c>
 8005032:	4b6a      	ldr	r3, [pc, #424]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	4a69      	ldr	r2, [pc, #420]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	6713      	str	r3, [r2, #112]	@ 0x70
 800503e:	4b67      	ldr	r3, [pc, #412]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005042:	4a66      	ldr	r2, [pc, #408]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	6713      	str	r3, [r2, #112]	@ 0x70
 800504a:	e01c      	b.n	8005086 <HAL_RCC_OscConfig+0x376>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d10c      	bne.n	800506e <HAL_RCC_OscConfig+0x35e>
 8005054:	4b61      	ldr	r3, [pc, #388]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005058:	4a60      	ldr	r2, [pc, #384]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800505a:	f043 0304 	orr.w	r3, r3, #4
 800505e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005060:	4b5e      	ldr	r3, [pc, #376]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005064:	4a5d      	ldr	r2, [pc, #372]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6713      	str	r3, [r2, #112]	@ 0x70
 800506c:	e00b      	b.n	8005086 <HAL_RCC_OscConfig+0x376>
 800506e:	4b5b      	ldr	r3, [pc, #364]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a5a      	ldr	r2, [pc, #360]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70
 800507a:	4b58      	ldr	r3, [pc, #352]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a57      	ldr	r2, [pc, #348]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fd fd75 	bl	8002b7c <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fd fd71 	bl	8002b7c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0ce      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	4b4b      	ldr	r3, [pc, #300]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCC_OscConfig+0x386>
 80050b8:	e014      	b.n	80050e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fd fd5f 	bl	8002b7c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c0:	e00a      	b.n	80050d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fd fd5b 	bl	8002b7c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0b8      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d8:	4b40      	ldr	r3, [pc, #256]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ee      	bne.n	80050c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d105      	bne.n	80050f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ea:	4b3c      	ldr	r3, [pc, #240]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	4a3b      	ldr	r2, [pc, #236]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80050f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80a4 	beq.w	8005248 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005100:	4b36      	ldr	r3, [pc, #216]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 030c 	and.w	r3, r3, #12
 8005108:	2b08      	cmp	r3, #8
 800510a:	d06b      	beq.n	80051e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d149      	bne.n	80051a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005114:	4b31      	ldr	r3, [pc, #196]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800511a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800511e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fd fd2c 	bl	8002b7c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005128:	f7fd fd28 	bl	8002b7c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e087      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	3b01      	subs	r3, #1
 8005160:	041b      	lsls	r3, r3, #16
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	4313      	orrs	r3, r2
 800516c:	4a1b      	ldr	r2, [pc, #108]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800516e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005172:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005174:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800517e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fcfc 	bl	8002b7c <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd fcf8 	bl	8002b7c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e057      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x478>
 80051a6:	e04f      	b.n	8005248 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a8:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0b      	ldr	r2, [pc, #44]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fd fce2 	bl	8002b7c <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fd fcde 	bl	8002b7c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e03d      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_RCC_OscConfig+0x4cc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x4ac>
 80051da:	e035      	b.n	8005248 <HAL_RCC_OscConfig+0x538>
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x544>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d028      	beq.n	8005244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d121      	bne.n	8005244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11a      	bne.n	8005244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800521a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d107      	bne.n	8005244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0d0      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005270:	4b6a      	ldr	r3, [pc, #424]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d910      	bls.n	80052a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b67      	ldr	r3, [pc, #412]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 020f 	bic.w	r2, r3, #15
 8005286:	4965      	ldr	r1, [pc, #404]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	4313      	orrs	r3, r2
 800528c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528e:	4b63      	ldr	r3, [pc, #396]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d001      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0b8      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d020      	beq.n	80052ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b8:	4b59      	ldr	r3, [pc, #356]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a58      	ldr	r2, [pc, #352]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80052be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d0:	4b53      	ldr	r3, [pc, #332]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a52      	ldr	r2, [pc, #328]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80052d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052dc:	4b50      	ldr	r3, [pc, #320]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	494d      	ldr	r1, [pc, #308]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d040      	beq.n	800537c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b47      	ldr	r3, [pc, #284]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d115      	bne.n	800533a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e07f      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531a:	4b41      	ldr	r3, [pc, #260]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e073      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532a:	4b3d      	ldr	r3, [pc, #244]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e06b      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533a:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4936      	ldr	r1, [pc, #216]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 8005348:	4313      	orrs	r3, r2
 800534a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534c:	f7fd fc16 	bl	8002b7c <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fd fc12 	bl	8002b7c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e053      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	4b2d      	ldr	r3, [pc, #180]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 020c 	and.w	r2, r3, #12
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d1eb      	bne.n	8005354 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800537c:	4b27      	ldr	r3, [pc, #156]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d210      	bcs.n	80053ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b24      	ldr	r3, [pc, #144]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 020f 	bic.w	r2, r3, #15
 8005392:	4922      	ldr	r1, [pc, #136]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b20      	ldr	r3, [pc, #128]	@ (800541c <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e032      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b8:	4b19      	ldr	r3, [pc, #100]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4916      	ldr	r1, [pc, #88]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053d6:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	490e      	ldr	r1, [pc, #56]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ea:	f000 f821 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <HAL_RCC_ClockConfig+0x1c8>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	490a      	ldr	r1, [pc, #40]	@ (8005424 <HAL_RCC_ClockConfig+0x1cc>)
 80053fc:	5ccb      	ldrb	r3, [r1, r3]
 80053fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <HAL_RCC_ClockConfig+0x1d0>)
 8005404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <HAL_RCC_ClockConfig+0x1d4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fd fb72 	bl	8002af4 <HAL_InitTick>

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40023c00 	.word	0x40023c00
 8005420:	40023800 	.word	0x40023800
 8005424:	08009518 	.word	0x08009518
 8005428:	20000224 	.word	0x20000224
 800542c:	20000228 	.word	0x20000228

08005430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b094      	sub	sp, #80	@ 0x50
 8005436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
 800543c:	2300      	movs	r3, #0
 800543e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005440:	2300      	movs	r3, #0
 8005442:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005448:	4b79      	ldr	r3, [pc, #484]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b08      	cmp	r3, #8
 8005452:	d00d      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x40>
 8005454:	2b08      	cmp	r3, #8
 8005456:	f200 80e1 	bhi.w	800561c <HAL_RCC_GetSysClockFreq+0x1ec>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x34>
 800545e:	2b04      	cmp	r3, #4
 8005460:	d003      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x3a>
 8005462:	e0db      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b73      	ldr	r3, [pc, #460]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x204>)
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005468:	e0db      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800546a:	4b73      	ldr	r3, [pc, #460]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x208>)
 800546c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800546e:	e0d8      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005470:	4b6f      	ldr	r3, [pc, #444]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005478:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800547a:	4b6d      	ldr	r3, [pc, #436]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d063      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005486:	4b6a      	ldr	r3, [pc, #424]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	2200      	movs	r2, #0
 800548e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005490:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005498:	633b      	str	r3, [r7, #48]	@ 0x30
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
 800549e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054a2:	4622      	mov	r2, r4
 80054a4:	462b      	mov	r3, r5
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	0159      	lsls	r1, r3, #5
 80054b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b4:	0150      	lsls	r0, r2, #5
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4621      	mov	r1, r4
 80054bc:	1a51      	subs	r1, r2, r1
 80054be:	6139      	str	r1, [r7, #16]
 80054c0:	4629      	mov	r1, r5
 80054c2:	eb63 0301 	sbc.w	r3, r3, r1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d4:	4659      	mov	r1, fp
 80054d6:	018b      	lsls	r3, r1, #6
 80054d8:	4651      	mov	r1, sl
 80054da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054de:	4651      	mov	r1, sl
 80054e0:	018a      	lsls	r2, r1, #6
 80054e2:	4651      	mov	r1, sl
 80054e4:	ebb2 0801 	subs.w	r8, r2, r1
 80054e8:	4659      	mov	r1, fp
 80054ea:	eb63 0901 	sbc.w	r9, r3, r1
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005502:	4690      	mov	r8, r2
 8005504:	4699      	mov	r9, r3
 8005506:	4623      	mov	r3, r4
 8005508:	eb18 0303 	adds.w	r3, r8, r3
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	462b      	mov	r3, r5
 8005510:	eb49 0303 	adc.w	r3, r9, r3
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005522:	4629      	mov	r1, r5
 8005524:	024b      	lsls	r3, r1, #9
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800552c:	4621      	mov	r1, r4
 800552e:	024a      	lsls	r2, r1, #9
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005536:	2200      	movs	r2, #0
 8005538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800553c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005540:	f7fb f9f4 	bl	800092c <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554c:	e058      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554e:	4b38      	ldr	r3, [pc, #224]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	099b      	lsrs	r3, r3, #6
 8005554:	2200      	movs	r2, #0
 8005556:	4618      	mov	r0, r3
 8005558:	4611      	mov	r1, r2
 800555a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	2300      	movs	r3, #0
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	f04f 0000 	mov.w	r0, #0
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	0159      	lsls	r1, r3, #5
 8005576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800557a:	0150      	lsls	r0, r2, #5
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4641      	mov	r1, r8
 8005582:	ebb2 0a01 	subs.w	sl, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb63 0b01 	sbc.w	fp, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005598:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800559c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055a0:	ebb2 040a 	subs.w	r4, r2, sl
 80055a4:	eb63 050b 	sbc.w	r5, r3, fp
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	00eb      	lsls	r3, r5, #3
 80055b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b6:	00e2      	lsls	r2, r4, #3
 80055b8:	4614      	mov	r4, r2
 80055ba:	461d      	mov	r5, r3
 80055bc:	4643      	mov	r3, r8
 80055be:	18e3      	adds	r3, r4, r3
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	464b      	mov	r3, r9
 80055c4:	eb45 0303 	adc.w	r3, r5, r3
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055d6:	4629      	mov	r1, r5
 80055d8:	028b      	lsls	r3, r1, #10
 80055da:	4621      	mov	r1, r4
 80055dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055e0:	4621      	mov	r1, r4
 80055e2:	028a      	lsls	r2, r1, #10
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ea:	2200      	movs	r2, #0
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	61fa      	str	r2, [r7, #28]
 80055f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f4:	f7fb f99a 	bl	800092c <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005600:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x200>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	3301      	adds	r3, #1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800561a:	e002      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x204>)
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005624:	4618      	mov	r0, r3
 8005626:	3750      	adds	r7, #80	@ 0x50
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	00f42400 	.word	0x00f42400
 8005638:	007a1200 	.word	0x007a1200

0800563c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005640:	4b03      	ldr	r3, [pc, #12]	@ (8005650 <HAL_RCC_GetHCLKFreq+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000224 	.word	0x20000224

08005654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005658:	f7ff fff0 	bl	800563c <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0a9b      	lsrs	r3, r3, #10
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	@ (8005678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08009528 	.word	0x08009528

0800567c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005680:	f7ff ffdc 	bl	800563c <HAL_RCC_GetHCLKFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b05      	ldr	r3, [pc, #20]	@ (800569c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0b5b      	lsrs	r3, r3, #13
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	4903      	ldr	r1, [pc, #12]	@ (80056a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40023800 	.word	0x40023800
 80056a0:	08009528 	.word	0x08009528

080056a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056cc:	4b69      	ldr	r3, [pc, #420]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a68      	ldr	r2, [pc, #416]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80056d6:	6093      	str	r3, [r2, #8]
 80056d8:	4b66      	ldr	r3, [pc, #408]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e0:	4964      	ldr	r1, [pc, #400]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d017      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005704:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	4959      	ldr	r1, [pc, #356]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800571c:	d101      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800571e:	2301      	movs	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800572a:	2301      	movs	r3, #1
 800572c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d017      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800573a:	4b4e      	ldr	r3, [pc, #312]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005740:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	494a      	ldr	r1, [pc, #296]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005758:	d101      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005776:	2301      	movs	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 808b 	beq.w	800589e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005788:	4b3a      	ldr	r3, [pc, #232]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	4a39      	ldr	r2, [pc, #228]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6413      	str	r3, [r2, #64]	@ 0x40
 8005794:	4b37      	ldr	r3, [pc, #220]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057a0:	4b35      	ldr	r3, [pc, #212]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a34      	ldr	r2, [pc, #208]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ac:	f7fd f9e6 	bl	8002b7c <HAL_GetTick>
 80057b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b4:	f7fd f9e2 	bl	8002b7c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	@ 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e357      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057d2:	4b28      	ldr	r3, [pc, #160]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d035      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d02e      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f0:	4b20      	ldr	r3, [pc, #128]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005804:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005806:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580a:	4a1a      	ldr	r2, [pc, #104]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005810:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005812:	4a18      	ldr	r2, [pc, #96]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005818:	4b16      	ldr	r3, [pc, #88]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d114      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd f9aa 	bl	8002b7c <HAL_GetTick>
 8005828:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	e00a      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fd f9a6 	bl	8002b7c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e319      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ee      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800585a:	d111      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800585c:	4b05      	ldr	r3, [pc, #20]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005868:	4b04      	ldr	r3, [pc, #16]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800586a:	400b      	ands	r3, r1
 800586c:	4901      	ldr	r1, [pc, #4]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
 8005872:	e00b      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005874:	40023800 	.word	0x40023800
 8005878:	40007000 	.word	0x40007000
 800587c:	0ffffcff 	.word	0x0ffffcff
 8005880:	4baa      	ldr	r3, [pc, #680]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4aa9      	ldr	r2, [pc, #676]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005886:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800588a:	6093      	str	r3, [r2, #8]
 800588c:	4ba7      	ldr	r3, [pc, #668]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800588e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005898:	49a4      	ldr	r1, [pc, #656]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800589a:	4313      	orrs	r3, r2
 800589c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058aa:	4ba0      	ldr	r3, [pc, #640]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b0:	4a9e      	ldr	r2, [pc, #632]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80058ba:	4b9c      	ldr	r3, [pc, #624]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c4:	4999      	ldr	r1, [pc, #612]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058d8:	4b94      	ldr	r3, [pc, #592]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e6:	4991      	ldr	r1, [pc, #580]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058fa:	4b8c      	ldr	r3, [pc, #560]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005908:	4988      	ldr	r1, [pc, #544]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800591c:	4b83      	ldr	r3, [pc, #524]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800592a:	4980      	ldr	r1, [pc, #512]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800593e:	4b7b      	ldr	r3, [pc, #492]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4977      	ldr	r1, [pc, #476]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005960:	4b72      	ldr	r3, [pc, #456]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005966:	f023 0203 	bic.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	496f      	ldr	r1, [pc, #444]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005982:	4b6a      	ldr	r3, [pc, #424]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f023 020c 	bic.w	r2, r3, #12
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005990:	4966      	ldr	r1, [pc, #408]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059a4:	4b61      	ldr	r3, [pc, #388]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	495e      	ldr	r1, [pc, #376]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059c6:	4b59      	ldr	r3, [pc, #356]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d4:	4955      	ldr	r1, [pc, #340]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059e8:	4b50      	ldr	r3, [pc, #320]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	494d      	ldr	r1, [pc, #308]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a0a:	4b48      	ldr	r3, [pc, #288]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a18:	4944      	ldr	r1, [pc, #272]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3a:	493c      	ldr	r1, [pc, #240]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a4e:	4b37      	ldr	r3, [pc, #220]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a5c:	4933      	ldr	r1, [pc, #204]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a70:	4b2e      	ldr	r3, [pc, #184]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a7e:	492b      	ldr	r1, [pc, #172]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a92:	4b26      	ldr	r3, [pc, #152]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a98:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa0:	4922      	ldr	r1, [pc, #136]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ad2:	4b16      	ldr	r3, [pc, #88]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae0:	4912      	ldr	r1, [pc, #72]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005af4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b04:	4909      	ldr	r1, [pc, #36]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d006      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80d9 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b20:	4b02      	ldr	r3, [pc, #8]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a01      	ldr	r2, [pc, #4]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b2a:	e001      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b32:	f7fd f823 	bl	8002b7c <HAL_GetTick>
 8005b36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b38:	e008      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b3a:	f7fd f81f 	bl	8002b7c <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b64      	cmp	r3, #100	@ 0x64
 8005b46:	d901      	bls.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e194      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f0      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d021      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11d      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b6c:	4b64      	ldr	r3, [pc, #400]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b7a:	4b61      	ldr	r3, [pc, #388]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	019a      	lsls	r2, r3, #6
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	071b      	lsls	r3, r3, #28
 8005ba0:	4957      	ldr	r1, [pc, #348]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d02e      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bd2:	d129      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005be2:	4b47      	ldr	r3, [pc, #284]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be8:	0f1b      	lsrs	r3, r3, #28
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	019a      	lsls	r2, r3, #6
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	071b      	lsls	r3, r3, #28
 8005c08:	493d      	ldr	r1, [pc, #244]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c10:	4b3b      	ldr	r3, [pc, #236]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c16:	f023 021f 	bic.w	r2, r3, #31
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4937      	ldr	r1, [pc, #220]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01d      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c34:	4b32      	ldr	r3, [pc, #200]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c3a:	0e1b      	lsrs	r3, r3, #24
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c42:	4b2f      	ldr	r3, [pc, #188]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c48:	0f1b      	lsrs	r3, r3, #28
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	019a      	lsls	r2, r3, #6
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	061b      	lsls	r3, r3, #24
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	071b      	lsls	r3, r3, #28
 8005c68:	4925      	ldr	r1, [pc, #148]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	019a      	lsls	r2, r3, #6
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	061b      	lsls	r3, r3, #24
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	071b      	lsls	r3, r3, #28
 8005c98:	4919      	ldr	r1, [pc, #100]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ca0:	4b17      	ldr	r3, [pc, #92]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ca6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cac:	f7fc ff66 	bl	8002b7c <HAL_GetTick>
 8005cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cb4:	f7fc ff62 	bl	8002b7c <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b64      	cmp	r3, #100	@ 0x64
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e0d7      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 80cd 	bne.w	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cda:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a08      	ldr	r2, [pc, #32]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce6:	f7fc ff49 	bl	8002b7c <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cec:	e00a      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cee:	f7fc ff45 	bl	8002b7c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	@ 0x64
 8005cfa:	d903      	bls.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e0ba      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005d00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d04:	4b5e      	ldr	r3, [pc, #376]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d10:	d0ed      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d02e      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d12a      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d3a:	4b51      	ldr	r3, [pc, #324]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d48:	4b4d      	ldr	r3, [pc, #308]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4e:	0f1b      	lsrs	r3, r3, #28
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	019a      	lsls	r2, r3, #6
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	041b      	lsls	r3, r3, #16
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	061b      	lsls	r3, r3, #24
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	071b      	lsls	r3, r3, #28
 8005d6e:	4944      	ldr	r1, [pc, #272]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d76:	4b42      	ldr	r3, [pc, #264]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d7c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	3b01      	subs	r3, #1
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	493d      	ldr	r1, [pc, #244]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d022      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da4:	d11d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005da6:	4b36      	ldr	r3, [pc, #216]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005db4:	4b32      	ldr	r3, [pc, #200]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dba:	0f1b      	lsrs	r3, r3, #28
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	019a      	lsls	r2, r3, #6
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	061b      	lsls	r3, r3, #24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	4929      	ldr	r1, [pc, #164]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d028      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dee:	4b24      	ldr	r3, [pc, #144]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df4:	0e1b      	lsrs	r3, r3, #24
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005dfc:	4b20      	ldr	r3, [pc, #128]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	019a      	lsls	r2, r3, #6
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	431a      	orrs	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	071b      	lsls	r3, r3, #28
 8005e22:	4917      	ldr	r1, [pc, #92]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e2a:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	4911      	ldr	r1, [pc, #68]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e40:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0e      	ldr	r2, [pc, #56]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fc fe96 	bl	8002b7c <HAL_GetTick>
 8005e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e54:	f7fc fe92 	bl	8002b7c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	@ 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e007      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e66:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e72:	d1ef      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800

08005e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e049      	b.n	8005f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fc76 	bl	800279c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f000 fdb0 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e04c      	b.n	8005fe6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a26      	ldr	r2, [pc, #152]	@ (8005ff4 <HAL_TIM_Base_Start+0xc0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d022      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f66:	d01d      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ff8 <HAL_TIM_Base_Start+0xc4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d018      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a21      	ldr	r2, [pc, #132]	@ (8005ffc <HAL_TIM_Base_Start+0xc8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1f      	ldr	r2, [pc, #124]	@ (8006000 <HAL_TIM_Base_Start+0xcc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006004 <HAL_TIM_Base_Start+0xd0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <HAL_TIM_Base_Start+0xd4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800600c <HAL_TIM_Base_Start+0xd8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d115      	bne.n	8005fd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	4b19      	ldr	r3, [pc, #100]	@ (8006010 <HAL_TIM_Base_Start+0xdc>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d015      	beq.n	8005fe2 <HAL_TIM_Base_Start+0xae>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fbc:	d011      	beq.n	8005fe2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	e008      	b.n	8005fe2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40010400 	.word	0x40010400
 8006008:	40014000 	.word	0x40014000
 800600c:	40001800 	.word	0x40001800
 8006010:	00010007 	.word	0x00010007

08006014 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10f      	bne.n	800604c <HAL_TIM_Base_Stop+0x38>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	f240 4344 	movw	r3, #1092	@ 0x444
 8006036:	4013      	ands	r3, r2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d107      	bne.n	800604c <HAL_TIM_Base_Stop+0x38>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d001      	beq.n	800607c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e054      	b.n	8006126 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a26      	ldr	r2, [pc, #152]	@ (8006134 <HAL_TIM_Base_Start_IT+0xd0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d022      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a6:	d01d      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a22      	ldr	r2, [pc, #136]	@ (8006138 <HAL_TIM_Base_Start_IT+0xd4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d018      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a21      	ldr	r2, [pc, #132]	@ (800613c <HAL_TIM_Base_Start_IT+0xd8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006140 <HAL_TIM_Base_Start_IT+0xdc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00e      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006144 <HAL_TIM_Base_Start_IT+0xe0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006148 <HAL_TIM_Base_Start_IT+0xe4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x80>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1b      	ldr	r2, [pc, #108]	@ (800614c <HAL_TIM_Base_Start_IT+0xe8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d115      	bne.n	8006110 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	4b19      	ldr	r3, [pc, #100]	@ (8006150 <HAL_TIM_Base_Start_IT+0xec>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d015      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0xbe>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fc:	d011      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610e:	e008      	b.n	8006122 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e000      	b.n	8006124 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	40000c00 	.word	0x40000c00
 8006144:	40010400 	.word	0x40010400
 8006148:	40014000 	.word	0x40014000
 800614c:	40001800 	.word	0x40001800
 8006150:	00010007 	.word	0x00010007

08006154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e049      	b.n	80061fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f841 	bl	8006202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 fc48 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_TIM_PWM_Start+0x24>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	bf14      	ite	ne
 8006234:	2301      	movne	r3, #1
 8006236:	2300      	moveq	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	e03c      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	d109      	bne.n	8006256 <HAL_TIM_PWM_Start+0x3e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	e02f      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d109      	bne.n	8006270 <HAL_TIM_PWM_Start+0x58>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e022      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d109      	bne.n	800628a <HAL_TIM_PWM_Start+0x72>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b01      	cmp	r3, #1
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e015      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x8c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e008      	b.n	80062b6 <HAL_TIM_PWM_Start+0x9e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e092      	b.n	80063e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_TIM_PWM_Start+0xb6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062cc:	e023      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d104      	bne.n	80062de <HAL_TIM_PWM_Start+0xc6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062dc:	e01b      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d104      	bne.n	80062ee <HAL_TIM_PWM_Start+0xd6>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062ec:	e013      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d104      	bne.n	80062fe <HAL_TIM_PWM_Start+0xe6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062fc:	e00b      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b10      	cmp	r3, #16
 8006302:	d104      	bne.n	800630e <HAL_TIM_PWM_Start+0xf6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800630c:	e003      	b.n	8006316 <HAL_TIM_PWM_Start+0xfe>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2202      	movs	r2, #2
 8006312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff26 	bl	8007170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a30      	ldr	r2, [pc, #192]	@ (80063ec <HAL_TIM_PWM_Start+0x1d4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIM_PWM_Start+0x120>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2f      	ldr	r2, [pc, #188]	@ (80063f0 <HAL_TIM_PWM_Start+0x1d8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_TIM_PWM_Start+0x124>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <HAL_TIM_PWM_Start+0x126>
 800633c:	2300      	movs	r3, #0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006350:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a25      	ldr	r2, [pc, #148]	@ (80063ec <HAL_TIM_PWM_Start+0x1d4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006364:	d01d      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a22      	ldr	r2, [pc, #136]	@ (80063f4 <HAL_TIM_PWM_Start+0x1dc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a20      	ldr	r2, [pc, #128]	@ (80063f8 <HAL_TIM_PWM_Start+0x1e0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1f      	ldr	r2, [pc, #124]	@ (80063fc <HAL_TIM_PWM_Start+0x1e4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a19      	ldr	r2, [pc, #100]	@ (80063f0 <HAL_TIM_PWM_Start+0x1d8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <HAL_TIM_PWM_Start+0x1e8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x18a>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a19      	ldr	r2, [pc, #100]	@ (8006404 <HAL_TIM_PWM_Start+0x1ec>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d115      	bne.n	80063ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	4b17      	ldr	r3, [pc, #92]	@ (8006408 <HAL_TIM_PWM_Start+0x1f0>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b06      	cmp	r3, #6
 80063b2:	d015      	beq.n	80063e0 <HAL_TIM_PWM_Start+0x1c8>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ba:	d011      	beq.n	80063e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	e008      	b.n	80063e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e000      	b.n	80063e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800
 8006408:	00010007 	.word	0x00010007

0800640c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d020      	beq.n	8006470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01b      	beq.n	8006470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0202 	mvn.w	r2, #2
 8006440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fac8 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 faba 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 facb 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d020      	beq.n	80064bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0204 	mvn.w	r2, #4
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 faa2 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa94 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 faa5 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d020      	beq.n	8006508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01b      	beq.n	8006508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0208 	mvn.w	r2, #8
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2204      	movs	r2, #4
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa7c 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa6e 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa7f 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b00      	cmp	r3, #0
 8006510:	d020      	beq.n	8006554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0210 	mvn.w	r2, #16
 8006524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2208      	movs	r2, #8
 800652a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa56 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa48 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fa59 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0201 	mvn.w	r2, #1
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fb fc5a 	bl	8001e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00c      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fea3 	bl	80072ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fe9b 	bl	8007300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa13 	bl	8006a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0220 	mvn.w	r2, #32
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fe63 	bl	80072d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006636:	2302      	movs	r3, #2
 8006638:	e0ff      	b.n	800683a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b14      	cmp	r3, #20
 8006646:	f200 80f0 	bhi.w	800682a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800664a:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	080066a5 	.word	0x080066a5
 8006654:	0800682b 	.word	0x0800682b
 8006658:	0800682b 	.word	0x0800682b
 800665c:	0800682b 	.word	0x0800682b
 8006660:	080066e5 	.word	0x080066e5
 8006664:	0800682b 	.word	0x0800682b
 8006668:	0800682b 	.word	0x0800682b
 800666c:	0800682b 	.word	0x0800682b
 8006670:	08006727 	.word	0x08006727
 8006674:	0800682b 	.word	0x0800682b
 8006678:	0800682b 	.word	0x0800682b
 800667c:	0800682b 	.word	0x0800682b
 8006680:	08006767 	.word	0x08006767
 8006684:	0800682b 	.word	0x0800682b
 8006688:	0800682b 	.word	0x0800682b
 800668c:	0800682b 	.word	0x0800682b
 8006690:	080067a9 	.word	0x080067a9
 8006694:	0800682b 	.word	0x0800682b
 8006698:	0800682b 	.word	0x0800682b
 800669c:	0800682b 	.word	0x0800682b
 80066a0:	080067e9 	.word	0x080067e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa68 	bl	8006b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0204 	bic.w	r2, r2, #4
 80066ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	619a      	str	r2, [r3, #24]
      break;
 80066e2:	e0a5      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 faba 	bl	8006c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800670e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6999      	ldr	r1, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	021a      	lsls	r2, r3, #8
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	619a      	str	r2, [r3, #24]
      break;
 8006724:	e084      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fb11 	bl	8006d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0208 	orr.w	r2, r2, #8
 8006740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0204 	bic.w	r2, r2, #4
 8006750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69d9      	ldr	r1, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	61da      	str	r2, [r3, #28]
      break;
 8006764:	e064      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fb67 	bl	8006e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69d9      	ldr	r1, [r3, #28]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	021a      	lsls	r2, r3, #8
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	61da      	str	r2, [r3, #28]
      break;
 80067a6:	e043      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fb9e 	bl	8006ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0208 	orr.w	r2, r2, #8
 80067c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0204 	bic.w	r2, r2, #4
 80067d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067e6:	e023      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fbd0 	bl	8006f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	021a      	lsls	r2, r3, #8
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006828:	e002      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      break;
 800682e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIM_ConfigClockSource+0x1c>
 800685c:	2302      	movs	r3, #2
 800685e:	e0b4      	b.n	80069ca <HAL_TIM_ConfigClockSource+0x186>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	4b56      	ldr	r3, [pc, #344]	@ (80069d4 <HAL_TIM_ConfigClockSource+0x190>)
 800687c:	4013      	ands	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006898:	d03e      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0xd4>
 800689a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800689e:	f200 8087 	bhi.w	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a6:	f000 8086 	beq.w	80069b6 <HAL_TIM_ConfigClockSource+0x172>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ae:	d87f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b70      	cmp	r3, #112	@ 0x70
 80068b2:	d01a      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0xa6>
 80068b4:	2b70      	cmp	r3, #112	@ 0x70
 80068b6:	d87b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b60      	cmp	r3, #96	@ 0x60
 80068ba:	d050      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x11a>
 80068bc:	2b60      	cmp	r3, #96	@ 0x60
 80068be:	d877      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b50      	cmp	r3, #80	@ 0x50
 80068c2:	d03c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0xfa>
 80068c4:	2b50      	cmp	r3, #80	@ 0x50
 80068c6:	d873      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b40      	cmp	r3, #64	@ 0x40
 80068ca:	d058      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x13a>
 80068cc:	2b40      	cmp	r3, #64	@ 0x40
 80068ce:	d86f      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b30      	cmp	r3, #48	@ 0x30
 80068d2:	d064      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068d4:	2b30      	cmp	r3, #48	@ 0x30
 80068d6:	d86b      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d060      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d867      	bhi.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05c      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d05a      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	e062      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068fa:	f000 fc19 	bl	8007130 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800690c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	609a      	str	r2, [r3, #8]
      break;
 8006916:	e04f      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006928:	f000 fc02 	bl	8007130 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800693a:	609a      	str	r2, [r3, #8]
      break;
 800693c:	e03c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	461a      	mov	r2, r3
 800694c:	f000 fb76 	bl	800703c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2150      	movs	r1, #80	@ 0x50
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fbcf 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 800695c:	e02c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696a:	461a      	mov	r2, r3
 800696c:	f000 fb95 	bl	800709a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2160      	movs	r1, #96	@ 0x60
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fbbf 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 800697c:	e01c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	461a      	mov	r2, r3
 800698c:	f000 fb56 	bl	800703c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2140      	movs	r1, #64	@ 0x40
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fbaf 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 800699c:	e00c      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 fba6 	bl	80070fa <TIM_ITRx_SetConfig>
      break;
 80069ae:	e003      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	fffeff88 	.word	0xfffeff88

080069d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a46      	ldr	r2, [pc, #280]	@ (8006b54 <TIM_Base_SetConfig+0x12c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d00f      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a43      	ldr	r2, [pc, #268]	@ (8006b58 <TIM_Base_SetConfig+0x130>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00b      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a42      	ldr	r2, [pc, #264]	@ (8006b5c <TIM_Base_SetConfig+0x134>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a41      	ldr	r2, [pc, #260]	@ (8006b60 <TIM_Base_SetConfig+0x138>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a40      	ldr	r2, [pc, #256]	@ (8006b64 <TIM_Base_SetConfig+0x13c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d108      	bne.n	8006a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a35      	ldr	r2, [pc, #212]	@ (8006b54 <TIM_Base_SetConfig+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d02b      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a88:	d027      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a32      	ldr	r2, [pc, #200]	@ (8006b58 <TIM_Base_SetConfig+0x130>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d023      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a31      	ldr	r2, [pc, #196]	@ (8006b5c <TIM_Base_SetConfig+0x134>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01f      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a30      	ldr	r2, [pc, #192]	@ (8006b60 <TIM_Base_SetConfig+0x138>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d01b      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8006b64 <TIM_Base_SetConfig+0x13c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d017      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a2e      	ldr	r2, [pc, #184]	@ (8006b68 <TIM_Base_SetConfig+0x140>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8006b6c <TIM_Base_SetConfig+0x144>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00f      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a2c      	ldr	r2, [pc, #176]	@ (8006b70 <TIM_Base_SetConfig+0x148>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00b      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8006b74 <TIM_Base_SetConfig+0x14c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2a      	ldr	r2, [pc, #168]	@ (8006b78 <TIM_Base_SetConfig+0x150>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a29      	ldr	r2, [pc, #164]	@ (8006b7c <TIM_Base_SetConfig+0x154>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d108      	bne.n	8006aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a10      	ldr	r2, [pc, #64]	@ (8006b54 <TIM_Base_SetConfig+0x12c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_Base_SetConfig+0xf8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a12      	ldr	r2, [pc, #72]	@ (8006b64 <TIM_Base_SetConfig+0x13c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d103      	bne.n	8006b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d105      	bne.n	8006b46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	611a      	str	r2, [r3, #16]
  }
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40000c00 	.word	0x40000c00
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800
 8006b74:	40001800 	.word	0x40001800
 8006b78:	40001c00 	.word	0x40001c00
 8006b7c:	40002000 	.word	0x40002000

08006b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f023 0201 	bic.w	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4b2b      	ldr	r3, [pc, #172]	@ (8006c58 <TIM_OC1_SetConfig+0xd8>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 0302 	bic.w	r3, r3, #2
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a21      	ldr	r2, [pc, #132]	@ (8006c5c <TIM_OC1_SetConfig+0xdc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_OC1_SetConfig+0x64>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a20      	ldr	r2, [pc, #128]	@ (8006c60 <TIM_OC1_SetConfig+0xe0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d10c      	bne.n	8006bfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0308 	bic.w	r3, r3, #8
 8006bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <TIM_OC1_SetConfig+0xdc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC1_SetConfig+0x8e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a15      	ldr	r2, [pc, #84]	@ (8006c60 <TIM_OC1_SetConfig+0xe0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d111      	bne.n	8006c32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	621a      	str	r2, [r3, #32]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	fffeff8f 	.word	0xfffeff8f
 8006c5c:	40010000 	.word	0x40010000
 8006c60:	40010400 	.word	0x40010400

08006c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f023 0210 	bic.w	r2, r3, #16
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8006d48 <TIM_OC2_SetConfig+0xe4>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0320 	bic.w	r3, r3, #32
 8006cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a23      	ldr	r2, [pc, #140]	@ (8006d4c <TIM_OC2_SetConfig+0xe8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d003      	beq.n	8006ccc <TIM_OC2_SetConfig+0x68>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a22      	ldr	r2, [pc, #136]	@ (8006d50 <TIM_OC2_SetConfig+0xec>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d10d      	bne.n	8006ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a18      	ldr	r2, [pc, #96]	@ (8006d4c <TIM_OC2_SetConfig+0xe8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC2_SetConfig+0x94>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	@ (8006d50 <TIM_OC2_SetConfig+0xec>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d113      	bne.n	8006d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	feff8fff 	.word	0xfeff8fff
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40010400 	.word	0x40010400

08006d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e34 <TIM_OC3_SetConfig+0xe0>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0303 	bic.w	r3, r3, #3
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a22      	ldr	r2, [pc, #136]	@ (8006e38 <TIM_OC3_SetConfig+0xe4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d003      	beq.n	8006dba <TIM_OC3_SetConfig+0x66>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a21      	ldr	r2, [pc, #132]	@ (8006e3c <TIM_OC3_SetConfig+0xe8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d10d      	bne.n	8006dd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <TIM_OC3_SetConfig+0xe4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_OC3_SetConfig+0x92>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a16      	ldr	r2, [pc, #88]	@ (8006e3c <TIM_OC3_SetConfig+0xe8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d113      	bne.n	8006e0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	fffeff8f 	.word	0xfffeff8f
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40010400 	.word	0x40010400

08006e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee4 <TIM_OC4_SetConfig+0xa4>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	031b      	lsls	r3, r3, #12
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a13      	ldr	r2, [pc, #76]	@ (8006ee8 <TIM_OC4_SetConfig+0xa8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_OC4_SetConfig+0x68>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a12      	ldr	r2, [pc, #72]	@ (8006eec <TIM_OC4_SetConfig+0xac>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d109      	bne.n	8006ebc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	feff8fff 	.word	0xfeff8fff
 8006ee8:	40010000 	.word	0x40010000
 8006eec:	40010400 	.word	0x40010400

08006ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <TIM_OC5_SetConfig+0x98>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a12      	ldr	r2, [pc, #72]	@ (8006f8c <TIM_OC5_SetConfig+0x9c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC5_SetConfig+0x5e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a11      	ldr	r2, [pc, #68]	@ (8006f90 <TIM_OC5_SetConfig+0xa0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d109      	bne.n	8006f62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	621a      	str	r2, [r3, #32]
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	fffeff8f 	.word	0xfffeff8f
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400

08006f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007030 <TIM_OC6_SetConfig+0x9c>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	051b      	lsls	r3, r3, #20
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a13      	ldr	r2, [pc, #76]	@ (8007034 <TIM_OC6_SetConfig+0xa0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_OC6_SetConfig+0x60>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a12      	ldr	r2, [pc, #72]	@ (8007038 <TIM_OC6_SetConfig+0xa4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d109      	bne.n	8007008 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	feff8fff 	.word	0xfeff8fff
 8007034:	40010000 	.word	0x40010000
 8007038:	40010400 	.word	0x40010400

0800703c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f023 0201 	bic.w	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f023 030a 	bic.w	r3, r3, #10
 8007078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800709a:	b480      	push	{r7}
 800709c:	b087      	sub	sp, #28
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	f023 0210 	bic.w	r2, r3, #16
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	031b      	lsls	r3, r3, #12
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	f043 0307 	orr.w	r3, r3, #7
 800711c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	609a      	str	r2, [r3, #8]
}
 8007124:	bf00      	nop
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800714a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	021a      	lsls	r2, r3, #8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	431a      	orrs	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4313      	orrs	r3, r2
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	2201      	movs	r2, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	43db      	mvns	r3, r3
 8007192:	401a      	ands	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	fa01 f303 	lsl.w	r3, r1, r3
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e06d      	b.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a30      	ldr	r2, [pc, #192]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2f      	ldr	r2, [pc, #188]	@ (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800720e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a20      	ldr	r2, [pc, #128]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007246:	d01d      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1d      	ldr	r2, [pc, #116]	@ (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1a      	ldr	r2, [pc, #104]	@ (80072cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a15      	ldr	r2, [pc, #84]	@ (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a16      	ldr	r2, [pc, #88]	@ (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d10c      	bne.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40000800 	.word	0x40000800
 80072cc:	40000c00 	.word	0x40000c00
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40001800 	.word	0x40001800

080072d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e040      	b.n	80073a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fb fb0c 	bl	8002954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2224      	movs	r2, #36	@ 0x24
 8007340:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0201 	bic.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fe4c 	bl	8007ff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fbe5 	bl	8007b30 <UART_SetConfig>
 8007366:	4603      	mov	r3, r0
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e01b      	b.n	80073a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800737e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800738e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fecb 	bl	800813c <UART_CheckIdleState>
 80073a6:	4603      	mov	r3, r0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	@ 0x28
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	4613      	mov	r3, r2
 80073be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d177      	bne.n	80074b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_UART_Transmit+0x24>
 80073ce:	88fb      	ldrh	r3, [r7, #6]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e070      	b.n	80074ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2221      	movs	r2, #33	@ 0x21
 80073e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073e6:	f7fb fbc9 	bl	8002b7c <HAL_GetTick>
 80073ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007404:	d108      	bne.n	8007418 <HAL_UART_Transmit+0x68>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	e003      	b.n	8007420 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007420:	e02f      	b.n	8007482 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2200      	movs	r2, #0
 800742a:	2180      	movs	r1, #128	@ 0x80
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fedc 	bl	80081ea <UART_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e03b      	b.n	80074ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10b      	bne.n	8007460 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007456:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	3302      	adds	r3, #2
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e007      	b.n	8007470 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3301      	adds	r3, #1
 800746e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1c9      	bne.n	8007422 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	2140      	movs	r1, #64	@ 0x40
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fea6 	bl	80081ea <UART_WaitOnFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e005      	b.n	80074ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08a      	sub	sp, #40	@ 0x28
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	4613      	mov	r3, r2
 80074ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d132      	bne.n	8007540 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_UART_Receive_IT+0x24>
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e02b      	b.n	8007542 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	613b      	str	r3, [r7, #16]
   return(result);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69f9      	ldr	r1, [r7, #28]
 8007522:	6a3a      	ldr	r2, [r7, #32]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	61bb      	str	r3, [r7, #24]
   return(result);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	461a      	mov	r2, r3
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fec4 	bl	80082c4 <UART_Start_Receive_IT>
 800753c:	4603      	mov	r3, r0
 800753e:	e000      	b.n	8007542 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3728      	adds	r7, #40	@ 0x28
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b0ba      	sub	sp, #232	@ 0xe8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007576:	f640 030f 	movw	r3, #2063	@ 0x80f
 800757a:	4013      	ands	r3, r2
 800757c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d115      	bne.n	80075b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00f      	beq.n	80075b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8297 	beq.w	8007ad8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
      }
      return;
 80075b2:	e291      	b.n	8007ad8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8117 	beq.w	80077ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80075ce:	4b85      	ldr	r3, [pc, #532]	@ (80077e4 <HAL_UART_IRQHandler+0x298>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 810a 	beq.w	80077ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d011      	beq.n	8007608 <HAL_UART_IRQHandler+0xbc>
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fe:	f043 0201 	orr.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_UART_IRQHandler+0xec>
 8007614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2202      	movs	r2, #2
 8007626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800762e:	f043 0204 	orr.w	r2, r3, #4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d011      	beq.n	8007668 <HAL_UART_IRQHandler+0x11c>
 8007644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2204      	movs	r2, #4
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800765e:	f043 0202 	orr.w	r2, r3, #2
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007684:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2208      	movs	r2, #8
 8007692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769a:	f043 0208 	orr.w	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <HAL_UART_IRQHandler+0x18a>
 80076b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 81fd 	beq.w	8007adc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007710:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771e:	2b40      	cmp	r3, #64	@ 0x40
 8007720:	d005      	beq.n	800772e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007726:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800772a:	2b00      	cmp	r3, #0
 800772c:	d04f      	beq.n	80077ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fe8e 	bl	8008450 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b40      	cmp	r3, #64	@ 0x40
 8007740:	d141      	bne.n	80077c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800775c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800776e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800777a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1d9      	bne.n	8007742 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007792:	2b00      	cmp	r3, #0
 8007794:	d013      	beq.n	80077be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800779a:	4a13      	ldr	r2, [pc, #76]	@ (80077e8 <HAL_UART_IRQHandler+0x29c>)
 800779c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fc f816 	bl	80037d4 <HAL_DMA_Abort_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d017      	beq.n	80077de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077bc:	e00f      	b.n	80077de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9a0 	bl	8007b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	e00b      	b.n	80077de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f99c 	bl	8007b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e007      	b.n	80077de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f998 	bl	8007b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80077dc:	e17e      	b.n	8007adc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077de:	bf00      	nop
    return;
 80077e0:	e17c      	b.n	8007adc <HAL_UART_IRQHandler+0x590>
 80077e2:	bf00      	nop
 80077e4:	04000120 	.word	0x04000120
 80077e8:	08008519 	.word	0x08008519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f040 814c 	bne.w	8007a8e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8145 	beq.w	8007a8e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 813e 	beq.w	8007a8e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2210      	movs	r2, #16
 8007818:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007824:	2b40      	cmp	r3, #64	@ 0x40
 8007826:	f040 80b6 	bne.w	8007996 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007836:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8150 	beq.w	8007ae0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800784a:	429a      	cmp	r2, r3
 800784c:	f080 8148 	bcs.w	8007ae0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007856:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007864:	f000 8086 	beq.w	8007974 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800787c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007896:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800789e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1da      	bne.n	8007868 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e1      	bne.n	80078b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007914:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e3      	bne.n	80078ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007944:	f023 0310 	bic.w	r3, r3, #16
 8007948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	461a      	mov	r2, r3
 8007952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800795c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e4      	bne.n	8007934 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796e:	4618      	mov	r0, r3
 8007970:	f7fb fec0 	bl	80036f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007986:	b29b      	uxth	r3, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8c2 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007994:	e0a4      	b.n	8007ae0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8096 	beq.w	8007ae4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80079b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8091 	beq.w	8007ae4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e4      	bne.n	80079c2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	623b      	str	r3, [r7, #32]
   return(result);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	f023 0301 	bic.w	r3, r3, #1
 8007a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e3      	bne.n	80079f8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f023 0310 	bic.w	r3, r3, #16
 8007a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	69b9      	ldr	r1, [r7, #24]
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	617b      	str	r3, [r7, #20]
   return(result);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e4      	bne.n	8007a44 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f846 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a8c:	e02a      	b.n	8007ae4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01c      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	4798      	blx	r3
    }
    return;
 8007ab6:	e017      	b.n	8007ae8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d012      	beq.n	8007aea <HAL_UART_IRQHandler+0x59e>
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00c      	beq.n	8007aea <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fd37 	bl	8008544 <UART_EndTransmit_IT>
    return;
 8007ad6:	e008      	b.n	8007aea <HAL_UART_IRQHandler+0x59e>
      return;
 8007ad8:	bf00      	nop
 8007ada:	e006      	b.n	8007aea <HAL_UART_IRQHandler+0x59e>
    return;
 8007adc:	bf00      	nop
 8007ade:	e004      	b.n	8007aea <HAL_UART_IRQHandler+0x59e>
      return;
 8007ae0:	bf00      	nop
 8007ae2:	e002      	b.n	8007aea <HAL_UART_IRQHandler+0x59e>
      return;
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <HAL_UART_IRQHandler+0x59e>
    return;
 8007ae8:	bf00      	nop
  }

}
 8007aea:	37e8      	adds	r7, #232	@ 0xe8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8007df4 <UART_SetConfig+0x2c4>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6979      	ldr	r1, [r7, #20]
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a94      	ldr	r2, [pc, #592]	@ (8007df8 <UART_SetConfig+0x2c8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d120      	bne.n	8007bee <UART_SetConfig+0xbe>
 8007bac:	4b93      	ldr	r3, [pc, #588]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d816      	bhi.n	8007be8 <UART_SetConfig+0xb8>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <UART_SetConfig+0x90>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007bdd 	.word	0x08007bdd
 8007bc8:	08007bd7 	.word	0x08007bd7
 8007bcc:	08007be3 	.word	0x08007be3
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e150      	b.n	8007e78 <UART_SetConfig+0x348>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	77fb      	strb	r3, [r7, #31]
 8007bda:	e14d      	b.n	8007e78 <UART_SetConfig+0x348>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e14a      	b.n	8007e78 <UART_SetConfig+0x348>
 8007be2:	2308      	movs	r3, #8
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e147      	b.n	8007e78 <UART_SetConfig+0x348>
 8007be8:	2310      	movs	r3, #16
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e144      	b.n	8007e78 <UART_SetConfig+0x348>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a83      	ldr	r2, [pc, #524]	@ (8007e00 <UART_SetConfig+0x2d0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d132      	bne.n	8007c5e <UART_SetConfig+0x12e>
 8007bf8:	4b80      	ldr	r3, [pc, #512]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfe:	f003 030c 	and.w	r3, r3, #12
 8007c02:	2b0c      	cmp	r3, #12
 8007c04:	d828      	bhi.n	8007c58 <UART_SetConfig+0x128>
 8007c06:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <UART_SetConfig+0xdc>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c59 	.word	0x08007c59
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c59 	.word	0x08007c59
 8007c1c:	08007c4d 	.word	0x08007c4d
 8007c20:	08007c59 	.word	0x08007c59
 8007c24:	08007c59 	.word	0x08007c59
 8007c28:	08007c59 	.word	0x08007c59
 8007c2c:	08007c47 	.word	0x08007c47
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c53 	.word	0x08007c53
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e118      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e115      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e112      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e10f      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e10c      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a68      	ldr	r2, [pc, #416]	@ (8007e04 <UART_SetConfig+0x2d4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d120      	bne.n	8007caa <UART_SetConfig+0x17a>
 8007c68:	4b64      	ldr	r3, [pc, #400]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c72:	2b30      	cmp	r3, #48	@ 0x30
 8007c74:	d013      	beq.n	8007c9e <UART_SetConfig+0x16e>
 8007c76:	2b30      	cmp	r3, #48	@ 0x30
 8007c78:	d814      	bhi.n	8007ca4 <UART_SetConfig+0x174>
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d009      	beq.n	8007c92 <UART_SetConfig+0x162>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d810      	bhi.n	8007ca4 <UART_SetConfig+0x174>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <UART_SetConfig+0x15c>
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d006      	beq.n	8007c98 <UART_SetConfig+0x168>
 8007c8a:	e00b      	b.n	8007ca4 <UART_SetConfig+0x174>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e0f2      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c92:	2302      	movs	r3, #2
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e0ef      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e0ec      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e0e9      	b.n	8007e78 <UART_SetConfig+0x348>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e0e6      	b.n	8007e78 <UART_SetConfig+0x348>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a56      	ldr	r2, [pc, #344]	@ (8007e08 <UART_SetConfig+0x2d8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d120      	bne.n	8007cf6 <UART_SetConfig+0x1c6>
 8007cb4:	4b51      	ldr	r3, [pc, #324]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cc0:	d013      	beq.n	8007cea <UART_SetConfig+0x1ba>
 8007cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cc4:	d814      	bhi.n	8007cf0 <UART_SetConfig+0x1c0>
 8007cc6:	2b80      	cmp	r3, #128	@ 0x80
 8007cc8:	d009      	beq.n	8007cde <UART_SetConfig+0x1ae>
 8007cca:	2b80      	cmp	r3, #128	@ 0x80
 8007ccc:	d810      	bhi.n	8007cf0 <UART_SetConfig+0x1c0>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <UART_SetConfig+0x1a8>
 8007cd2:	2b40      	cmp	r3, #64	@ 0x40
 8007cd4:	d006      	beq.n	8007ce4 <UART_SetConfig+0x1b4>
 8007cd6:	e00b      	b.n	8007cf0 <UART_SetConfig+0x1c0>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0cc      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e0c9      	b.n	8007e78 <UART_SetConfig+0x348>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e0c6      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cea:	2308      	movs	r3, #8
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e0c3      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e0c0      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a44      	ldr	r2, [pc, #272]	@ (8007e0c <UART_SetConfig+0x2dc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d125      	bne.n	8007d4c <UART_SetConfig+0x21c>
 8007d00:	4b3e      	ldr	r3, [pc, #248]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d0e:	d017      	beq.n	8007d40 <UART_SetConfig+0x210>
 8007d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d14:	d817      	bhi.n	8007d46 <UART_SetConfig+0x216>
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d1a:	d00b      	beq.n	8007d34 <UART_SetConfig+0x204>
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d20:	d811      	bhi.n	8007d46 <UART_SetConfig+0x216>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <UART_SetConfig+0x1fe>
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d2a:	d006      	beq.n	8007d3a <UART_SetConfig+0x20a>
 8007d2c:	e00b      	b.n	8007d46 <UART_SetConfig+0x216>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e0a1      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d34:	2302      	movs	r3, #2
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e09e      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e09b      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d40:	2308      	movs	r3, #8
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e098      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d46:	2310      	movs	r3, #16
 8007d48:	77fb      	strb	r3, [r7, #31]
 8007d4a:	e095      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2f      	ldr	r2, [pc, #188]	@ (8007e10 <UART_SetConfig+0x2e0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d125      	bne.n	8007da2 <UART_SetConfig+0x272>
 8007d56:	4b29      	ldr	r3, [pc, #164]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d64:	d017      	beq.n	8007d96 <UART_SetConfig+0x266>
 8007d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d6a:	d817      	bhi.n	8007d9c <UART_SetConfig+0x26c>
 8007d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d70:	d00b      	beq.n	8007d8a <UART_SetConfig+0x25a>
 8007d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d76:	d811      	bhi.n	8007d9c <UART_SetConfig+0x26c>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <UART_SetConfig+0x254>
 8007d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d80:	d006      	beq.n	8007d90 <UART_SetConfig+0x260>
 8007d82:	e00b      	b.n	8007d9c <UART_SetConfig+0x26c>
 8007d84:	2301      	movs	r3, #1
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e076      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	77fb      	strb	r3, [r7, #31]
 8007d8e:	e073      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d90:	2304      	movs	r3, #4
 8007d92:	77fb      	strb	r3, [r7, #31]
 8007d94:	e070      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d96:	2308      	movs	r3, #8
 8007d98:	77fb      	strb	r3, [r7, #31]
 8007d9a:	e06d      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e06a      	b.n	8007e78 <UART_SetConfig+0x348>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <UART_SetConfig+0x2e4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d138      	bne.n	8007e1e <UART_SetConfig+0x2ee>
 8007dac:	4b13      	ldr	r3, [pc, #76]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007dba:	d017      	beq.n	8007dec <UART_SetConfig+0x2bc>
 8007dbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007dc0:	d82a      	bhi.n	8007e18 <UART_SetConfig+0x2e8>
 8007dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc6:	d00b      	beq.n	8007de0 <UART_SetConfig+0x2b0>
 8007dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dcc:	d824      	bhi.n	8007e18 <UART_SetConfig+0x2e8>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <UART_SetConfig+0x2aa>
 8007dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd6:	d006      	beq.n	8007de6 <UART_SetConfig+0x2b6>
 8007dd8:	e01e      	b.n	8007e18 <UART_SetConfig+0x2e8>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	77fb      	strb	r3, [r7, #31]
 8007dde:	e04b      	b.n	8007e78 <UART_SetConfig+0x348>
 8007de0:	2302      	movs	r3, #2
 8007de2:	77fb      	strb	r3, [r7, #31]
 8007de4:	e048      	b.n	8007e78 <UART_SetConfig+0x348>
 8007de6:	2304      	movs	r3, #4
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e045      	b.n	8007e78 <UART_SetConfig+0x348>
 8007dec:	2308      	movs	r3, #8
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e042      	b.n	8007e78 <UART_SetConfig+0x348>
 8007df2:	bf00      	nop
 8007df4:	efff69f3 	.word	0xefff69f3
 8007df8:	40011000 	.word	0x40011000
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	40004400 	.word	0x40004400
 8007e04:	40004800 	.word	0x40004800
 8007e08:	40004c00 	.word	0x40004c00
 8007e0c:	40005000 	.word	0x40005000
 8007e10:	40011400 	.word	0x40011400
 8007e14:	40007800 	.word	0x40007800
 8007e18:	2310      	movs	r3, #16
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e02c      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a72      	ldr	r2, [pc, #456]	@ (8007fec <UART_SetConfig+0x4bc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d125      	bne.n	8007e74 <UART_SetConfig+0x344>
 8007e28:	4b71      	ldr	r3, [pc, #452]	@ (8007ff0 <UART_SetConfig+0x4c0>)
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e2e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007e36:	d017      	beq.n	8007e68 <UART_SetConfig+0x338>
 8007e38:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007e3c:	d817      	bhi.n	8007e6e <UART_SetConfig+0x33e>
 8007e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e42:	d00b      	beq.n	8007e5c <UART_SetConfig+0x32c>
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e48:	d811      	bhi.n	8007e6e <UART_SetConfig+0x33e>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <UART_SetConfig+0x326>
 8007e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e52:	d006      	beq.n	8007e62 <UART_SetConfig+0x332>
 8007e54:	e00b      	b.n	8007e6e <UART_SetConfig+0x33e>
 8007e56:	2300      	movs	r3, #0
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e00d      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e00a      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e62:	2304      	movs	r3, #4
 8007e64:	77fb      	strb	r3, [r7, #31]
 8007e66:	e007      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e68:	2308      	movs	r3, #8
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e004      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e6e:	2310      	movs	r3, #16
 8007e70:	77fb      	strb	r3, [r7, #31]
 8007e72:	e001      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e74:	2310      	movs	r3, #16
 8007e76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e80:	d15b      	bne.n	8007f3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e82:	7ffb      	ldrb	r3, [r7, #31]
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d828      	bhi.n	8007eda <UART_SetConfig+0x3aa>
 8007e88:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <UART_SetConfig+0x360>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007eb5 	.word	0x08007eb5
 8007e94:	08007ebd 	.word	0x08007ebd
 8007e98:	08007ec5 	.word	0x08007ec5
 8007e9c:	08007edb 	.word	0x08007edb
 8007ea0:	08007ecb 	.word	0x08007ecb
 8007ea4:	08007edb 	.word	0x08007edb
 8007ea8:	08007edb 	.word	0x08007edb
 8007eac:	08007edb 	.word	0x08007edb
 8007eb0:	08007ed3 	.word	0x08007ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb4:	f7fd fbce 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8007eb8:	61b8      	str	r0, [r7, #24]
        break;
 8007eba:	e013      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ebc:	f7fd fbde 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 8007ec0:	61b8      	str	r0, [r7, #24]
        break;
 8007ec2:	e00f      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff4 <UART_SetConfig+0x4c4>)
 8007ec6:	61bb      	str	r3, [r7, #24]
        break;
 8007ec8:	e00c      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eca:	f7fd fab1 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 8007ece:	61b8      	str	r0, [r7, #24]
        break;
 8007ed0:	e008      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed6:	61bb      	str	r3, [r7, #24]
        break;
 8007ed8:	e004      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ee2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d074      	beq.n	8007fd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d916      	bls.n	8007f34 <UART_SetConfig+0x404>
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d212      	bcs.n	8007f34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f023 030f 	bic.w	r3, r3, #15
 8007f16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	89fa      	ldrh	r2, [r7, #14]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e04f      	b.n	8007fd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	77bb      	strb	r3, [r7, #30]
 8007f38:	e04c      	b.n	8007fd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d828      	bhi.n	8007f92 <UART_SetConfig+0x462>
 8007f40:	a201      	add	r2, pc, #4	@ (adr r2, 8007f48 <UART_SetConfig+0x418>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f75 	.word	0x08007f75
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f93 	.word	0x08007f93
 8007f58:	08007f83 	.word	0x08007f83
 8007f5c:	08007f93 	.word	0x08007f93
 8007f60:	08007f93 	.word	0x08007f93
 8007f64:	08007f93 	.word	0x08007f93
 8007f68:	08007f8b 	.word	0x08007f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f6c:	f7fd fb72 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8007f70:	61b8      	str	r0, [r7, #24]
        break;
 8007f72:	e013      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f74:	f7fd fb82 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 8007f78:	61b8      	str	r0, [r7, #24]
        break;
 8007f7a:	e00f      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff4 <UART_SetConfig+0x4c4>)
 8007f7e:	61bb      	str	r3, [r7, #24]
        break;
 8007f80:	e00c      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f82:	f7fd fa55 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 8007f86:	61b8      	str	r0, [r7, #24]
        break;
 8007f88:	e008      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e004      	b.n	8007f9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	77bb      	strb	r3, [r7, #30]
        break;
 8007f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d018      	beq.n	8007fd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	085a      	lsrs	r2, r3, #1
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	441a      	add	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b0f      	cmp	r3, #15
 8007fba:	d909      	bls.n	8007fd0 <UART_SetConfig+0x4a0>
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fc2:	d205      	bcs.n	8007fd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60da      	str	r2, [r3, #12]
 8007fce:	e001      	b.n	8007fd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007fe0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	40007c00 	.word	0x40007c00
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	00f42400 	.word	0x00f42400

08007ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	f003 0308 	and.w	r3, r3, #8
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01a      	beq.n	800810e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080f6:	d10a      	bne.n	800810e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	@ 0x30
 8008140:	af02      	add	r7, sp, #8
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800814c:	f7fa fd16 	bl	8002b7c <HAL_GetTick>
 8008150:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b08      	cmp	r3, #8
 800815e:	d12e      	bne.n	80081be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	2200      	movs	r2, #0
 800816a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f83b 	bl	80081ea <UART_WaitOnFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d021      	beq.n	80081be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	60fb      	str	r3, [r7, #12]
   return(result);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800818e:	623b      	str	r3, [r7, #32]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	61fb      	str	r3, [r7, #28]
 800819a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	69b9      	ldr	r1, [r7, #24]
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	617b      	str	r3, [r7, #20]
   return(result);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e6      	bne.n	800817a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e011      	b.n	80081e2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3728      	adds	r7, #40	@ 0x28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	603b      	str	r3, [r7, #0]
 80081f6:	4613      	mov	r3, r2
 80081f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081fa:	e04f      	b.n	800829c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d04b      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008204:	f7fa fcba 	bl	8002b7c <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	429a      	cmp	r2, r3
 8008212:	d302      	bcc.n	800821a <UART_WaitOnFlagUntilTimeout+0x30>
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e04e      	b.n	80082bc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d037      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0xb2>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b80      	cmp	r3, #128	@ 0x80
 8008230:	d034      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0xb2>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	d031      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b08      	cmp	r3, #8
 8008244:	d110      	bne.n	8008268 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2208      	movs	r2, #8
 800824c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f8fe 	bl	8008450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2208      	movs	r2, #8
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e029      	b.n	80082bc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008276:	d111      	bne.n	800829c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008280:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f8e4 	bl	8008450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e00f      	b.n	80082bc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69da      	ldr	r2, [r3, #28]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4013      	ands	r3, r2
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d0a0      	beq.n	80081fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b097      	sub	sp, #92	@ 0x5c
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	88fa      	ldrh	r2, [r7, #6]
 80082dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f6:	d10e      	bne.n	8008316 <UART_Start_Receive_IT+0x52>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d105      	bne.n	800830c <UART_Start_Receive_IT+0x48>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008306:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800830a:	e02d      	b.n	8008368 <UART_Start_Receive_IT+0xa4>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	22ff      	movs	r2, #255	@ 0xff
 8008310:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008314:	e028      	b.n	8008368 <UART_Start_Receive_IT+0xa4>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10d      	bne.n	800833a <UART_Start_Receive_IT+0x76>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <UART_Start_Receive_IT+0x6c>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	22ff      	movs	r2, #255	@ 0xff
 800832a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800832e:	e01b      	b.n	8008368 <UART_Start_Receive_IT+0xa4>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	227f      	movs	r2, #127	@ 0x7f
 8008334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008338:	e016      	b.n	8008368 <UART_Start_Receive_IT+0xa4>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008342:	d10d      	bne.n	8008360 <UART_Start_Receive_IT+0x9c>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <UART_Start_Receive_IT+0x92>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	227f      	movs	r2, #127	@ 0x7f
 8008350:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008354:	e008      	b.n	8008368 <UART_Start_Receive_IT+0xa4>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	223f      	movs	r2, #63	@ 0x3f
 800835a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800835e:	e003      	b.n	8008368 <UART_Start_Receive_IT+0xa4>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2222      	movs	r2, #34	@ 0x22
 8008374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008398:	64ba      	str	r2, [r7, #72]	@ 0x48
 800839a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800839e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80083a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e5      	bne.n	8008378 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b4:	d107      	bne.n	80083c6 <UART_Start_Receive_IT+0x102>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4a21      	ldr	r2, [pc, #132]	@ (8008448 <UART_Start_Receive_IT+0x184>)
 80083c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80083c4:	e002      	b.n	80083cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4a20      	ldr	r2, [pc, #128]	@ (800844c <UART_Start_Receive_IT+0x188>)
 80083ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d019      	beq.n	8008408 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80083e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e6      	bne.n	80083d4 <UART_Start_Receive_IT+0x110>
 8008406:	e018      	b.n	800843a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	613b      	str	r3, [r7, #16]
   return(result);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f043 0320 	orr.w	r3, r3, #32
 800841c:	653b      	str	r3, [r7, #80]	@ 0x50
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008426:	623b      	str	r3, [r7, #32]
 8008428:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	69f9      	ldr	r1, [r7, #28]
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	61bb      	str	r3, [r7, #24]
   return(result);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e6      	bne.n	8008408 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	375c      	adds	r7, #92	@ 0x5c
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	08008741 	.word	0x08008741
 800844c:	08008599 	.word	0x08008599

08008450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b095      	sub	sp, #84	@ 0x54
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800846c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008476:	643b      	str	r3, [r7, #64]	@ 0x40
 8008478:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800847c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	61fb      	str	r3, [r7, #28]
   return(result);
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d118      	bne.n	80084f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f023 0310 	bic.w	r3, r3, #16
 80084da:	647b      	str	r3, [r7, #68]	@ 0x44
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6979      	ldr	r1, [r7, #20]
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	613b      	str	r3, [r7, #16]
   return(result);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e6      	bne.n	80084c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800850c:	bf00      	nop
 800850e:	3754      	adds	r7, #84	@ 0x54
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff fae4 	bl	8007b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	60bb      	str	r3, [r7, #8]
   return(result);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6979      	ldr	r1, [r7, #20]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	613b      	str	r3, [r7, #16]
   return(result);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e6      	bne.n	800854c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fab0 	bl	8007af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008590:	bf00      	nop
 8008592:	3720      	adds	r7, #32
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b09c      	sub	sp, #112	@ 0x70
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b0:	2b22      	cmp	r3, #34	@ 0x22
 80085b2:	f040 80b9 	bne.w	8008728 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80085c4:	b2d9      	uxtb	r1, r3
 80085c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d0:	400a      	ands	r2, r1
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f040 809c 	bne.w	8008738 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800860e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800861e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008620:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008624:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800862c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e6      	bne.n	8008600 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	667b      	str	r3, [r7, #100]	@ 0x64
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008652:	647a      	str	r2, [r7, #68]	@ 0x44
 8008654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e5      	bne.n	8008632 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d018      	beq.n	80086ba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	623b      	str	r3, [r7, #32]
   return(result);
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800869c:	663b      	str	r3, [r7, #96]	@ 0x60
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e6      	bne.n	8008688 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d12e      	bne.n	8008720 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f023 0310 	bic.w	r3, r3, #16
 80086dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	69b9      	ldr	r1, [r7, #24]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	617b      	str	r3, [r7, #20]
   return(result);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e6      	bne.n	80086c8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b10      	cmp	r3, #16
 8008706:	d103      	bne.n	8008710 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2210      	movs	r2, #16
 800870e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff f9fd 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800871e:	e00b      	b.n	8008738 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7f9 fb99 	bl	8001e58 <HAL_UART_RxCpltCallback>
}
 8008726:	e007      	b.n	8008738 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	699a      	ldr	r2, [r3, #24]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0208 	orr.w	r2, r2, #8
 8008736:	619a      	str	r2, [r3, #24]
}
 8008738:	bf00      	nop
 800873a:	3770      	adds	r7, #112	@ 0x70
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b09c      	sub	sp, #112	@ 0x70
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800874e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008758:	2b22      	cmp	r3, #34	@ 0x22
 800875a:	f040 80b9 	bne.w	80088d0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800876e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008772:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008776:	4013      	ands	r3, r2
 8008778:	b29a      	uxth	r2, r3
 800877a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800877c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008782:	1c9a      	adds	r2, r3, #2
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f040 809c 	bne.w	80088e0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80087b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80087c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d018      	beq.n	8008862 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	61fb      	str	r3, [r7, #28]
   return(result);
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008850:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e6      	bne.n	8008830 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008866:	2b01      	cmp	r3, #1
 8008868:	d12e      	bne.n	80088c8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	60bb      	str	r3, [r7, #8]
   return(result);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f023 0310 	bic.w	r3, r3, #16
 8008884:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800888e:	61bb      	str	r3, [r7, #24]
 8008890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6979      	ldr	r1, [r7, #20]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e6      	bne.n	8008870 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f003 0310 	and.w	r3, r3, #16
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	d103      	bne.n	80088b8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2210      	movs	r2, #16
 80088b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff f929 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088c6:	e00b      	b.n	80088e0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7f9 fac5 	bl	8001e58 <HAL_UART_RxCpltCallback>
}
 80088ce:	e007      	b.n	80088e0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0208 	orr.w	r2, r2, #8
 80088de:	619a      	str	r2, [r3, #24]
}
 80088e0:	bf00      	nop
 80088e2:	3770      	adds	r7, #112	@ 0x70
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <_strtol_l.constprop.0>:
 80088e8:	2b24      	cmp	r3, #36	@ 0x24
 80088ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ee:	4686      	mov	lr, r0
 80088f0:	4690      	mov	r8, r2
 80088f2:	d801      	bhi.n	80088f8 <_strtol_l.constprop.0+0x10>
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d106      	bne.n	8008906 <_strtol_l.constprop.0+0x1e>
 80088f8:	f000 f8c2 	bl	8008a80 <__errno>
 80088fc:	2316      	movs	r3, #22
 80088fe:	6003      	str	r3, [r0, #0]
 8008900:	2000      	movs	r0, #0
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	4834      	ldr	r0, [pc, #208]	@ (80089d8 <_strtol_l.constprop.0+0xf0>)
 8008908:	460d      	mov	r5, r1
 800890a:	462a      	mov	r2, r5
 800890c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008910:	5d06      	ldrb	r6, [r0, r4]
 8008912:	f016 0608 	ands.w	r6, r6, #8
 8008916:	d1f8      	bne.n	800890a <_strtol_l.constprop.0+0x22>
 8008918:	2c2d      	cmp	r4, #45	@ 0x2d
 800891a:	d12d      	bne.n	8008978 <_strtol_l.constprop.0+0x90>
 800891c:	782c      	ldrb	r4, [r5, #0]
 800891e:	2601      	movs	r6, #1
 8008920:	1c95      	adds	r5, r2, #2
 8008922:	f033 0210 	bics.w	r2, r3, #16
 8008926:	d109      	bne.n	800893c <_strtol_l.constprop.0+0x54>
 8008928:	2c30      	cmp	r4, #48	@ 0x30
 800892a:	d12a      	bne.n	8008982 <_strtol_l.constprop.0+0x9a>
 800892c:	782a      	ldrb	r2, [r5, #0]
 800892e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008932:	2a58      	cmp	r2, #88	@ 0x58
 8008934:	d125      	bne.n	8008982 <_strtol_l.constprop.0+0x9a>
 8008936:	786c      	ldrb	r4, [r5, #1]
 8008938:	2310      	movs	r3, #16
 800893a:	3502      	adds	r5, #2
 800893c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008940:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008944:	2200      	movs	r2, #0
 8008946:	fbbc f9f3 	udiv	r9, ip, r3
 800894a:	4610      	mov	r0, r2
 800894c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008950:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008954:	2f09      	cmp	r7, #9
 8008956:	d81b      	bhi.n	8008990 <_strtol_l.constprop.0+0xa8>
 8008958:	463c      	mov	r4, r7
 800895a:	42a3      	cmp	r3, r4
 800895c:	dd27      	ble.n	80089ae <_strtol_l.constprop.0+0xc6>
 800895e:	1c57      	adds	r7, r2, #1
 8008960:	d007      	beq.n	8008972 <_strtol_l.constprop.0+0x8a>
 8008962:	4581      	cmp	r9, r0
 8008964:	d320      	bcc.n	80089a8 <_strtol_l.constprop.0+0xc0>
 8008966:	d101      	bne.n	800896c <_strtol_l.constprop.0+0x84>
 8008968:	45a2      	cmp	sl, r4
 800896a:	db1d      	blt.n	80089a8 <_strtol_l.constprop.0+0xc0>
 800896c:	fb00 4003 	mla	r0, r0, r3, r4
 8008970:	2201      	movs	r2, #1
 8008972:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008976:	e7eb      	b.n	8008950 <_strtol_l.constprop.0+0x68>
 8008978:	2c2b      	cmp	r4, #43	@ 0x2b
 800897a:	bf04      	itt	eq
 800897c:	782c      	ldrbeq	r4, [r5, #0]
 800897e:	1c95      	addeq	r5, r2, #2
 8008980:	e7cf      	b.n	8008922 <_strtol_l.constprop.0+0x3a>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1da      	bne.n	800893c <_strtol_l.constprop.0+0x54>
 8008986:	2c30      	cmp	r4, #48	@ 0x30
 8008988:	bf0c      	ite	eq
 800898a:	2308      	moveq	r3, #8
 800898c:	230a      	movne	r3, #10
 800898e:	e7d5      	b.n	800893c <_strtol_l.constprop.0+0x54>
 8008990:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008994:	2f19      	cmp	r7, #25
 8008996:	d801      	bhi.n	800899c <_strtol_l.constprop.0+0xb4>
 8008998:	3c37      	subs	r4, #55	@ 0x37
 800899a:	e7de      	b.n	800895a <_strtol_l.constprop.0+0x72>
 800899c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80089a0:	2f19      	cmp	r7, #25
 80089a2:	d804      	bhi.n	80089ae <_strtol_l.constprop.0+0xc6>
 80089a4:	3c57      	subs	r4, #87	@ 0x57
 80089a6:	e7d8      	b.n	800895a <_strtol_l.constprop.0+0x72>
 80089a8:	f04f 32ff 	mov.w	r2, #4294967295
 80089ac:	e7e1      	b.n	8008972 <_strtol_l.constprop.0+0x8a>
 80089ae:	1c53      	adds	r3, r2, #1
 80089b0:	d108      	bne.n	80089c4 <_strtol_l.constprop.0+0xdc>
 80089b2:	2322      	movs	r3, #34	@ 0x22
 80089b4:	f8ce 3000 	str.w	r3, [lr]
 80089b8:	4660      	mov	r0, ip
 80089ba:	f1b8 0f00 	cmp.w	r8, #0
 80089be:	d0a0      	beq.n	8008902 <_strtol_l.constprop.0+0x1a>
 80089c0:	1e69      	subs	r1, r5, #1
 80089c2:	e006      	b.n	80089d2 <_strtol_l.constprop.0+0xea>
 80089c4:	b106      	cbz	r6, 80089c8 <_strtol_l.constprop.0+0xe0>
 80089c6:	4240      	negs	r0, r0
 80089c8:	f1b8 0f00 	cmp.w	r8, #0
 80089cc:	d099      	beq.n	8008902 <_strtol_l.constprop.0+0x1a>
 80089ce:	2a00      	cmp	r2, #0
 80089d0:	d1f6      	bne.n	80089c0 <_strtol_l.constprop.0+0xd8>
 80089d2:	f8c8 1000 	str.w	r1, [r8]
 80089d6:	e794      	b.n	8008902 <_strtol_l.constprop.0+0x1a>
 80089d8:	08009539 	.word	0x08009539

080089dc <strtol>:
 80089dc:	4613      	mov	r3, r2
 80089de:	460a      	mov	r2, r1
 80089e0:	4601      	mov	r1, r0
 80089e2:	4802      	ldr	r0, [pc, #8]	@ (80089ec <strtol+0x10>)
 80089e4:	6800      	ldr	r0, [r0, #0]
 80089e6:	f7ff bf7f 	b.w	80088e8 <_strtol_l.constprop.0>
 80089ea:	bf00      	nop
 80089ec:	20000230 	.word	0x20000230

080089f0 <siprintf>:
 80089f0:	b40e      	push	{r1, r2, r3}
 80089f2:	b500      	push	{lr}
 80089f4:	b09c      	sub	sp, #112	@ 0x70
 80089f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80089f8:	9002      	str	r0, [sp, #8]
 80089fa:	9006      	str	r0, [sp, #24]
 80089fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a00:	4809      	ldr	r0, [pc, #36]	@ (8008a28 <siprintf+0x38>)
 8008a02:	9107      	str	r1, [sp, #28]
 8008a04:	9104      	str	r1, [sp, #16]
 8008a06:	4909      	ldr	r1, [pc, #36]	@ (8008a2c <siprintf+0x3c>)
 8008a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	a902      	add	r1, sp, #8
 8008a14:	f000 f9b4 	bl	8008d80 <_svfiprintf_r>
 8008a18:	9b02      	ldr	r3, [sp, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	b01c      	add	sp, #112	@ 0x70
 8008a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a24:	b003      	add	sp, #12
 8008a26:	4770      	bx	lr
 8008a28:	20000230 	.word	0x20000230
 8008a2c:	ffff0208 	.word	0xffff0208

08008a30 <_vsiprintf_r>:
 8008a30:	b500      	push	{lr}
 8008a32:	b09b      	sub	sp, #108	@ 0x6c
 8008a34:	9100      	str	r1, [sp, #0]
 8008a36:	9104      	str	r1, [sp, #16]
 8008a38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a3c:	9105      	str	r1, [sp, #20]
 8008a3e:	9102      	str	r1, [sp, #8]
 8008a40:	4905      	ldr	r1, [pc, #20]	@ (8008a58 <_vsiprintf_r+0x28>)
 8008a42:	9103      	str	r1, [sp, #12]
 8008a44:	4669      	mov	r1, sp
 8008a46:	f000 f99b 	bl	8008d80 <_svfiprintf_r>
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	b01b      	add	sp, #108	@ 0x6c
 8008a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a56:	bf00      	nop
 8008a58:	ffff0208 	.word	0xffff0208

08008a5c <vsiprintf>:
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	460a      	mov	r2, r1
 8008a60:	4601      	mov	r1, r0
 8008a62:	4802      	ldr	r0, [pc, #8]	@ (8008a6c <vsiprintf+0x10>)
 8008a64:	6800      	ldr	r0, [r0, #0]
 8008a66:	f7ff bfe3 	b.w	8008a30 <_vsiprintf_r>
 8008a6a:	bf00      	nop
 8008a6c:	20000230 	.word	0x20000230

08008a70 <memset>:
 8008a70:	4402      	add	r2, r0
 8008a72:	4603      	mov	r3, r0
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d100      	bne.n	8008a7a <memset+0xa>
 8008a78:	4770      	bx	lr
 8008a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a7e:	e7f9      	b.n	8008a74 <memset+0x4>

08008a80 <__errno>:
 8008a80:	4b01      	ldr	r3, [pc, #4]	@ (8008a88 <__errno+0x8>)
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000230 	.word	0x20000230

08008a8c <__libc_init_array>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8008ac4 <__libc_init_array+0x38>)
 8008a90:	4c0d      	ldr	r4, [pc, #52]	@ (8008ac8 <__libc_init_array+0x3c>)
 8008a92:	1b64      	subs	r4, r4, r5
 8008a94:	10a4      	asrs	r4, r4, #2
 8008a96:	2600      	movs	r6, #0
 8008a98:	42a6      	cmp	r6, r4
 8008a9a:	d109      	bne.n	8008ab0 <__libc_init_array+0x24>
 8008a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8008acc <__libc_init_array+0x40>)
 8008a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8008ad0 <__libc_init_array+0x44>)
 8008aa0:	f000 fc66 	bl	8009370 <_init>
 8008aa4:	1b64      	subs	r4, r4, r5
 8008aa6:	10a4      	asrs	r4, r4, #2
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	42a6      	cmp	r6, r4
 8008aac:	d105      	bne.n	8008aba <__libc_init_array+0x2e>
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab4:	4798      	blx	r3
 8008ab6:	3601      	adds	r6, #1
 8008ab8:	e7ee      	b.n	8008a98 <__libc_init_array+0xc>
 8008aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abe:	4798      	blx	r3
 8008ac0:	3601      	adds	r6, #1
 8008ac2:	e7f2      	b.n	8008aaa <__libc_init_array+0x1e>
 8008ac4:	08009674 	.word	0x08009674
 8008ac8:	08009674 	.word	0x08009674
 8008acc:	08009674 	.word	0x08009674
 8008ad0:	08009678 	.word	0x08009678

08008ad4 <__retarget_lock_acquire_recursive>:
 8008ad4:	4770      	bx	lr

08008ad6 <__retarget_lock_release_recursive>:
 8008ad6:	4770      	bx	lr

08008ad8 <_free_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4605      	mov	r5, r0
 8008adc:	2900      	cmp	r1, #0
 8008ade:	d041      	beq.n	8008b64 <_free_r+0x8c>
 8008ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ae4:	1f0c      	subs	r4, r1, #4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bfb8      	it	lt
 8008aea:	18e4      	addlt	r4, r4, r3
 8008aec:	f000 f8e0 	bl	8008cb0 <__malloc_lock>
 8008af0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b68 <_free_r+0x90>)
 8008af2:	6813      	ldr	r3, [r2, #0]
 8008af4:	b933      	cbnz	r3, 8008b04 <_free_r+0x2c>
 8008af6:	6063      	str	r3, [r4, #4]
 8008af8:	6014      	str	r4, [r2, #0]
 8008afa:	4628      	mov	r0, r5
 8008afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b00:	f000 b8dc 	b.w	8008cbc <__malloc_unlock>
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	d908      	bls.n	8008b1a <_free_r+0x42>
 8008b08:	6820      	ldr	r0, [r4, #0]
 8008b0a:	1821      	adds	r1, r4, r0
 8008b0c:	428b      	cmp	r3, r1
 8008b0e:	bf01      	itttt	eq
 8008b10:	6819      	ldreq	r1, [r3, #0]
 8008b12:	685b      	ldreq	r3, [r3, #4]
 8008b14:	1809      	addeq	r1, r1, r0
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	e7ed      	b.n	8008af6 <_free_r+0x1e>
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	b10b      	cbz	r3, 8008b24 <_free_r+0x4c>
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d9fa      	bls.n	8008b1a <_free_r+0x42>
 8008b24:	6811      	ldr	r1, [r2, #0]
 8008b26:	1850      	adds	r0, r2, r1
 8008b28:	42a0      	cmp	r0, r4
 8008b2a:	d10b      	bne.n	8008b44 <_free_r+0x6c>
 8008b2c:	6820      	ldr	r0, [r4, #0]
 8008b2e:	4401      	add	r1, r0
 8008b30:	1850      	adds	r0, r2, r1
 8008b32:	4283      	cmp	r3, r0
 8008b34:	6011      	str	r1, [r2, #0]
 8008b36:	d1e0      	bne.n	8008afa <_free_r+0x22>
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	6053      	str	r3, [r2, #4]
 8008b3e:	4408      	add	r0, r1
 8008b40:	6010      	str	r0, [r2, #0]
 8008b42:	e7da      	b.n	8008afa <_free_r+0x22>
 8008b44:	d902      	bls.n	8008b4c <_free_r+0x74>
 8008b46:	230c      	movs	r3, #12
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	e7d6      	b.n	8008afa <_free_r+0x22>
 8008b4c:	6820      	ldr	r0, [r4, #0]
 8008b4e:	1821      	adds	r1, r4, r0
 8008b50:	428b      	cmp	r3, r1
 8008b52:	bf04      	itt	eq
 8008b54:	6819      	ldreq	r1, [r3, #0]
 8008b56:	685b      	ldreq	r3, [r3, #4]
 8008b58:	6063      	str	r3, [r4, #4]
 8008b5a:	bf04      	itt	eq
 8008b5c:	1809      	addeq	r1, r1, r0
 8008b5e:	6021      	streq	r1, [r4, #0]
 8008b60:	6054      	str	r4, [r2, #4]
 8008b62:	e7ca      	b.n	8008afa <_free_r+0x22>
 8008b64:	bd38      	pop	{r3, r4, r5, pc}
 8008b66:	bf00      	nop
 8008b68:	200006e4 	.word	0x200006e4

08008b6c <sbrk_aligned>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008bac <sbrk_aligned+0x40>)
 8008b70:	460c      	mov	r4, r1
 8008b72:	6831      	ldr	r1, [r6, #0]
 8008b74:	4605      	mov	r5, r0
 8008b76:	b911      	cbnz	r1, 8008b7e <sbrk_aligned+0x12>
 8008b78:	f000 fba6 	bl	80092c8 <_sbrk_r>
 8008b7c:	6030      	str	r0, [r6, #0]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 fba1 	bl	80092c8 <_sbrk_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d103      	bne.n	8008b92 <sbrk_aligned+0x26>
 8008b8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b8e:	4620      	mov	r0, r4
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	1cc4      	adds	r4, r0, #3
 8008b94:	f024 0403 	bic.w	r4, r4, #3
 8008b98:	42a0      	cmp	r0, r4
 8008b9a:	d0f8      	beq.n	8008b8e <sbrk_aligned+0x22>
 8008b9c:	1a21      	subs	r1, r4, r0
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 fb92 	bl	80092c8 <_sbrk_r>
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d1f2      	bne.n	8008b8e <sbrk_aligned+0x22>
 8008ba8:	e7ef      	b.n	8008b8a <sbrk_aligned+0x1e>
 8008baa:	bf00      	nop
 8008bac:	200006e0 	.word	0x200006e0

08008bb0 <_malloc_r>:
 8008bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	1ccd      	adds	r5, r1, #3
 8008bb6:	f025 0503 	bic.w	r5, r5, #3
 8008bba:	3508      	adds	r5, #8
 8008bbc:	2d0c      	cmp	r5, #12
 8008bbe:	bf38      	it	cc
 8008bc0:	250c      	movcc	r5, #12
 8008bc2:	2d00      	cmp	r5, #0
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	db01      	blt.n	8008bcc <_malloc_r+0x1c>
 8008bc8:	42a9      	cmp	r1, r5
 8008bca:	d904      	bls.n	8008bd6 <_malloc_r+0x26>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	6033      	str	r3, [r6, #0]
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cac <_malloc_r+0xfc>
 8008bda:	f000 f869 	bl	8008cb0 <__malloc_lock>
 8008bde:	f8d8 3000 	ldr.w	r3, [r8]
 8008be2:	461c      	mov	r4, r3
 8008be4:	bb44      	cbnz	r4, 8008c38 <_malloc_r+0x88>
 8008be6:	4629      	mov	r1, r5
 8008be8:	4630      	mov	r0, r6
 8008bea:	f7ff ffbf 	bl	8008b6c <sbrk_aligned>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	d158      	bne.n	8008ca6 <_malloc_r+0xf6>
 8008bf4:	f8d8 4000 	ldr.w	r4, [r8]
 8008bf8:	4627      	mov	r7, r4
 8008bfa:	2f00      	cmp	r7, #0
 8008bfc:	d143      	bne.n	8008c86 <_malloc_r+0xd6>
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d04b      	beq.n	8008c9a <_malloc_r+0xea>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	4639      	mov	r1, r7
 8008c06:	4630      	mov	r0, r6
 8008c08:	eb04 0903 	add.w	r9, r4, r3
 8008c0c:	f000 fb5c 	bl	80092c8 <_sbrk_r>
 8008c10:	4581      	cmp	r9, r0
 8008c12:	d142      	bne.n	8008c9a <_malloc_r+0xea>
 8008c14:	6821      	ldr	r1, [r4, #0]
 8008c16:	1a6d      	subs	r5, r5, r1
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7ff ffa6 	bl	8008b6c <sbrk_aligned>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d03a      	beq.n	8008c9a <_malloc_r+0xea>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	442b      	add	r3, r5
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	bb62      	cbnz	r2, 8008c8c <_malloc_r+0xdc>
 8008c32:	f8c8 7000 	str.w	r7, [r8]
 8008c36:	e00f      	b.n	8008c58 <_malloc_r+0xa8>
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	1b52      	subs	r2, r2, r5
 8008c3c:	d420      	bmi.n	8008c80 <_malloc_r+0xd0>
 8008c3e:	2a0b      	cmp	r2, #11
 8008c40:	d917      	bls.n	8008c72 <_malloc_r+0xc2>
 8008c42:	1961      	adds	r1, r4, r5
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	6025      	str	r5, [r4, #0]
 8008c48:	bf18      	it	ne
 8008c4a:	6059      	strne	r1, [r3, #4]
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	bf08      	it	eq
 8008c50:	f8c8 1000 	streq.w	r1, [r8]
 8008c54:	5162      	str	r2, [r4, r5]
 8008c56:	604b      	str	r3, [r1, #4]
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 f82f 	bl	8008cbc <__malloc_unlock>
 8008c5e:	f104 000b 	add.w	r0, r4, #11
 8008c62:	1d23      	adds	r3, r4, #4
 8008c64:	f020 0007 	bic.w	r0, r0, #7
 8008c68:	1ac2      	subs	r2, r0, r3
 8008c6a:	bf1c      	itt	ne
 8008c6c:	1a1b      	subne	r3, r3, r0
 8008c6e:	50a3      	strne	r3, [r4, r2]
 8008c70:	e7af      	b.n	8008bd2 <_malloc_r+0x22>
 8008c72:	6862      	ldr	r2, [r4, #4]
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	bf0c      	ite	eq
 8008c78:	f8c8 2000 	streq.w	r2, [r8]
 8008c7c:	605a      	strne	r2, [r3, #4]
 8008c7e:	e7eb      	b.n	8008c58 <_malloc_r+0xa8>
 8008c80:	4623      	mov	r3, r4
 8008c82:	6864      	ldr	r4, [r4, #4]
 8008c84:	e7ae      	b.n	8008be4 <_malloc_r+0x34>
 8008c86:	463c      	mov	r4, r7
 8008c88:	687f      	ldr	r7, [r7, #4]
 8008c8a:	e7b6      	b.n	8008bfa <_malloc_r+0x4a>
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d1fb      	bne.n	8008c8c <_malloc_r+0xdc>
 8008c94:	2300      	movs	r3, #0
 8008c96:	6053      	str	r3, [r2, #4]
 8008c98:	e7de      	b.n	8008c58 <_malloc_r+0xa8>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	6033      	str	r3, [r6, #0]
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f80c 	bl	8008cbc <__malloc_unlock>
 8008ca4:	e794      	b.n	8008bd0 <_malloc_r+0x20>
 8008ca6:	6005      	str	r5, [r0, #0]
 8008ca8:	e7d6      	b.n	8008c58 <_malloc_r+0xa8>
 8008caa:	bf00      	nop
 8008cac:	200006e4 	.word	0x200006e4

08008cb0 <__malloc_lock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	@ (8008cb8 <__malloc_lock+0x8>)
 8008cb2:	f7ff bf0f 	b.w	8008ad4 <__retarget_lock_acquire_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	200006dc 	.word	0x200006dc

08008cbc <__malloc_unlock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	@ (8008cc4 <__malloc_unlock+0x8>)
 8008cbe:	f7ff bf0a 	b.w	8008ad6 <__retarget_lock_release_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	200006dc 	.word	0x200006dc

08008cc8 <__ssputs_r>:
 8008cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	688e      	ldr	r6, [r1, #8]
 8008cce:	461f      	mov	r7, r3
 8008cd0:	42be      	cmp	r6, r7
 8008cd2:	680b      	ldr	r3, [r1, #0]
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	4690      	mov	r8, r2
 8008cda:	d82d      	bhi.n	8008d38 <__ssputs_r+0x70>
 8008cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ce0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ce4:	d026      	beq.n	8008d34 <__ssputs_r+0x6c>
 8008ce6:	6965      	ldr	r5, [r4, #20]
 8008ce8:	6909      	ldr	r1, [r1, #16]
 8008cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cee:	eba3 0901 	sub.w	r9, r3, r1
 8008cf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cf6:	1c7b      	adds	r3, r7, #1
 8008cf8:	444b      	add	r3, r9
 8008cfa:	106d      	asrs	r5, r5, #1
 8008cfc:	429d      	cmp	r5, r3
 8008cfe:	bf38      	it	cc
 8008d00:	461d      	movcc	r5, r3
 8008d02:	0553      	lsls	r3, r2, #21
 8008d04:	d527      	bpl.n	8008d56 <__ssputs_r+0x8e>
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7ff ff52 	bl	8008bb0 <_malloc_r>
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	b360      	cbz	r0, 8008d6a <__ssputs_r+0xa2>
 8008d10:	6921      	ldr	r1, [r4, #16]
 8008d12:	464a      	mov	r2, r9
 8008d14:	f000 fae8 	bl	80092e8 <memcpy>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	6126      	str	r6, [r4, #16]
 8008d26:	6165      	str	r5, [r4, #20]
 8008d28:	444e      	add	r6, r9
 8008d2a:	eba5 0509 	sub.w	r5, r5, r9
 8008d2e:	6026      	str	r6, [r4, #0]
 8008d30:	60a5      	str	r5, [r4, #8]
 8008d32:	463e      	mov	r6, r7
 8008d34:	42be      	cmp	r6, r7
 8008d36:	d900      	bls.n	8008d3a <__ssputs_r+0x72>
 8008d38:	463e      	mov	r6, r7
 8008d3a:	6820      	ldr	r0, [r4, #0]
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	4641      	mov	r1, r8
 8008d40:	f000 faa8 	bl	8009294 <memmove>
 8008d44:	68a3      	ldr	r3, [r4, #8]
 8008d46:	1b9b      	subs	r3, r3, r6
 8008d48:	60a3      	str	r3, [r4, #8]
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	4433      	add	r3, r6
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	2000      	movs	r0, #0
 8008d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d56:	462a      	mov	r2, r5
 8008d58:	f000 fad4 	bl	8009304 <_realloc_r>
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d1e0      	bne.n	8008d24 <__ssputs_r+0x5c>
 8008d62:	6921      	ldr	r1, [r4, #16]
 8008d64:	4650      	mov	r0, sl
 8008d66:	f7ff feb7 	bl	8008ad8 <_free_r>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	f8ca 3000 	str.w	r3, [sl]
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	e7e9      	b.n	8008d52 <__ssputs_r+0x8a>
	...

08008d80 <_svfiprintf_r>:
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	4698      	mov	r8, r3
 8008d86:	898b      	ldrh	r3, [r1, #12]
 8008d88:	061b      	lsls	r3, r3, #24
 8008d8a:	b09d      	sub	sp, #116	@ 0x74
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	460d      	mov	r5, r1
 8008d90:	4614      	mov	r4, r2
 8008d92:	d510      	bpl.n	8008db6 <_svfiprintf_r+0x36>
 8008d94:	690b      	ldr	r3, [r1, #16]
 8008d96:	b973      	cbnz	r3, 8008db6 <_svfiprintf_r+0x36>
 8008d98:	2140      	movs	r1, #64	@ 0x40
 8008d9a:	f7ff ff09 	bl	8008bb0 <_malloc_r>
 8008d9e:	6028      	str	r0, [r5, #0]
 8008da0:	6128      	str	r0, [r5, #16]
 8008da2:	b930      	cbnz	r0, 8008db2 <_svfiprintf_r+0x32>
 8008da4:	230c      	movs	r3, #12
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	b01d      	add	sp, #116	@ 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	2340      	movs	r3, #64	@ 0x40
 8008db4:	616b      	str	r3, [r5, #20]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc4:	2330      	movs	r3, #48	@ 0x30
 8008dc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f64 <_svfiprintf_r+0x1e4>
 8008dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dce:	f04f 0901 	mov.w	r9, #1
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dda:	b10a      	cbz	r2, 8008de0 <_svfiprintf_r+0x60>
 8008ddc:	2a25      	cmp	r2, #37	@ 0x25
 8008dde:	d1f9      	bne.n	8008dd4 <_svfiprintf_r+0x54>
 8008de0:	ebba 0b04 	subs.w	fp, sl, r4
 8008de4:	d00b      	beq.n	8008dfe <_svfiprintf_r+0x7e>
 8008de6:	465b      	mov	r3, fp
 8008de8:	4622      	mov	r2, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	4638      	mov	r0, r7
 8008dee:	f7ff ff6b 	bl	8008cc8 <__ssputs_r>
 8008df2:	3001      	adds	r0, #1
 8008df4:	f000 80a7 	beq.w	8008f46 <_svfiprintf_r+0x1c6>
 8008df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dfa:	445a      	add	r2, fp
 8008dfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 809f 	beq.w	8008f46 <_svfiprintf_r+0x1c6>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e12:	f10a 0a01 	add.w	sl, sl, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	9307      	str	r3, [sp, #28]
 8008e1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e20:	4654      	mov	r4, sl
 8008e22:	2205      	movs	r2, #5
 8008e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e28:	484e      	ldr	r0, [pc, #312]	@ (8008f64 <_svfiprintf_r+0x1e4>)
 8008e2a:	f7f7 f9f9 	bl	8000220 <memchr>
 8008e2e:	9a04      	ldr	r2, [sp, #16]
 8008e30:	b9d8      	cbnz	r0, 8008e6a <_svfiprintf_r+0xea>
 8008e32:	06d0      	lsls	r0, r2, #27
 8008e34:	bf44      	itt	mi
 8008e36:	2320      	movmi	r3, #32
 8008e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e3c:	0711      	lsls	r1, r2, #28
 8008e3e:	bf44      	itt	mi
 8008e40:	232b      	movmi	r3, #43	@ 0x2b
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e46:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e4c:	d015      	beq.n	8008e7a <_svfiprintf_r+0xfa>
 8008e4e:	9a07      	ldr	r2, [sp, #28]
 8008e50:	4654      	mov	r4, sl
 8008e52:	2000      	movs	r0, #0
 8008e54:	f04f 0c0a 	mov.w	ip, #10
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5e:	3b30      	subs	r3, #48	@ 0x30
 8008e60:	2b09      	cmp	r3, #9
 8008e62:	d94b      	bls.n	8008efc <_svfiprintf_r+0x17c>
 8008e64:	b1b0      	cbz	r0, 8008e94 <_svfiprintf_r+0x114>
 8008e66:	9207      	str	r2, [sp, #28]
 8008e68:	e014      	b.n	8008e94 <_svfiprintf_r+0x114>
 8008e6a:	eba0 0308 	sub.w	r3, r0, r8
 8008e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	46a2      	mov	sl, r4
 8008e78:	e7d2      	b.n	8008e20 <_svfiprintf_r+0xa0>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	1d19      	adds	r1, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfbb      	ittet	lt
 8008e86:	425b      	neglt	r3, r3
 8008e88:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8c:	9307      	strge	r3, [sp, #28]
 8008e8e:	9307      	strlt	r3, [sp, #28]
 8008e90:	bfb8      	it	lt
 8008e92:	9204      	strlt	r2, [sp, #16]
 8008e94:	7823      	ldrb	r3, [r4, #0]
 8008e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e98:	d10a      	bne.n	8008eb0 <_svfiprintf_r+0x130>
 8008e9a:	7863      	ldrb	r3, [r4, #1]
 8008e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9e:	d132      	bne.n	8008f06 <_svfiprintf_r+0x186>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eac:	3402      	adds	r4, #2
 8008eae:	9305      	str	r3, [sp, #20]
 8008eb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f74 <_svfiprintf_r+0x1f4>
 8008eb4:	7821      	ldrb	r1, [r4, #0]
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	4650      	mov	r0, sl
 8008eba:	f7f7 f9b1 	bl	8000220 <memchr>
 8008ebe:	b138      	cbz	r0, 8008ed0 <_svfiprintf_r+0x150>
 8008ec0:	9b04      	ldr	r3, [sp, #16]
 8008ec2:	eba0 000a 	sub.w	r0, r0, sl
 8008ec6:	2240      	movs	r2, #64	@ 0x40
 8008ec8:	4082      	lsls	r2, r0
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	3401      	adds	r4, #1
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed4:	4824      	ldr	r0, [pc, #144]	@ (8008f68 <_svfiprintf_r+0x1e8>)
 8008ed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eda:	2206      	movs	r2, #6
 8008edc:	f7f7 f9a0 	bl	8000220 <memchr>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d036      	beq.n	8008f52 <_svfiprintf_r+0x1d2>
 8008ee4:	4b21      	ldr	r3, [pc, #132]	@ (8008f6c <_svfiprintf_r+0x1ec>)
 8008ee6:	bb1b      	cbnz	r3, 8008f30 <_svfiprintf_r+0x1b0>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	3307      	adds	r3, #7
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef6:	4433      	add	r3, r6
 8008ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008efa:	e76a      	b.n	8008dd2 <_svfiprintf_r+0x52>
 8008efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f00:	460c      	mov	r4, r1
 8008f02:	2001      	movs	r0, #1
 8008f04:	e7a8      	b.n	8008e58 <_svfiprintf_r+0xd8>
 8008f06:	2300      	movs	r3, #0
 8008f08:	3401      	adds	r4, #1
 8008f0a:	9305      	str	r3, [sp, #20]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f04f 0c0a 	mov.w	ip, #10
 8008f12:	4620      	mov	r0, r4
 8008f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f18:	3a30      	subs	r2, #48	@ 0x30
 8008f1a:	2a09      	cmp	r2, #9
 8008f1c:	d903      	bls.n	8008f26 <_svfiprintf_r+0x1a6>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0c6      	beq.n	8008eb0 <_svfiprintf_r+0x130>
 8008f22:	9105      	str	r1, [sp, #20]
 8008f24:	e7c4      	b.n	8008eb0 <_svfiprintf_r+0x130>
 8008f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7f0      	b.n	8008f12 <_svfiprintf_r+0x192>
 8008f30:	ab03      	add	r3, sp, #12
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	462a      	mov	r2, r5
 8008f36:	4b0e      	ldr	r3, [pc, #56]	@ (8008f70 <_svfiprintf_r+0x1f0>)
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f3af 8000 	nop.w
 8008f40:	1c42      	adds	r2, r0, #1
 8008f42:	4606      	mov	r6, r0
 8008f44:	d1d6      	bne.n	8008ef4 <_svfiprintf_r+0x174>
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	065b      	lsls	r3, r3, #25
 8008f4a:	f53f af2d 	bmi.w	8008da8 <_svfiprintf_r+0x28>
 8008f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f50:	e72c      	b.n	8008dac <_svfiprintf_r+0x2c>
 8008f52:	ab03      	add	r3, sp, #12
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	462a      	mov	r2, r5
 8008f58:	4b05      	ldr	r3, [pc, #20]	@ (8008f70 <_svfiprintf_r+0x1f0>)
 8008f5a:	a904      	add	r1, sp, #16
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f000 f879 	bl	8009054 <_printf_i>
 8008f62:	e7ed      	b.n	8008f40 <_svfiprintf_r+0x1c0>
 8008f64:	08009639 	.word	0x08009639
 8008f68:	08009643 	.word	0x08009643
 8008f6c:	00000000 	.word	0x00000000
 8008f70:	08008cc9 	.word	0x08008cc9
 8008f74:	0800963f 	.word	0x0800963f

08008f78 <_printf_common>:
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	4698      	mov	r8, r3
 8008f80:	688a      	ldr	r2, [r1, #8]
 8008f82:	690b      	ldr	r3, [r1, #16]
 8008f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	bfb8      	it	lt
 8008f8c:	4613      	movlt	r3, r2
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f94:	4607      	mov	r7, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b10a      	cbz	r2, 8008f9e <_printf_common+0x26>
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	0699      	lsls	r1, r3, #26
 8008fa2:	bf42      	ittt	mi
 8008fa4:	6833      	ldrmi	r3, [r6, #0]
 8008fa6:	3302      	addmi	r3, #2
 8008fa8:	6033      	strmi	r3, [r6, #0]
 8008faa:	6825      	ldr	r5, [r4, #0]
 8008fac:	f015 0506 	ands.w	r5, r5, #6
 8008fb0:	d106      	bne.n	8008fc0 <_printf_common+0x48>
 8008fb2:	f104 0a19 	add.w	sl, r4, #25
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	6832      	ldr	r2, [r6, #0]
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dc26      	bgt.n	800900e <_printf_common+0x96>
 8008fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	3b00      	subs	r3, #0
 8008fc8:	bf18      	it	ne
 8008fca:	2301      	movne	r3, #1
 8008fcc:	0692      	lsls	r2, r2, #26
 8008fce:	d42b      	bmi.n	8009028 <_printf_common+0xb0>
 8008fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	47c8      	blx	r9
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d01e      	beq.n	800901c <_printf_common+0xa4>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	f003 0306 	and.w	r3, r3, #6
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	bf02      	ittt	eq
 8008fea:	68e5      	ldreq	r5, [r4, #12]
 8008fec:	6833      	ldreq	r3, [r6, #0]
 8008fee:	1aed      	subeq	r5, r5, r3
 8008ff0:	68a3      	ldr	r3, [r4, #8]
 8008ff2:	bf0c      	ite	eq
 8008ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff8:	2500      	movne	r5, #0
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	bfc4      	itt	gt
 8008ffe:	1a9b      	subgt	r3, r3, r2
 8009000:	18ed      	addgt	r5, r5, r3
 8009002:	2600      	movs	r6, #0
 8009004:	341a      	adds	r4, #26
 8009006:	42b5      	cmp	r5, r6
 8009008:	d11a      	bne.n	8009040 <_printf_common+0xc8>
 800900a:	2000      	movs	r0, #0
 800900c:	e008      	b.n	8009020 <_printf_common+0xa8>
 800900e:	2301      	movs	r3, #1
 8009010:	4652      	mov	r2, sl
 8009012:	4641      	mov	r1, r8
 8009014:	4638      	mov	r0, r7
 8009016:	47c8      	blx	r9
 8009018:	3001      	adds	r0, #1
 800901a:	d103      	bne.n	8009024 <_printf_common+0xac>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009024:	3501      	adds	r5, #1
 8009026:	e7c6      	b.n	8008fb6 <_printf_common+0x3e>
 8009028:	18e1      	adds	r1, r4, r3
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	2030      	movs	r0, #48	@ 0x30
 800902e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009032:	4422      	add	r2, r4
 8009034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800903c:	3302      	adds	r3, #2
 800903e:	e7c7      	b.n	8008fd0 <_printf_common+0x58>
 8009040:	2301      	movs	r3, #1
 8009042:	4622      	mov	r2, r4
 8009044:	4641      	mov	r1, r8
 8009046:	4638      	mov	r0, r7
 8009048:	47c8      	blx	r9
 800904a:	3001      	adds	r0, #1
 800904c:	d0e6      	beq.n	800901c <_printf_common+0xa4>
 800904e:	3601      	adds	r6, #1
 8009050:	e7d9      	b.n	8009006 <_printf_common+0x8e>
	...

08009054 <_printf_i>:
 8009054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	7e0f      	ldrb	r7, [r1, #24]
 800905a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800905c:	2f78      	cmp	r7, #120	@ 0x78
 800905e:	4691      	mov	r9, r2
 8009060:	4680      	mov	r8, r0
 8009062:	460c      	mov	r4, r1
 8009064:	469a      	mov	sl, r3
 8009066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800906a:	d807      	bhi.n	800907c <_printf_i+0x28>
 800906c:	2f62      	cmp	r7, #98	@ 0x62
 800906e:	d80a      	bhi.n	8009086 <_printf_i+0x32>
 8009070:	2f00      	cmp	r7, #0
 8009072:	f000 80d2 	beq.w	800921a <_printf_i+0x1c6>
 8009076:	2f58      	cmp	r7, #88	@ 0x58
 8009078:	f000 80b9 	beq.w	80091ee <_printf_i+0x19a>
 800907c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009084:	e03a      	b.n	80090fc <_printf_i+0xa8>
 8009086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800908a:	2b15      	cmp	r3, #21
 800908c:	d8f6      	bhi.n	800907c <_printf_i+0x28>
 800908e:	a101      	add	r1, pc, #4	@ (adr r1, 8009094 <_printf_i+0x40>)
 8009090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009094:	080090ed 	.word	0x080090ed
 8009098:	08009101 	.word	0x08009101
 800909c:	0800907d 	.word	0x0800907d
 80090a0:	0800907d 	.word	0x0800907d
 80090a4:	0800907d 	.word	0x0800907d
 80090a8:	0800907d 	.word	0x0800907d
 80090ac:	08009101 	.word	0x08009101
 80090b0:	0800907d 	.word	0x0800907d
 80090b4:	0800907d 	.word	0x0800907d
 80090b8:	0800907d 	.word	0x0800907d
 80090bc:	0800907d 	.word	0x0800907d
 80090c0:	08009201 	.word	0x08009201
 80090c4:	0800912b 	.word	0x0800912b
 80090c8:	080091bb 	.word	0x080091bb
 80090cc:	0800907d 	.word	0x0800907d
 80090d0:	0800907d 	.word	0x0800907d
 80090d4:	08009223 	.word	0x08009223
 80090d8:	0800907d 	.word	0x0800907d
 80090dc:	0800912b 	.word	0x0800912b
 80090e0:	0800907d 	.word	0x0800907d
 80090e4:	0800907d 	.word	0x0800907d
 80090e8:	080091c3 	.word	0x080091c3
 80090ec:	6833      	ldr	r3, [r6, #0]
 80090ee:	1d1a      	adds	r2, r3, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6032      	str	r2, [r6, #0]
 80090f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090fc:	2301      	movs	r3, #1
 80090fe:	e09d      	b.n	800923c <_printf_i+0x1e8>
 8009100:	6833      	ldr	r3, [r6, #0]
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	1d19      	adds	r1, r3, #4
 8009106:	6031      	str	r1, [r6, #0]
 8009108:	0606      	lsls	r6, r0, #24
 800910a:	d501      	bpl.n	8009110 <_printf_i+0xbc>
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	e003      	b.n	8009118 <_printf_i+0xc4>
 8009110:	0645      	lsls	r5, r0, #25
 8009112:	d5fb      	bpl.n	800910c <_printf_i+0xb8>
 8009114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009118:	2d00      	cmp	r5, #0
 800911a:	da03      	bge.n	8009124 <_printf_i+0xd0>
 800911c:	232d      	movs	r3, #45	@ 0x2d
 800911e:	426d      	negs	r5, r5
 8009120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009124:	4859      	ldr	r0, [pc, #356]	@ (800928c <_printf_i+0x238>)
 8009126:	230a      	movs	r3, #10
 8009128:	e011      	b.n	800914e <_printf_i+0xfa>
 800912a:	6821      	ldr	r1, [r4, #0]
 800912c:	6833      	ldr	r3, [r6, #0]
 800912e:	0608      	lsls	r0, r1, #24
 8009130:	f853 5b04 	ldr.w	r5, [r3], #4
 8009134:	d402      	bmi.n	800913c <_printf_i+0xe8>
 8009136:	0649      	lsls	r1, r1, #25
 8009138:	bf48      	it	mi
 800913a:	b2ad      	uxthmi	r5, r5
 800913c:	2f6f      	cmp	r7, #111	@ 0x6f
 800913e:	4853      	ldr	r0, [pc, #332]	@ (800928c <_printf_i+0x238>)
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	bf14      	ite	ne
 8009144:	230a      	movne	r3, #10
 8009146:	2308      	moveq	r3, #8
 8009148:	2100      	movs	r1, #0
 800914a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800914e:	6866      	ldr	r6, [r4, #4]
 8009150:	60a6      	str	r6, [r4, #8]
 8009152:	2e00      	cmp	r6, #0
 8009154:	bfa2      	ittt	ge
 8009156:	6821      	ldrge	r1, [r4, #0]
 8009158:	f021 0104 	bicge.w	r1, r1, #4
 800915c:	6021      	strge	r1, [r4, #0]
 800915e:	b90d      	cbnz	r5, 8009164 <_printf_i+0x110>
 8009160:	2e00      	cmp	r6, #0
 8009162:	d04b      	beq.n	80091fc <_printf_i+0x1a8>
 8009164:	4616      	mov	r6, r2
 8009166:	fbb5 f1f3 	udiv	r1, r5, r3
 800916a:	fb03 5711 	mls	r7, r3, r1, r5
 800916e:	5dc7      	ldrb	r7, [r0, r7]
 8009170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009174:	462f      	mov	r7, r5
 8009176:	42bb      	cmp	r3, r7
 8009178:	460d      	mov	r5, r1
 800917a:	d9f4      	bls.n	8009166 <_printf_i+0x112>
 800917c:	2b08      	cmp	r3, #8
 800917e:	d10b      	bne.n	8009198 <_printf_i+0x144>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	07df      	lsls	r7, r3, #31
 8009184:	d508      	bpl.n	8009198 <_printf_i+0x144>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	4299      	cmp	r1, r3
 800918c:	bfde      	ittt	le
 800918e:	2330      	movle	r3, #48	@ 0x30
 8009190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009198:	1b92      	subs	r2, r2, r6
 800919a:	6122      	str	r2, [r4, #16]
 800919c:	f8cd a000 	str.w	sl, [sp]
 80091a0:	464b      	mov	r3, r9
 80091a2:	aa03      	add	r2, sp, #12
 80091a4:	4621      	mov	r1, r4
 80091a6:	4640      	mov	r0, r8
 80091a8:	f7ff fee6 	bl	8008f78 <_printf_common>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d14a      	bne.n	8009246 <_printf_i+0x1f2>
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	b004      	add	sp, #16
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f043 0320 	orr.w	r3, r3, #32
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	4833      	ldr	r0, [pc, #204]	@ (8009290 <_printf_i+0x23c>)
 80091c4:	2778      	movs	r7, #120	@ 0x78
 80091c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	6831      	ldr	r1, [r6, #0]
 80091ce:	061f      	lsls	r7, r3, #24
 80091d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80091d4:	d402      	bmi.n	80091dc <_printf_i+0x188>
 80091d6:	065f      	lsls	r7, r3, #25
 80091d8:	bf48      	it	mi
 80091da:	b2ad      	uxthmi	r5, r5
 80091dc:	6031      	str	r1, [r6, #0]
 80091de:	07d9      	lsls	r1, r3, #31
 80091e0:	bf44      	itt	mi
 80091e2:	f043 0320 	orrmi.w	r3, r3, #32
 80091e6:	6023      	strmi	r3, [r4, #0]
 80091e8:	b11d      	cbz	r5, 80091f2 <_printf_i+0x19e>
 80091ea:	2310      	movs	r3, #16
 80091ec:	e7ac      	b.n	8009148 <_printf_i+0xf4>
 80091ee:	4827      	ldr	r0, [pc, #156]	@ (800928c <_printf_i+0x238>)
 80091f0:	e7e9      	b.n	80091c6 <_printf_i+0x172>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	f023 0320 	bic.w	r3, r3, #32
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	e7f6      	b.n	80091ea <_printf_i+0x196>
 80091fc:	4616      	mov	r6, r2
 80091fe:	e7bd      	b.n	800917c <_printf_i+0x128>
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	6961      	ldr	r1, [r4, #20]
 8009206:	1d18      	adds	r0, r3, #4
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	062e      	lsls	r6, r5, #24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	d501      	bpl.n	8009214 <_printf_i+0x1c0>
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	e002      	b.n	800921a <_printf_i+0x1c6>
 8009214:	0668      	lsls	r0, r5, #25
 8009216:	d5fb      	bpl.n	8009210 <_printf_i+0x1bc>
 8009218:	8019      	strh	r1, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	6123      	str	r3, [r4, #16]
 800921e:	4616      	mov	r6, r2
 8009220:	e7bc      	b.n	800919c <_printf_i+0x148>
 8009222:	6833      	ldr	r3, [r6, #0]
 8009224:	1d1a      	adds	r2, r3, #4
 8009226:	6032      	str	r2, [r6, #0]
 8009228:	681e      	ldr	r6, [r3, #0]
 800922a:	6862      	ldr	r2, [r4, #4]
 800922c:	2100      	movs	r1, #0
 800922e:	4630      	mov	r0, r6
 8009230:	f7f6 fff6 	bl	8000220 <memchr>
 8009234:	b108      	cbz	r0, 800923a <_printf_i+0x1e6>
 8009236:	1b80      	subs	r0, r0, r6
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	2300      	movs	r3, #0
 8009240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009244:	e7aa      	b.n	800919c <_printf_i+0x148>
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	4632      	mov	r2, r6
 800924a:	4649      	mov	r1, r9
 800924c:	4640      	mov	r0, r8
 800924e:	47d0      	blx	sl
 8009250:	3001      	adds	r0, #1
 8009252:	d0ad      	beq.n	80091b0 <_printf_i+0x15c>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	d413      	bmi.n	8009282 <_printf_i+0x22e>
 800925a:	68e0      	ldr	r0, [r4, #12]
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	4298      	cmp	r0, r3
 8009260:	bfb8      	it	lt
 8009262:	4618      	movlt	r0, r3
 8009264:	e7a6      	b.n	80091b4 <_printf_i+0x160>
 8009266:	2301      	movs	r3, #1
 8009268:	4632      	mov	r2, r6
 800926a:	4649      	mov	r1, r9
 800926c:	4640      	mov	r0, r8
 800926e:	47d0      	blx	sl
 8009270:	3001      	adds	r0, #1
 8009272:	d09d      	beq.n	80091b0 <_printf_i+0x15c>
 8009274:	3501      	adds	r5, #1
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	9903      	ldr	r1, [sp, #12]
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	42ab      	cmp	r3, r5
 800927e:	dcf2      	bgt.n	8009266 <_printf_i+0x212>
 8009280:	e7eb      	b.n	800925a <_printf_i+0x206>
 8009282:	2500      	movs	r5, #0
 8009284:	f104 0619 	add.w	r6, r4, #25
 8009288:	e7f5      	b.n	8009276 <_printf_i+0x222>
 800928a:	bf00      	nop
 800928c:	0800964a 	.word	0x0800964a
 8009290:	0800965b 	.word	0x0800965b

08009294 <memmove>:
 8009294:	4288      	cmp	r0, r1
 8009296:	b510      	push	{r4, lr}
 8009298:	eb01 0402 	add.w	r4, r1, r2
 800929c:	d902      	bls.n	80092a4 <memmove+0x10>
 800929e:	4284      	cmp	r4, r0
 80092a0:	4623      	mov	r3, r4
 80092a2:	d807      	bhi.n	80092b4 <memmove+0x20>
 80092a4:	1e43      	subs	r3, r0, #1
 80092a6:	42a1      	cmp	r1, r4
 80092a8:	d008      	beq.n	80092bc <memmove+0x28>
 80092aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092b2:	e7f8      	b.n	80092a6 <memmove+0x12>
 80092b4:	4402      	add	r2, r0
 80092b6:	4601      	mov	r1, r0
 80092b8:	428a      	cmp	r2, r1
 80092ba:	d100      	bne.n	80092be <memmove+0x2a>
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092c6:	e7f7      	b.n	80092b8 <memmove+0x24>

080092c8 <_sbrk_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	@ (80092e4 <_sbrk_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f9 f932 	bl	800253c <_sbrk>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_sbrk_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_sbrk_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200006d8 	.word	0x200006d8

080092e8 <memcpy>:
 80092e8:	440a      	add	r2, r1
 80092ea:	4291      	cmp	r1, r2
 80092ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f0:	d100      	bne.n	80092f4 <memcpy+0xc>
 80092f2:	4770      	bx	lr
 80092f4:	b510      	push	{r4, lr}
 80092f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092fe:	4291      	cmp	r1, r2
 8009300:	d1f9      	bne.n	80092f6 <memcpy+0xe>
 8009302:	bd10      	pop	{r4, pc}

08009304 <_realloc_r>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	4680      	mov	r8, r0
 800930a:	4615      	mov	r5, r2
 800930c:	460c      	mov	r4, r1
 800930e:	b921      	cbnz	r1, 800931a <_realloc_r+0x16>
 8009310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	4611      	mov	r1, r2
 8009316:	f7ff bc4b 	b.w	8008bb0 <_malloc_r>
 800931a:	b92a      	cbnz	r2, 8009328 <_realloc_r+0x24>
 800931c:	f7ff fbdc 	bl	8008ad8 <_free_r>
 8009320:	2400      	movs	r4, #0
 8009322:	4620      	mov	r0, r4
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	f000 f81a 	bl	8009360 <_malloc_usable_size_r>
 800932c:	4285      	cmp	r5, r0
 800932e:	4606      	mov	r6, r0
 8009330:	d802      	bhi.n	8009338 <_realloc_r+0x34>
 8009332:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009336:	d8f4      	bhi.n	8009322 <_realloc_r+0x1e>
 8009338:	4629      	mov	r1, r5
 800933a:	4640      	mov	r0, r8
 800933c:	f7ff fc38 	bl	8008bb0 <_malloc_r>
 8009340:	4607      	mov	r7, r0
 8009342:	2800      	cmp	r0, #0
 8009344:	d0ec      	beq.n	8009320 <_realloc_r+0x1c>
 8009346:	42b5      	cmp	r5, r6
 8009348:	462a      	mov	r2, r5
 800934a:	4621      	mov	r1, r4
 800934c:	bf28      	it	cs
 800934e:	4632      	movcs	r2, r6
 8009350:	f7ff ffca 	bl	80092e8 <memcpy>
 8009354:	4621      	mov	r1, r4
 8009356:	4640      	mov	r0, r8
 8009358:	f7ff fbbe 	bl	8008ad8 <_free_r>
 800935c:	463c      	mov	r4, r7
 800935e:	e7e0      	b.n	8009322 <_realloc_r+0x1e>

08009360 <_malloc_usable_size_r>:
 8009360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009364:	1f18      	subs	r0, r3, #4
 8009366:	2b00      	cmp	r3, #0
 8009368:	bfbc      	itt	lt
 800936a:	580b      	ldrlt	r3, [r1, r0]
 800936c:	18c0      	addlt	r0, r0, r3
 800936e:	4770      	bx	lr

08009370 <_init>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	bf00      	nop
 8009374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009376:	bc08      	pop	{r3}
 8009378:	469e      	mov	lr, r3
 800937a:	4770      	bx	lr

0800937c <_fini>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr
